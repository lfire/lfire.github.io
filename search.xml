<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Jetbrains系列产品激活服务器搭建]]></title>
    <url>%2F2017%2F11%2F10%2Fjetbrains-ide-active-server%2F</url>
    <content type="text"><![CDATA[对于开发者来说，一款合用的开发工具非常影响其开发质量和速率，而纵观所有工具，开发IDE方面，Jetbrains 的产品值得我们称道。他设计的合语言开发 IDE，给我们提供了很好的开发体验，但这其中有一个很难为情的问题，对于我们开发者来说，其正版授权价格一时无法承受，特别是对于一些学习编程的初级入门者来说，就更为困难。因此能有一种好的方式来使用该公司产品，也是对于个人体验，以及编程能力的提升。这里总结了一种自建服务器来激活全系列产品的方法。（当然，对于有能力的开发者来说，还是建议直接购买。） 开始，我们得先感谢这款工具的开发者，lanyus，目前该工具发布的版本已到 1.5 。而针对于相关的使用方法，特别是当自己没有相关公网服务器的情况下，在自己本地机器上运行时，如何使用，有详细的说明，具体可以访问说明教程。 关键操作 下载服务搭建程序 解压，使用 IntelliJIDEALicenseServer_windows_amd64.exe 在相应 idea 注册界面选择 License server，填写 http://127.0.0.1:1017，（据说1017是作者女票生日，像作者女票致敬-_-） 自建公网服务器 同样是下载服务器搭建程序包 执行 tar zxvf IntelliJIDEALicenseServer(v1.5).tar.gz，解压文件，文件内容如下。 根据自身机器的系统情况，选择对应的程序，本例中是：linux 64 位系统，所以我将 IntelliJIDEALicenseServer_linux_amd64 单独提出，并重命名为 IdeaServer。（文件名太长，命令也太长） 运行服务程序，nohup ./IdeaServer -p 1024 -prolongationPeriod 9999999999999999 &gt; idea.log 2&gt;&amp;1 &amp;，其中采用了 nohup 运行方式，并将日志记录在了 idea.log 文件中。 在激活时，激活服务器的地址就是：http://xxx.xxx.xxx.xx:1024，其中有 x 就是你对应服务器的 IP 地址。 配置参数说明 -l 指定绑定监听到具体哪个 ip (私用，不共享) -u 用户名参数，当未设置 -u 参数时，且计算机用户名为 ^[a-zA-Z0-9]+$ 时，使用计算机用户名作为 idea 用户名 -p 指定监听的端口 -prolongationPeriod 指定过期时间参数 结合 nginx &amp; 自有域名 配置要记住某一服务器的 IP 地址，总是不那么容易，而相对的，记住一个相应的域名就要容易得多。因此，我们如果有一个域名，如：your.domain.com，我们希望直接使用该域名地址来实现激活服务，但同时，对于 80 端口，一般常用的 WEB 服务，都是基于该端口来提供服务，因此，如果某一程序独占该端口过于浪费，这样，我们可以借用 nginx 的虚拟主机和反向代理能力，将 your.domain.com:80 上的请求，直接转发到我们的激活服务地址和端口。12345678910111213141516server &#123; listen 80; server_name your.domain.com; location / &#123; proxy_pass http://127.0.0.1:1024; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; access_log off; error_log /dev/null;&#125; 经过如上配置后，你就可以直接使用 http://your.domain.com 直接充当激活服务器了。]]></content>
      <categories>
        <category>工具</category>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>jetbrains</tag>
        <tag>webstorm</tag>
        <tag>phpstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[复杂前端项目开发思考模型——H5小游戏]]></title>
    <url>%2F2017%2F10%2F31%2F20171031%2F</url>
    <content type="text"><![CDATA[近期因为在筹划阐述前端开发工作中的各种复杂场景，并将其中可能用得上的思想讲明白，比如：模块化开发、自动化构建、工程化等，在每一个方向上，都是用于解决我们在项目开发过程中，所遇到的问题，以及提升工作效率的考虑，以此提升开发工作的趣味性。 Not just do it, but enjoy it. 以此为砖，用以引玉。正好近期也接受到了一个项目——《大富翁》小游戏，对于该项目的初步分析，并结合到我的想法，可能适合作为“复杂场景”的一个引子，我希望可以以该项目的实施及思考过程，来实例化的描述一下整体的一个解决思路。暂且叫其为：思（什）考（么）模（鬼）型。 项目效果演示先上个图，大致看一下最后的效果，没有将所有出现的情况全部展示。 为什么可以说复杂整体的游戏执行流程 这张图中可以看出游戏在执行过程中的逻辑流程，其中大部分都会涉及到前端交互的响应变化，因此其中前端交互流程复杂。 界面中元素众多其中涉及到场景的元素非常多，各元素之间的排列，以及形状尺寸各不相同。这种场景下，给界面的兼容适配带来了难度。 界面元素涉及状态切换&amp;动画执行其中小狐狸的状态涉及到3种：静态、向左走动、向右走动。掷出骰子后，界面其他元素的交互触发需要锁定，并且，各元素的执行有明确的先后顺序，需要类似时间轴的概念来统一协调管理。 需要如何考虑样式部分界面非常的个性化，导致界面的样式布局上，我们很多场景需要使用背景图片来进行处理，另外，加上在不同尺寸终端上展示适配需求，更加使得整体问题变得复杂难解。需要解决的点： 各终端不同尺寸适配 大部分为不规则的背景元素，CSS的编写过程，元素尺寸的快速管理 页面动画过程中，元素位置的定位问题 页面的样式有相近部分，如：弹窗，如何达到封装共用 各终端不同尺寸适配目前市面上，可以统计到的不同终端尺寸，没有上百，也有几十，因此，在H5开发过程中，样式开发如何适配不同尺寸的显示屏，成为了我们这块所必须面对的首要问题。1. 媒体查询（media query）所涉及到的情况实在是太多，这导致，不同尺寸区间的细分会非常的复杂，而且，每一个尺寸区间下的都需要或多或少的人工干预调整，这在工作量上已经是无法实现的，还没考虑其中所涉及到的测试检验等等一系列的问题，所以，该方法基本可以排除。2. 百分比在CSS开发过程中，我们可以尝试使用百分比的方式来定位各不同元素在场景中的位置，以期在不同尺寸下达到同等比例的缩放。这种思路很好，但技术选择方向上，百分比带来了很多的不可测量性，简单的来说，你拿到一个设计稿，其中一个元素相对于整体场景，或是另一个元素，具体较为精确的距离是百分之多少，这个没办法很直接的测量，因此，这种情况下，很多是由前端人员，依“手感”来细微的调整元素的位置，一个百分点，甚至零点几个百分点的来调整，而且调整完成后，由于各元素之间细微的误差积累，等放入另一个尺寸下时，你可能会发现，各要素的偏差很大，已经出现了我们常遇到的不兼容。总结来说，就是工作量巨大，而且不兼容。3. REMREM是我实践过程中，认为的终极解决方案。当然，这其中我们要感谢很多在这方面提供解决方案的开源付出，如：lib-flexible，这就是其中的一个，具体的设计思路，可以详细去查阅本方向上的资料，这里不再展开。附加的，会产生出另一个问题，REM，这个单位毕竟不是PX，仍需要换算。这里也同样有相应的解决方案，我们可以借用自动化的构建工具，实现rem和px之间的自动转换，px2rem，可以与gulp或grunt等构建工具集成，实现自动转换。 自动解析后： 元素尺寸的快速管理在场景中，出现了很多个性化的元素，其中的实现，很多是以背景图片来实现，之所以选择这种方式，是借助了 cssgrace 中的一个特性：可以通过 image-width、image-height 两个动态属性，来自动的获取到图片的宽高尺寸。 编译解析后 这样不但可以将图片尺寸的管理交托给自动化的构建脚本，提升CSS开发中的效率，并且可以明显降低设计稿发生修改所带来的代码改动成本。如若过程中，设计稿发生修改，某一个元素的尺寸发生了稍微的改动，这种方案下，我们只需要重新更新切图，再执行一次自动构建任务，中间的代码不需要任何的改动，高效而准确！ 元素定位得益于 REM 方案带来的方便，我们只需要解决一种尺寸稿件下的准确定位，再附加上自动构建任务中，将 PX 自动转换为 REM 单位，其中的源码是 PX 单位，而构建出的成品代码是 REM 单位，这样实现了代码对于开发人员的可理解，以及代码的各尺寸终端的可兼容，两者兼顾。定位问题，在本次的开发过程中，直接采用的是针对于 750px 尺寸下的精准定位。 如图中所示，小狐狸的路径节点相对于 750px 下的定位，全可以一次性的在稿件中标注定位，并写好相应的class，自动构建类的脚本，会自动将相关的单位进行解析转换。 样式封装共用相信大家，在前面的几组对比图中，就可以发现，开发中有用到 LESS 来结构化的开发样式布局。类似于 LESS 的CSS预处理插件还有很多，我们可以自己查询相关的资料，这里希望能过这种预处理的插件，给我们带来了 CSS 模块、函数式的编辑体验，这样可以大增强样式表的结构可读性，同时也可以很好的提升样式表产出的规范，以及逻辑准确性。重要的是，其中可以很大程度的减少我们相似规则，或是嵌套规则之间的代码量。 在本段示例规则中，弹窗的整体内容进行了一次性编写，其中各不同弹窗中的 .bts 和 .bt 可以共用，并且结合共用规则的封装，每一个不同弹窗，都与规则 .pop_cont 组合，其中具有相同表现的弹窗（.p_c_free &amp; .p_c_props）直接共用规则。其中各规则之间的嵌套层级非常明确清晰，对于规则的阅读以及整体统一管理非常方便，从而屏蔽了普通 CSS 在编写过程中的，可能比较分散，规则识别路径原则不一致，给编写和维护带来困惑的弊端。 总之（总而言之，言而总之）对于样式的处理，我们借助了几个不同的方案，进行了一种组合搭配，实现了对于移动端尺寸适配，以及样式结构化、模块化的开发体验。 HTML部分HTML部分的提出，对于本项目中的场景，可能不是十分的贴切，这里最为主要的点是需要解析 HTML 模块化的问题，引出这个需求的考虑有以下几点： 页面结构更为清晰 模块之间可以达成共用 IDE 等相关软件的响应速度影响 减少重复代码在不同文件中的重复出现 这是本次项目中的主要 HTML 页面代码结构，其中有出现 include 的语法，而这种就是对于分模块化开发的一种实践方式，集成的是 nunjucks ，它的引入给 HTML 带来了很多模块化方向的能力提升，具体的特性，可以详细阅读其手册。回到项目中， head_wap.html 这是文件所需要引入的相关样式及JS库的部分，这是我们项目中经常在各个页面重复出现的部分，因此，这里对该部分进行了一次提取，在不同页面，只需要一名 include 就可以解决这种重复问题，更好的达到统一管理的需求。而对于另一个实操过程的痛点，即，我们在开发过程中，一般会选用相关的代码编辑器，这里是 webstorm IDE，而正是因为这种类型工具的使用过程中，工具本身对于代码文件需要内建很多的索引，用以提供相关功能，而这个内建索引及维护过程中，需要消耗很大的系统性能，这种情况在大文件编辑时尤为明显，因此，为了在这个方向提升我们的开发效率和体验，我们通过模块化的分割，将一个大文件，拆分为各相对较小的文件，这样也就可以避免在编辑器上的体验下降的问题。 JS部分JS部分中，我们需要整理和注意的点其实非常的多，其中所涉及到的模块，功能、性能、安全、规范……，等等，各个词，甚至都可以拓展开为一个专门的课程，可见在这个大方向上，问题的复杂程度。在本次的项目中，也只是一个很小的引子，希望可以引申出对于这些方向问题的考虑，而实际的使用，可能并没有涉及。 模块化有点牵强，但可能如前面所述，可以是一个引子。这里的模块化，也就只是停留在了函数的简单封装，能有规范、明确的相关参数说明，以及相关的调用解析。 这些也仅仅只是JS模块化的冰山一角，问题（砖）的抛出，只是为了引出项目实施过程中，对于模块化开发的思考（玉）。其过程中，可能有好几个词可以来提及，commonjs、AMD，这些思想，都是为了解决一种（一系列）具体的问题而产生，因此，要读懂这其中的内容，也必须要能理解这种问题是什么，痛到底在哪里，这里也仅仅只能讲到这个层次，更多的内容，后面有机会，我再会详细的来展开。 什么能交给工具前面无论是示例，又或是说明，都有多次的提到模块化，而这种模块化，更多的层面是面向我们开发者，是为了：让开发者有更好的编辑体验，而对于机器来说，最终是需要运行，因此，这中间的一个衔接，都是可以交给工具来完成的。 LESS不能直接在浏览器直接识别解析因此有了类似于 gulp-less 的解析编译工具，可以方便快捷高效的将你的 less 代码转换为对应的 CSS。 include是什么鬼，浏览器怎么认识这个梗主要是用来给你人看的，而浏览器看不到它，中间就是因为有 nunjucks 的存在，解析了人机之间的区别。 我只能理解PX，但机器需要REMpx2rem 的引入，正好解决了这种人与机器之间的不同需要点，人能很好理解，机器又能很好适配。 …… 工程化的过程，其实就是模块化、自动化之间的一种更业务层次的组合，每一个复杂业务场景出现时，最为直接的问题解决方向就是如何便于人的理解，又能便于机器的执行，这些不同层次问题的思考解决过程，其实就是我们所需要的思考模型。]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端开发</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown编写规范API文档]]></title>
    <url>%2F2017%2F10%2F23%2F20171023%2F</url>
    <content type="text"><![CDATA[随技术不断发展，服务端和前端及其各方的逻辑交互，走向了一种更为规范的道路。因此，从个人能力，或是团队协作的角度出发，编写规范的 API 文档成为了一种不可缺少的能力。 以下是以 markdown 文档方式编写的一组 API DEMO ，选用 markdown 作为 API 编写工具是因为，markdown 特来了很纯粹的文档内容，并且可以优于 word 等方案的版本管理优点，文档的任何变动，可以以 diff 的方式像代码一样的查看到文档的修改细节；从可读性方面，markdown 完全可以加入自己所需要的样式编译输出为纯静态的 html 文档，再配合一些目前开源的工具，完全可以实现更多的功能。 学生管理（接口包）接口标题（格式示例） 描述： 接口相关说明请求URL： http://xx.xx.com:80/xxx/请求方式： GET参数： 参数名 必选 类型 说明 xxxx 是 string 参数说明 返回示例：1234&#123; xxx: xx ...&#125; 返回参数说明： 参数名 类型 说明 status int 1：为成功；0：为失败 备注： 其他相关内容说明 单个学生登录（DEMO） 描述： 学生登录接口，账号由教师一键生成，默认密码 123456。请求URL： https://xxx.xxx.com:8080/student/login请求方式： POST参数： 参数名 必选 类型 说明 idcard 是 string 身份证号码 password 是 string 密码 返回示例：123&#123; 'res': 1&#125; 返回参数说明： 参数名 类型 说明 res int 1 为成功 0为失败 备注： 此接口同时会返回 Cookie]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo基础搭建博客系统]]></title>
    <url>%2F2017%2F10%2F13%2F20171013%2F</url>
    <content type="text"><![CDATA[为了更好的使用 hexo 博客系统，对相关的配置进行一个基本的梳理或是内置默认值，其中使用 next 作为其中默认的主题样式，以此来美化 hexo 本身自带的一套主题。系统提供有独立的 github 仓库，同时通过对相关细节记录下来，以达到后期回看，或是另外环境快速搭建的目的。 介绍&amp;安装本系统是基于 hexo 搭建，因此，我们需要先安装好 hexo 的基础环境。hexo 帮助说明在 hexo 的官网，有详细的说明，如何搭建 hexo 的命令环境，以及基础 node 环境的安装也都有详细说明。 简单的过程1234## 安装 hexonpm install -g hexo-cli## 初始化 hexo，其中 blog 为你希望用于存储博客文件的目录名称，可以自行决定hexo init blog 安装主题因本次的系统，我们默认以 next 为博客的默认主题，因此我们可以通过 github 来实现 next 的安装。123git clone https://github.com/iissnan/hexo-theme-next themes/next# 或使用SVNsvn export https://github.com/iissnan/hexo-theme-next.git/trunk/ themes/next --force 以上的两种情况，你可以根据你个人的喜好和环境选择一种方式即可。 默认配置导入在本次的搭建过程中，hexo 本身存在有很多的相关配置，因此，经过梳理，将相关配置开了一个项目，托管到了 github，我们可以通过将这份线上的配置下载到本地博客系统中，即可实现一次性配置。123svn export https://github.com/lfire/wumiblog.git/trunk/ ./ --force## 安装依赖npm install 博客文章新建环境搭建完成后，我们就可以开始文章的写作了。写作过程中，hexo 设计了一个【layout】的概念，从字面来理解，就是布局的意思，也可以理解为模板，如果有相关能力者，你也可以开发相应的 layout 来支持更为丰富的功能，这点上，不再展开，具体可以查看官方的相关文档。以下记录几种常用的 layout 页的建立命令：1234## 创建标签页hexo new page "tags"## 创建分类页hexo new page "categories" 需要注意的是，在实际使用过程中，我们新建普通的博客文章，这个 layout 参数是可以省略的，如：1hexo new hello-hexo 执行之后，就会在对应的目录下（如目录名为 blog，则路径为：blog/source/_posts/hello-hexo.md）生成相关文件。 部署&amp;发布在配置文件中（blog/_config.yml），如下图，会有 github 部署位置的一个配置，本例中，使用的只是一个演示 demo，有需要的可以自已修改为对应的位置即可。 配置部署位置后，我们就可以执行相关命令来完成部署。 生成1234## 先将 markdown 文档转化为静态 HTML 文件资源hexo generate## or 缩写hexo g 部署1234## 将生成的静态文件上传部署到配置位置hexo deploy## or 缩写hexo d 一步到位123456hexo generate --deploy## or hexo deploy --generate## or 缩写hexo g -dhexo d -g]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win10 升级后 cmder 别名失效修复]]></title>
    <url>%2F2017%2F03%2F10%2F20170310%2F</url>
    <content type="text"><![CDATA[近期系统接收到了 win10 的慢速升级推送，但发现，升级过后，系统原先配置好的 cmder 别名全都无法正常工作。在 cmder github 上也试图查找相关的解决方案，但很多的说法以及配置都没能解决，最后，在一个地方发现了问题的初步解决方案。 问题表现，别名全部失效表现是相关加载都能成功，但命令本身就是不生效，无法工作，并且，相关中文也会产生叠加现象。 查找答案我通过 google 查找各种可能性，最后终于在 github cmder issues 查找到了需要的答案。原来， Ok guys, found what the issue was.I am using Windows 10 Insider build 15025 - the problem was with modification that were made by Microsoft to standard cmd.exe To solve this I had to “Use legacy console” option in standard cmd - which solved this issue. 是因 win10 升级，可能其内部改变了某些终端的特性，我们需要禁用新的控制台。 这样配置完成后，我们重新打开 cmder 一次， OK，问题解决 。]]></content>
      <categories>
        <category>工具</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>cmder</tag>
        <tag>cmd</tag>
        <tag>shell tool</tag>
        <tag>cmder alias</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cmder & cygwin 中文支持解决方案]]></title>
    <url>%2F2017%2F03%2F08%2F20170308%2F</url>
    <content type="text"><![CDATA[在 windows 环境下，我们因系统本身自带的 cmd 方案表现很弱，所以我们经常使用其他的解决方案来弥补。而这些方案中最为常见和好用的也就是 cmder 和 cygwin 两种。今天对于方案中，我们常遇到的问题——中文编码乱码问题来配置使用。 使用环境 &amp; 场景中文环境下，最为常见的编码就是： GBK UTF-8 而在 windows 环境下，这两种编码的文件同时存在是非常常见的，而在 cmd 的终端环境下，想要一次性解决该显示问题，目前来说并不容易，因此，我们当前只能寻找一种最为全面的解决方案，以最大可能来解决该问题。因此，目前需要来分析一下使用的场景： 程序员编码 各工具使用，如： git、svn等 而对于编码的场景下，我们目前最为推荐的编码格式仍是 utf-8 ，所以，这里也一样的不解释，建议使用 utf-8。而对于 git &amp; svn 等相关的版本管理工具，这里也是程序员常有遇到的场景，而在 git 序列中，github 的使用常在手边过，而 github 所支持的中文编码就是 utf-8 。从这些相关的场景分析来看，我们所有可控的场景中，我们最好使用的编码仍然是 utf-8 。因此，这里本人也强烈推荐各位，在可以自己控制的情况下，我们应该首选 utf8。场景的主编码确定好后，我们就可以分别针对两种不同工具，来进行相关的支持配置。 配置总体可以分为： 软件界面 终端环境变量 相关工具配置 cmder 方案界面配置右键标题栏 &gt; settings Main &gt; Font charset 这里选择 GB 2312 主要是因为，windows 系统的主要编码还是：ANSI。 终端环境变量Settings &gt; Startup &gt; Environment 这里的设置，需要关闭 cmder 再重新打开一次生效。我们可以通过 locale 命令查看设置的结果：123456789λ localeLANG=zh_CN.utf-8LC_CTYPE="zh_CN.utf-8"LC_NUMERIC="zh_CN.utf-8"LC_TIME="zh_CN.utf-8"LC_COLLATE="zh_CN.utf-8"LC_MONETARY="zh_CN.utf-8"LC_MESSAGES="zh_CN.utf-8"LC_ALL= 相关工具的配置——git 配置在 git 命令行下，主要是与： i18n.commitencoding i18n.logoutputencoding 两个配置参数有关，我们可以通过以下命令进行配置：12λ git config --global i18n.commitencoding utf-8λ git config --global i18n.logoutputencoding utf-8 VIM 配置vim 是终端下最为常见的文档编辑器，我们可以在 VIM 的配置文件中加入如下配置：12set fileencoding=cp936set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1 注：查找 vim 配置文件的位置，可以通过进入 vim 后，输入:version cygwin 方案界面配置右键标题栏 &gt; Options Text 环境变量配置修改 ~/.bashrc 文件，加入：export LANG=”zh_CN.UTF-8”export OUTPUT_CHARSET=”UTF8” 相关工具配置git 和 vim 的配置与 cmder 下是一致的，可以采用同样的方式来处理。 综合方案cmder 是一种终端集成器，它同样可以将 cygwin 集成到其内部窗口上。具体的配置方式，我们可以参考 cmder 官方手册以下是本人的配置截图： 配置后的运行效果图：]]></content>
      <categories>
        <category>工具</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>cmder</tag>
        <tag>cygwin</tag>
        <tag>shell中文支持</tag>
        <tag>windows shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[神器 cmder]]></title>
    <url>%2F2017%2F03%2F02%2Fcmder%2F</url>
    <content type="text"><![CDATA[当我们在 windows 环境下来进行开发编码工作时，是不是经常有一个不好的体验—— cmd 太弱了。 windows cmd 不足 界面太过于死板，不美观 相关的操作，以及命令支持不完善，无法达到，或是平衡 linx 平台下相关的操作习惯 当前各种框架平台不断发展，相关需要在命令行下执行的操作越来越多，而cmd没有多标签等相关的切换功能 窗口的大小直接受限，不能自如的调整窗口大小 … 以上所列出的点不尽全，相信只要有需要使用 shell 来进行终端操作的用户就能感觉到 windows 对于用户，在这方面的不友好。而现实的开发工作序列中，无论是我们的代码管理，还是我们的环境编译，以及其他相关框架或平台的应用，如若想完全的脱离终端，这种可能性及小。另外，从操作的效率性方面来出发，命令行下的操作，要比鼠标和键盘的来回切换操作来得高效和方便。（也许你不太认可，但这是很大一部分人公认的。） 神器登场 cmdercmder 是一款绿色且开源的软件，并且已经托管在了 github 上，其主要的目标即是在 windows 平台上，打造类 linux 的终端操作体验。先来一张靓照：从图中我们可以看到，中文支持友好，同时，终端的颜值很高，最最主要的是，本软件是高度可定制的。只要是你愿意，你完全可以根据你自己的喜好，自定出一套你自己喜欢的主题出来。如下图所示，你可以打开 Settings 来配置你自己的各种需要 主要特性提供高度类 Linux 的终端体验在我们平常的使用命令终端的体验过程中，如若能达到 linux 平台下相关命令的可靠性，那即是 windows 平台下开发者的福音，而 cmder 正是朝着这一方向而来的。可以支持的初略的列一下：pwd ll ls whoami where cp rm unzip … 快捷键支持丰富 打开设置： 使用 win + alt + p 新建标签： ctrl + t 关闭标签： ctrl + w 快速新建不同类型标签： shift + alt + number cmd PowerShell 全屏： alt + enter 返回上级目录： ctrl + alt + u 历史查询： ctrl + r 选择复制文本： left mouse select 粘贴文本： right click更多的快捷键，你可以打开 Settings &gt; Keys &amp; Macro 中进行设置和查看。 支持命令别名(Aliases)配置这是 cmder 所提供的一个非常方便的功能，我们可以很个性化的设置我们个人喜欢的命令，来完成某些长命令的输入。以下是我别名配置的一个片段，大家可参考：123456789101112pwd=cdclear=clshistory=cat "%CMDER_ROOT%\config\.history"unalias=alias /d $1vi=vim $*cmderr=cd /d "%CMDER_ROOT%"e.=explorer .gl=git log --oneline --all --graph --decorate $*l=ls --show-control-chars --color $*la=ls -aF --show-control-chars --color $*ll=ls -alF --show-control-chars --color $*ls=ls --show-control-chars -F --color $* 对于中文支持的处理在平常应用过程中，我们经常会遇到中文问题的苦恼，如何很好的解决中文在各种场景下的显示问题，是很多类似产品的一大痛点。 常见场景： 中文文件或中文文件夹名的显示和操作； VIM 中打开包含中文内容的文件查看及编辑等； git 提交代码到 github 等代码仓库时，中文日志的提交及查看； 几个关键配置要点： 中文字体的选择：我们需要选择相关支持中文字符显示的字体来做为软件的展示字体。 字符编码的选择：在 windows 下，很多文件名，及文件的编码都是以 GBK 为编码，因此，这里我们需要很慎重的选择软件的字体编码。 环境变量的设置：因本软件的类 linux 的设计，所以很多命令，如 git 都有着 linux 下相似的处理逻辑，而 github 这种是全以 UTF8 为编码的平台，因此，环境变量需要对此进行特殊处理。 VIM 的字符编码配置：因是在 windows 平台中，很多的文件的编码可能是多种多样的，不是固定的某一种，因此，在 VIM 的配置中，就必须要考虑到这种情况，配置让它可以智能的识别并转换文件内容编码。 以下贴出我所配置的部分参数：字体&amp;字体编码配置 其中的 YaHei Consolas Hybrid 是我在编程过程中，所遇到的一种字体，对于中文、英文大小写、以及数字的支持以及辨识度很高。个人推荐使用，可以这下载安装，提取密码: tmgw而其中因是在 windows 环境下，所以建议使用 GB2312 编码。 环境变量配置 为兼容 github 等使用，整体将 cmder 的环境变量中 LANG 设置为 UTF-8 ，以此实现 git log 等命令查看时支持中文。 VIM配置 为实现 VIM 支持各种编码格式文件的中文查看及编辑，cmder 内部已做好了配置进行处理，上图只是将相关的配置内容贴出。 整体配置及软件包下载为方便大家直接使用，我将当前我所使用的版本，以及配置整体打包分享出来。推荐大家使用，提取密码: 1aix]]></content>
      <categories>
        <category>工具</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>cmder</tag>
        <tag>cmd</tag>
        <tag>shell</tag>
        <tag>tool</tag>
        <tag>工具</tag>
        <tag>windows cmd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F03%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>init</category>
      </categories>
      <tags>
        <tag>hello</tag>
      </tags>
  </entry>
</search>
