<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lfire</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lfire.github.io/"/>
  <updated>2017-11-14T08:21:27.173Z</updated>
  <id>https://lfire.github.io/</id>
  
  <author>
    <name>lfire</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jetbrains系列产品激活服务器搭建</title>
    <link href="https://lfire.github.io/2017/11/10/jetbrains-ide-active-server/"/>
    <id>https://lfire.github.io/2017/11/10/jetbrains-ide-active-server/</id>
    <published>2017-11-10T09:12:32.000Z</published>
    <updated>2017-11-14T08:21:27.173Z</updated>
    
    <content type="html"><![CDATA[<p>对于开发者来说，一款合用的开发工具非常影响其开发质量和速率，而纵观所有工具，开发IDE方面，Jetbrains 的产品值得我们称道。他设计的合语言开发 IDE，给我们提供了很好的开发体验，但这其中有一个很难为情的问题，对于我们开发者来说，其正版授权价格一时无法承受，特别是对于一些学习编程的初级入门者来说，就更为困难。<br>因此能有一种好的方式来使用该公司产品，也是对于个人体验，以及编程能力的提升。这里总结了一种自建服务器来激活全系列产品的方法。（当然，对于有能力的开发者来说，还是建议直接购买。）<br><a id="more"></a></p><p>开始，我们得先感谢这款工具的开发者，<a href="http://blog.lanyus.com/archives/314.html" target="_blank" rel="external"><strong>lanyus</strong></a>，目前该工具发布的版本已到 1.5 。<br>而针对于相关的使用方法，特别是当自己没有相关公网服务器的情况下，在自己本地机器上运行时，如何使用，有详细的说明，具体可以访问<a href="http://blog.lanyus.com/archives/174.html" target="_blank" rel="external"><strong>说明教程</strong></a>。</p><h2 id="关键操作"><a href="#关键操作" class="headerlink" title="关键操作"></a>关键操作</h2><blockquote><ol><li><a href="https://mega.nz/#!2w5WBL7I!OhsaQHOaW_IsUznu5loN3a-bSbLV--McOBqA-PM8EuY" target="_blank" rel="external">下载服务搭建程序</a></li><li>解压，使用 <em>IntelliJIDEALicenseServer_windows_amd64.exe</em></li><li>在相应 idea 注册界面选择 <strong>License server</strong>，填写 <em><a href="http://127.0.0.1:1017" target="_blank" rel="external">http://127.0.0.1:1017</a></em>，（据说1017是作者女票生日，像作者女票致敬-_-）</li></ol></blockquote><p><center><img src="http://static.zybuluo.com/lfire/iuwa7up8t5s3al6nt3gans2w/image_1busn3u1urfekhh6tq1n48g3u9.png" alt="image_1busn3u1urfekhh6tq1n48g3u9.png-25.2kB"></center></p><h2 id="自建公网服务器"><a href="#自建公网服务器" class="headerlink" title="自建公网服务器"></a>自建公网服务器</h2><ol><li>同样是下载<a href="https://mega.nz/#!2w5WBL7I!OhsaQHOaW_IsUznu5loN3a-bSbLV--McOBqA-PM8EuY" target="_blank" rel="external">服务器搭建程序包</a></li><li>执行 <em>tar zxvf IntelliJIDEALicenseServer(v1.5).tar.gz</em>，解压文件，文件内容如下。<br><center><img src="http://static.zybuluo.com/lfire/y14rx1cok7mit5fsd7vjar0w/image_1buso1b3av8ricp1nkmp116ram.png" alt="image_1buso1b3av8ricp1nkmp116ram.png-75.7kB"></center></li><li>根据自身机器的系统情况，选择对应的程序，本例中是：linux 64 位系统，所以我将 <em>IntelliJIDEALicenseServer_linux_amd64</em> 单独提出，并重命名为 <em>IdeaServer</em>。（文件名太长，命令也太长）</li><li>运行服务程序，<em>nohup ./IdeaServer -p 1024 -prolongationPeriod 9999999999999999 &gt; idea.log 2&gt;&amp;1 &amp;</em>，其中采用了 nohup 运行方式，并将日志记录在了 <em>idea.log</em> 文件中。</li><li>在激活时，激活服务器的地址就是：<em><a href="http://xxx.xxx.xxx.xx:1024" target="_blank" rel="external">http://xxx.xxx.xxx.xx:1024</a></em>，其中有 x 就是你对应服务器的 IP 地址。</li></ol><h2 id="配置参数说明"><a href="#配置参数说明" class="headerlink" title="配置参数说明"></a>配置参数说明</h2><ol><li><strong><em>-l</em></strong>  指定绑定监听到具体哪个 ip (私用，不共享)</li><li><strong><em>-u</em></strong>  用户名参数，当未设置 -u 参数时，且计算机用户名为 <em>^[a-zA-Z0-9]+$</em> 时，使用计算机用户名作为 idea 用户名</li><li><strong><em>-p</em></strong>  指定监听的端口</li><li><strong><em>-prolongationPeriod</em></strong>  指定过期时间参数</li></ol><h2 id="结合-nginx-amp-自有域名-配置"><a href="#结合-nginx-amp-自有域名-配置" class="headerlink" title="结合 nginx &amp; 自有域名 配置"></a>结合 nginx &amp; 自有域名 配置</h2><p>要记住某一服务器的 IP 地址，总是不那么容易，而相对的，记住一个相应的域名就要容易得多。<br>因此，我们如果有一个域名，如：<em>your.domain.com</em>，我们希望直接使用该域名地址来实现激活服务，但同时，对于 80 端口，一般常用的 WEB 服务，都是基于该端口来提供服务，因此，如果某一程序独占该端口过于浪费，这样，我们可以借用 nginx 的虚拟主机和反向代理能力，将 <em>your.domain.com:80</em> 上的请求，直接转发到我们的激活服务地址和端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  listen 80; </div><div class="line">  server_name your.domain.com;</div><div class="line"></div><div class="line">  location / &#123; </div><div class="line">    proxy_pass http://127.0.0.1:1024;</div><div class="line">    proxy_redirect off;</div><div class="line">    proxy_set_header Host $host;</div><div class="line">    proxy_set_header X-Real-IP $remote_addr;</div><div class="line"></div><div class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  access_log off;</div><div class="line">  error_log /dev/null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>经过如上配置后，你就可以直接使用 <em><a href="http://your.domain.com" target="_blank" rel="external">http://your.domain.com</a></em> 直接充当激活服务器了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于开发者来说，一款合用的开发工具非常影响其开发质量和速率，而纵观所有工具，开发IDE方面，Jetbrains 的产品值得我们称道。他设计的合语言开发 IDE，给我们提供了很好的开发体验，但这其中有一个很难为情的问题，对于我们开发者来说，其正版授权价格一时无法承受，特别是对于一些学习编程的初级入门者来说，就更为困难。&lt;br&gt;因此能有一种好的方式来使用该公司产品，也是对于个人体验，以及编程能力的提升。这里总结了一种自建服务器来激活全系列产品的方法。（当然，对于有能力的开发者来说，还是建议直接购买。）&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="https://lfire.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="IDE" scheme="https://lfire.github.io/categories/%E5%B7%A5%E5%85%B7/IDE/"/>
    
    
      <category term="jetbrains" scheme="https://lfire.github.io/tags/jetbrains/"/>
    
      <category term="webstorm" scheme="https://lfire.github.io/tags/webstorm/"/>
    
      <category term="phpstorm" scheme="https://lfire.github.io/tags/phpstorm/"/>
    
  </entry>
  
  <entry>
    <title>复杂前端项目开发思考模型——H5小游戏</title>
    <link href="https://lfire.github.io/2017/10/31/20171031/"/>
    <id>https://lfire.github.io/2017/10/31/20171031/</id>
    <published>2017-10-31T06:58:52.000Z</published>
    <updated>2017-11-14T07:05:12.593Z</updated>
    
    <content type="html"><![CDATA[<p>近期因为在筹划阐述前端开发工作中的各种复杂场景，并将其中可能用得上的思想讲明白，比如：模块化开发、自动化构建、工程化等，在每一个方向上，都是用于解决我们在项目开发过程中，所遇到的问题，以及提升工作效率的考虑，以此提升开发工作的趣味性。</p><blockquote><p>Not just do it, but enjoy it.</p></blockquote><p>以此为砖，用以引玉。<br><a id="more"></a><br>正好近期也接受到了一个项目——《大富翁》小游戏，对于该项目的初步分析，并结合到我的想法，可能适合作为“复杂场景”的一个引子，我希望可以以该项目的实施及思考过程，来实例化的描述一下整体的一个解决思路。暂且叫其为：思（什）考（么）模（鬼）型。   </p><h2 id="项目效果演示"><a href="#项目效果演示" class="headerlink" title="项目效果演示"></a>项目效果演示</h2><p>先上个图，大致看一下最后的效果，没有将所有出现的情况全部展示。</p><p><center><img src="http://static.zybuluo.com/lfire/6k58gyrj6avlmblciis11x4t/dafuweng.gif" alt="dafuweng.gif-714.4kB"></center></p><h2 id="为什么可以说复杂"><a href="#为什么可以说复杂" class="headerlink" title="为什么可以说复杂"></a>为什么可以说复杂</h2><h3 id="整体的游戏执行流程"><a href="#整体的游戏执行流程" class="headerlink" title="整体的游戏执行流程"></a>整体的游戏执行流程</h3><p><center><img src="http://static.zybuluo.com/lfire/fwiihz6mb8gpn80objovvy77/%E6%B5%81%E9%87%8F%E5%A4%A7%E5%AF%8C%E7%BF%81%E6%B5%81%E7%A8%8B%E5%9B%BEV3.jpg" alt="流量大富翁流程图V3.jpg-1328.2kB"></center></p><p>这张图中可以看出游戏在执行过程中的逻辑流程，其中大部分都会涉及到前端交互的响应变化，因此其中前端交互流程复杂。</p><h3 id="界面中元素众多"><a href="#界面中元素众多" class="headerlink" title="界面中元素众多"></a>界面中元素众多</h3><p>其中涉及到场景的元素非常多，各元素之间的排列，以及形状尺寸各不相同。这种场景下，给界面的兼容适配带来了难度。</p><h3 id="界面元素涉及状态切换-amp-动画执行"><a href="#界面元素涉及状态切换-amp-动画执行" class="headerlink" title="界面元素涉及状态切换&amp;动画执行"></a>界面元素涉及状态切换&amp;动画执行</h3><p>其中小狐狸的状态涉及到3种：静态、向左走动、向右走动。<br>掷出骰子后，界面其他元素的交互触发需要锁定，并且，各元素的执行有明确的先后顺序，需要类似时间轴的概念来统一协调管理。</p><h2 id="需要如何考虑"><a href="#需要如何考虑" class="headerlink" title="需要如何考虑"></a>需要如何考虑</h2><h3 id="样式部分"><a href="#样式部分" class="headerlink" title="样式部分"></a>样式部分</h3><p>界面非常的个性化，导致界面的样式布局上，我们很多场景需要使用背景图片来进行处理，另外，加上在不同尺寸终端上展示适配需求，更加使得整体问题变得复杂难解。<br>需要解决的点：</p><ul><li>各终端不同尺寸适配</li><li>大部分为不规则的背景元素，CSS的编写过程，元素尺寸的快速管理</li><li>页面动画过程中，元素位置的定位问题</li><li>页面的样式有相近部分，如：弹窗，如何达到封装共用</li></ul><p><strong>各终端不同尺寸适配</strong><br>目前市面上，可以统计到的不同终端尺寸，没有上百，也有几十，因此，在H5开发过程中，样式开发如何适配不同尺寸的显示屏，成为了我们这块所必须面对的首要问题。<br><strong><em>1. 媒体查询（media query）</em></strong><br>所涉及到的情况实在是太多，这导致，不同尺寸区间的细分会非常的复杂，而且，每一个尺寸区间下的都需要或多或少的人工干预调整，这在工作量上已经是无法实现的，还没考虑其中所涉及到的测试检验等等一系列的问题，所以，该方法基本可以排除。<br><strong><em>2. 百分比</em></strong><br>在CSS开发过程中，我们可以尝试使用百分比的方式来定位各不同元素在场景中的位置，以期在不同尺寸下达到同等比例的缩放。<br>这种思路很好，但技术选择方向上，百分比带来了很多的不可测量性，简单的来说，你拿到一个设计稿，其中一个元素相对于整体场景，或是另一个元素，具体较为精确的距离是百分之多少，这个没办法很直接的测量，因此，这种情况下，很多是由前端人员，依“手感”来细微的调整元素的位置，一个百分点，甚至零点几个百分点的来调整，而且调整完成后，由于各元素之间细微的误差积累，等放入另一个尺寸下时，你可能会发现，各要素的偏差很大，已经出现了我们常遇到的<strong>不兼容</strong>。<br>总结来说，就是工作量巨大，而且不兼容。<br><strong><em>3. REM</em></strong><br>REM是我实践过程中，认为的终极解决方案。当然，这其中我们要感谢很多在这方面提供解决方案的开源付出，如：<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="external">lib-flexible</a>，这就是其中的一个，具体的设计思路，可以详细去查阅本方向上的资料，这里不再展开。<br>附加的，会产生出另一个问题，REM，这个单位毕竟不是PX，仍需要换算。这里也同样有相应的解决方案，我们可以借用自动化的构建工具，实现rem和px之间的自动转换，<a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="external">px2rem</a>，可以与gulp或grunt等构建工具集成，实现自动转换。</p><p><center><img src="http://static.zybuluo.com/lfire/tei794jibswdxau2rj8pvgfu/image_1btr83j1pgq11ku01lbds56uu9.png" alt="image_1btr83j1pgq11ku01lbds56uu9.png-37.7kB"></center></p><p>自动解析后：</p><p><center><img src="http://static.zybuluo.com/lfire/hzqzqrd3s17q2plyjgvntnqo/image_1btr85vr41a6g1osg175v1klc1vrkm.png" alt="image_1btr85vr41a6g1osg175v1klc1vrkm.png-34.1kB"></center></p><p><strong>元素尺寸的快速管理</strong><br>在场景中，出现了很多个性化的元素，其中的实现，很多是以背景图片来实现，之所以选择这种方式，是借助了 <strong><a href="https://github.com/cssdream/cssgrace" target="_blank" rel="external">cssgrace</a></strong> 中的一个特性：可以通过 <strong><em>image-width</em></strong>、<strong><em>image-height</em></strong> 两个动态属性，来自动的获取到图片的宽高尺寸。</p><p><center><img src="http://static.zybuluo.com/lfire/grm8t8gp3gy1p1fn84iv51xj/image_1btre3le61qujv7818nu1pfeks813.png" alt="image_1btre3le61qujv7818nu1pfeks813.png-61.9kB"></center></p><p>编译解析后</p><p><center><img src="http://static.zybuluo.com/lfire/xrhsyx8jbr7lg3jxud9btzrx/image_1btre4qr21m01rlk16528rj791g.png" alt="image_1btre4qr21m01rlk16528rj791g.png-35.5kB"></center></p><p>这样不但可以将图片尺寸的管理交托给自动化的构建脚本，提升CSS开发中的效率，并且可以明显降低设计稿发生修改所带来的代码改动成本。<br>如若过程中，设计稿发生修改，某一个元素的尺寸发生了稍微的改动，这种方案下，我们只需要重新更新切图，再执行一次自动构建任务，中间的代码不需要任何的改动，高效而准确！</p><p><strong>元素定位</strong><br>得益于 REM 方案带来的方便，我们只需要解决一种尺寸稿件下的准确定位，再附加上自动构建任务中，将 PX 自动转换为 REM 单位，其中的源码是 PX 单位，而构建出的成品代码是 REM 单位，这样实现了代码对于开发人员的可理解，以及代码的各尺寸终端的可兼容，两者兼顾。定位问题，在本次的开发过程中，直接采用的是针对于 750px 尺寸下的精准定位。</p><p><center><img src="http://static.zybuluo.com/lfire/orjfl3q08kij10fnukltnk1t/image_1btt70pk11sigibgs691hnv1886p.png" alt="image_1btt70pk11sigibgs691hnv1886p.png-30.1kB"></center></p><p>如图中所示，小狐狸的路径节点相对于 750px 下的定位，全可以一次性的在稿件中标注定位，并写好相应的class，自动构建类的脚本，会自动将相关的单位进行解析转换。</p><p><center><img src="http://static.zybuluo.com/lfire/jwk1lb2wdovz28rqt0cf80ue/image_1btt7nj9aa1a1k7l660mvt1es416.png" alt="image_1btt7nj9aa1a1k7l660mvt1es416.png-33.7kB"></center></p><p><strong>样式封装共用</strong><br>相信大家，在前面的几组对比图中，就可以发现，开发中有用到 <strong><a href="http://lesscss.org/" target="_blank" rel="external">LESS</a></strong> 来结构化的开发样式布局。类似于 LESS 的CSS预处理插件还有很多，我们可以自己查询相关的资料，这里希望能过这种预处理的插件，给我们带来了 CSS 模块、函数式的编辑体验，这样可以大增强样式表的结构可读性，同时也可以很好的提升样式表产出的规范，以及逻辑准确性。重要的是，其中可以很大程度的减少我们相似规则，或是嵌套规则之间的代码量。</p><p><center><img src="http://static.zybuluo.com/lfire/n10a2v5jn5eci9jkc0u3nueu/image_1btt8j3s91brq5o31pcgk52c641j.png" alt="image_1btt8j3s91brq5o31pcgk52c641j.png-73.7kB"></center></p><p>在本段示例规则中，弹窗的整体内容进行了一次性编写，其中各不同弹窗中的 <em>.bts</em> 和 <em>.bt</em> 可以共用，并且结合共用规则的封装，每一个不同弹窗，都与规则 <em>.pop_cont</em> 组合，其中具有相同表现的弹窗（<em>.p_c_free</em> &amp; <em>.p_c_props</em>）直接共用规则。其中各规则之间的嵌套层级非常明确清晰，对于规则的阅读以及整体统一管理非常方便，从而屏蔽了普通 CSS 在编写过程中的，可能比较分散，规则识别路径原则不一致，给编写和维护带来困惑的弊端。</p><p><strong>总之（总而言之，言而总之）</strong><br>对于样式的处理，我们借助了几个不同的方案，进行了一种组合搭配，实现了对于移动端尺寸适配，以及样式结构化、模块化的开发体验。</p><h3 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a>HTML部分</h3><p>HTML部分的提出，对于本项目中的场景，可能不是十分的贴切，这里最为主要的点是需要解析 HTML 模块化的问题，引出这个需求的考虑有以下几点：</p><ul><li>页面结构更为清晰</li><li>模块之间可以达成共用</li><li>IDE 等相关软件的响应速度影响</li><li>减少重复代码在不同文件中的重复出现</li></ul><p><center><img src="http://static.zybuluo.com/lfire/fw7ztripqgtlggaasiy5fqcg/image_1bttb02h511hi12ta18vm94e1dh020.png" alt="image_1bttb02h511hi12ta18vm94e1dh020.png-37.6kB"></center></p><p>这是本次项目中的主要 HTML 页面代码结构，其中有出现 <em>include</em> 的语法，而这种就是对于分模块化开发的一种实践方式，集成的是 <strong><a href="http://mozilla.github.io/nunjucks/" target="_blank" rel="external">nunjucks</a></strong> ，它的引入给 HTML 带来了很多模块化方向的能力提升，具体的特性，可以详细阅读其手册。<br>回到项目中， <em>head_wap.html</em> 这是文件所需要引入的相关样式及JS库的部分，这是我们项目中经常在各个页面重复出现的部分，因此，这里对该部分进行了一次提取，在不同页面，只需要一名 <em>include</em> 就可以解决这种重复问题，更好的达到统一管理的需求。<br>而对于另一个实操过程的痛点，即，我们在开发过程中，一般会选用相关的代码编辑器，这里是 <em>webstorm IDE</em>，而正是因为这种类型工具的使用过程中，工具本身对于代码文件需要内建很多的索引，用以提供相关功能，而这个内建索引及维护过程中，需要消耗很大的系统性能，这种情况在大文件编辑时尤为明显，因此，为了在这个方向提升我们的开发效率和体验，我们通过模块化的分割，将一个大文件，拆分为各相对较小的文件，这样也就可以避免在编辑器上的体验下降的问题。</p><h3 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h3><p>JS部分中，我们需要整理和注意的点其实非常的多，其中所涉及到的模块，功能、性能、安全、规范……，等等，各个词，甚至都可以拓展开为一个专门的课程，可见在这个大方向上，问题的复杂程度。<br>在本次的项目中，也只是一个很小的引子，希望可以引申出对于这些方向问题的考虑，而实际的使用，可能并没有涉及。</p><p><strong>模块化</strong><br>有点牵强，但可能如前面所述，可以是一个<em>引子</em>。这里的模块化，也就只是停留在了函数的简单封装，能有规范、明确的相关参数说明，以及相关的调用解析。</p><p><center><img src="http://static.zybuluo.com/lfire/ut6a9w8w4xs4a51iyn3p6d4t/image_1bttc7re91nfi1la814fv1c1u79s2d.png" alt="image_1bttc7re91nfi1la814fv1c1u79s2d.png-54.2kB"></center></p><p>这些也仅仅只是JS模块化的冰山一角，问题（砖）的抛出，只是为了引出项目实施过程中，对于模块化开发的思考（玉）。<br>其过程中，可能有好几个词可以来提及，<strong><a href="http://www.commonjs.org/" target="_blank" rel="external">commonjs</a></strong>、<strong><a href="http://requirejs.org/docs/whyamd.html" target="_blank" rel="external">AMD</a></strong>，这些思想，都是为了解决一种（一系列）具体的问题而产生，因此，要读懂这其中的内容，也必须要能理解这种<strong>问题是什么，痛到底在哪里</strong>，这里也仅仅只能讲到这个层次，更多的内容，后面有机会，我再会详细的来展开。</p><h3 id="什么能交给工具"><a href="#什么能交给工具" class="headerlink" title="什么能交给工具"></a>什么能交给工具</h3><p>前面无论是示例，又或是说明，都有多次的提到模块化，而这种模块化，更多的层面是面向我们开发者，是为了：<strong>让开发者有更好的编辑体验</strong>，而对于机器来说，最终是需要运行，因此，这中间的一个衔接，都是可以交给工具来完成的。</p><p><strong>LESS不能直接在浏览器直接识别解析</strong><br>因此有了类似于 <em><a href="https://www.npmjs.com/package/gulp-less" target="_blank" rel="external">gulp-less</a></em> 的解析编译工具，可以方便快捷高效的将你的 less 代码转换为对应的 CSS。</p><p><strong>include是什么鬼，浏览器怎么认识</strong><br>这个梗主要是用来给你人看的，而浏览器看不到它，中间就是因为有 <em><a href="http://mozilla.github.io/nunjucks/" target="_blank" rel="external">nunjucks</a></em> 的存在，解析了人机之间的区别。</p><p><strong>我只能理解PX，但机器需要REM</strong><br><em><a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="external">px2rem</a></em> 的引入，正好解决了这种人与机器之间的不同需要点，人能很好理解，机器又能很好适配。</p><p><strong>……</strong></p><p>工程化的过程，其实就是模块化、自动化之间的一种更业务层次的组合，每一个复杂业务场景出现时，最为直接的问题解决方向就是<strong>如何便于人的理解，又能便于机器的执行</strong>，这些不同层次问题的思考解决过程，其实就是我们所需要的思考模型。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期因为在筹划阐述前端开发工作中的各种复杂场景，并将其中可能用得上的思想讲明白，比如：模块化开发、自动化构建、工程化等，在每一个方向上，都是用于解决我们在项目开发过程中，所遇到的问题，以及提升工作效率的考虑，以此提升开发工作的趣味性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not just do it, but enjoy it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以此为砖，用以引玉。&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://lfire.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端开发" scheme="https://lfire.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="HTML5" scheme="https://lfire.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>markdown编写规范API文档</title>
    <link href="https://lfire.github.io/2017/10/23/20171023/"/>
    <id>https://lfire.github.io/2017/10/23/20171023/</id>
    <published>2017-10-23T02:01:30.000Z</published>
    <updated>2017-10-31T06:43:38.904Z</updated>
    
    <content type="html"><![CDATA[<p>　　随技术不断发展，服务端和前端及其各方的逻辑交互，走向了一种更为规范的道路。因此，从个人能力，或是团队协作的角度出发，编写规范的 API 文档成为了一种不可缺少的能力。<br>　　以下是以 markdown 文档方式编写的一组 API DEMO ，选用 markdown 作为 API 编写工具是因为，markdown 特来了很纯粹的文档内容，并且可以优于 word 等方案的版本管理优点，文档的任何变动，可以以 diff 的方式像代码一样的查看到文档的修改细节；从可读性方面，markdown 完全可以加入自己所需要的样式编译输出为纯静态的 html 文档，再配合一些目前开源的工具，完全可以实现更多的功能。<br><a id="more"></a></p><h2 id="学生管理（接口包）"><a href="#学生管理（接口包）" class="headerlink" title="学生管理（接口包）"></a>学生管理（接口包）</h2><h3 id="接口标题（格式示例）"><a href="#接口标题（格式示例）" class="headerlink" title="接口标题（格式示例）"></a>接口标题（格式示例）</h3><hr><p><strong>描述：</strong><br>　接口相关说明<br><strong>请求URL：</strong><br>　<code>http://xx.xx.com:80/xxx/</code><br><strong>请求方式：</strong><br>　GET<br><strong>参数：</strong> </p><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">必选</th><th style="text-align:left">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">xxxx</td><td style="text-align:left">是</td><td style="text-align:left">string</td><td>参数说明</td></tr></tbody></table><p><strong>返回示例：</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    xxx: xx</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>返回参数说明：</strong> </p><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">status</td><td style="text-align:left">int</td><td>1：为成功；0：为失败</td></tr></tbody></table><p><strong>备注：</strong><br>　其他相关内容说明</p><h3 id="单个学生登录（DEMO）"><a href="#单个学生登录（DEMO）" class="headerlink" title="单个学生登录（DEMO）"></a>单个学生登录（DEMO）</h3><hr><p><strong>描述：</strong><br>　学生登录接口，账号由教师一键生成，默认密码 123456。<br><strong>请求URL：</strong><br>　<code>https://xxx.xxx.com:8080/student/login</code><br><strong>请求方式：</strong><br>　POST<br><strong>参数：</strong> </p><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">必选</th><th style="text-align:left">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">idcard</td><td style="text-align:left">是</td><td style="text-align:left">string</td><td>身份证号码</td></tr><tr><td style="text-align:left">password</td><td style="text-align:left">是</td><td style="text-align:left">string</td><td>密码</td></tr></tbody></table><p><strong>返回示例：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">'res'</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>返回参数说明：</strong>    </p><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">res</td><td style="text-align:left">int</td><td>1 为成功 0为失败</td></tr></tbody></table><p><strong>备注：</strong><br>　此接口同时会返回 Cookie</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　随技术不断发展，服务端和前端及其各方的逻辑交互，走向了一种更为规范的道路。因此，从个人能力，或是团队协作的角度出发，编写规范的 API 文档成为了一种不可缺少的能力。&lt;br&gt;　　以下是以 markdown 文档方式编写的一组 API DEMO ，选用 markdown 作为 API 编写工具是因为，markdown 特来了很纯粹的文档内容，并且可以优于 word 等方案的版本管理优点，文档的任何变动，可以以 diff 的方式像代码一样的查看到文档的修改细节；从可读性方面，markdown 完全可以加入自己所需要的样式编译输出为纯静态的 html 文档，再配合一些目前开源的工具，完全可以实现更多的功能。&lt;br&gt;
    
    </summary>
    
      <category term="markdown" scheme="https://lfire.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="https://lfire.github.io/tags/markdown/"/>
    
      <category term="API" scheme="https://lfire.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>hexo基础搭建博客系统</title>
    <link href="https://lfire.github.io/2017/10/13/20171013/"/>
    <id>https://lfire.github.io/2017/10/13/20171013/</id>
    <published>2017-10-13T06:12:05.000Z</published>
    <updated>2017-10-19T01:25:20.788Z</updated>
    
    <content type="html"><![CDATA[<p>为了更好的使用 hexo 博客系统，对相关的配置进行一个基本的梳理或是内置默认值，其中使用 next 作为其中默认的主题样式，以此来美化 hexo 本身自带的一套主题。系统提供有独立的 github 仓库，同时通过对相关细节记录下来，以达到后期回看，或是另外环境快速搭建的目的。<br><a id="more"></a></p><h2 id="介绍-amp-安装"><a href="#介绍-amp-安装" class="headerlink" title="介绍&amp;安装"></a>介绍&amp;安装</h2><p>本系统是基于 hexo 搭建，因此，我们需要先安装好 hexo 的基础环境。<br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">hexo 帮助说明</a><br>在 hexo 的官网，有详细的说明，如何搭建 hexo 的命令环境，以及基础 node 环境的安装也都有详细说明。    </p><h3 id="简单的过程"><a href="#简单的过程" class="headerlink" title="简单的过程"></a>简单的过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 安装 hexo</span></div><div class="line">npm install -g hexo-cli</div><div class="line"><span class="comment">## 初始化 hexo，其中 blog 为你希望用于存储博客文件的目录名称，可以自行决定</span></div><div class="line">hexo init blog</div></pre></td></tr></table></figure><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>因本次的系统，我们默认以 next 为博客的默认主题，因此我们可以通过 github 来实现 next 的安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div><div class="line"><span class="comment"># 或使用SVN</span></div><div class="line">svn <span class="built_in">export</span> https://github.com/iissnan/hexo-theme-next.git/trunk/ themes/next --force</div></pre></td></tr></table></figure></p><p>以上的两种情况，你可以根据你个人的喜好和环境选择一种方式即可。</p><h3 id="默认配置导入"><a href="#默认配置导入" class="headerlink" title="默认配置导入"></a>默认配置导入</h3><p>在本次的搭建过程中，hexo 本身存在有很多的相关配置，因此，经过梳理，将相关配置开了一个项目，托管到了 github，我们可以通过将这份线上的配置下载到本地博客系统中，即可实现一次性配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn <span class="built_in">export</span> https://github.com/lfire/wumiblog.git/trunk/ ./ --force</div><div class="line"><span class="comment">## 安装依赖</span></div><div class="line">npm install</div></pre></td></tr></table></figure></p><h2 id="博客文章新建"><a href="#博客文章新建" class="headerlink" title="博客文章新建"></a>博客文章新建</h2><p>环境搭建完成后，我们就可以开始文章的写作了。写作过程中，hexo 设计了一个【layout】的概念，从字面来理解，就是布局的意思，也可以理解为模板，如果有相关能力者，你也可以开发相应的 layout 来支持更为丰富的功能，这点上，不再展开，具体可以查看官方的相关文档。<br>以下记录几种常用的 layout 页的建立命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 创建标签页</span></div><div class="line">hexo new page <span class="string">"tags"</span></div><div class="line"><span class="comment">## 创建分类页</span></div><div class="line">hexo new page <span class="string">"categories"</span></div></pre></td></tr></table></figure></p><p>需要注意的是，在实际使用过程中，我们新建普通的博客文章，这个 layout 参数是可以省略的，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new hello-hexo</div></pre></td></tr></table></figure></p><p>执行之后，就会在对应的目录下（如目录名为 blog，则路径为：<em>blog/source/_posts/hello-hexo.md</em>）生成相关文件。</p><h2 id="部署-amp-发布"><a href="#部署-amp-发布" class="headerlink" title="部署&amp;发布"></a>部署&amp;发布</h2><p>在配置文件中（<em>blog/_config.yml</em>），如下图，会有 github 部署位置的一个配置，本例中，使用的只是一个演示 demo，有需要的可以自已修改为对应的位置即可。</p><p><center><img src="http://static.zybuluo.com/lfire/tldkxmb2dhy0cni66z4jrsvc/image_1bsk41i721c8d1d9f1p761dop2159.png" alt="image_1bsk41i721c8d1d9f1p761dop2159.png-12.6kB"><br>配置部署位置后，我们就可以执行相关命令来完成部署。</center></p><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 先将 markdown 文档转化为静态 HTML 文件资源</span></div><div class="line">hexo generate</div><div class="line"><span class="comment">## or 缩写</span></div><div class="line">hexo g</div></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 将生成的静态文件上传部署到配置位置</span></div><div class="line">hexo deploy</div><div class="line"><span class="comment">## or 缩写</span></div><div class="line">hexo d</div></pre></td></tr></table></figure><h3 id="一步到位"><a href="#一步到位" class="headerlink" title="一步到位"></a>一步到位</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hexo generate --deploy</div><div class="line"><span class="comment">## or </span></div><div class="line">hexo deploy --generate</div><div class="line"><span class="comment">## or 缩写</span></div><div class="line">hexo g <span class="_">-d</span></div><div class="line">hexo d -g</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了更好的使用 hexo 博客系统，对相关的配置进行一个基本的梳理或是内置默认值，其中使用 next 作为其中默认的主题样式，以此来美化 hexo 本身自带的一套主题。系统提供有独立的 github 仓库，同时通过对相关细节记录下来，以达到后期回看，或是另外环境快速搭建的目的。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="https://lfire.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="https://lfire.github.io/tags/hexo/"/>
    
      <category term="博客" scheme="https://lfire.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>win10 升级后 cmder 别名失效修复</title>
    <link href="https://lfire.github.io/2017/03/10/20170310/"/>
    <id>https://lfire.github.io/2017/03/10/20170310/</id>
    <published>2017-03-10T12:05:24.000Z</published>
    <updated>2017-10-13T06:03:01.810Z</updated>
    
    <content type="html"><![CDATA[<p>近期系统接收到了 win10 的慢速升级推送，但发现，升级过后，系统原先配置好的 cmder 别名全都无法正常工作。在 cmder github 上也试图查找相关的解决方案，但很多的说法以及配置都没能解决，最后，在一个地方发现了问题的初步解决方案。<br><a id="more"></a></p><h2 id="问题表现，别名全部失效"><a href="#问题表现，别名全部失效" class="headerlink" title="问题表现，别名全部失效"></a>问题表现，别名全部失效</h2><p>表现是相关加载都能成功，但命令本身就是不生效，无法工作，并且，相关中文也会产生叠加现象。</p><p><center><img src="http://static.zybuluo.com/lfire/39hqqx5xswsstbpa6ayc620y/image_1bas246jq19641o3ffbjncm14ea9.png" alt="image_1bas246jq19641o3ffbjncm14ea9.png-32.6kB"></center></p><h2 id="查找答案"><a href="#查找答案" class="headerlink" title="查找答案"></a>查找答案</h2><p>我通过 google 查找各种可能性，最后终于在 <a href="https://github.com/cmderdev/cmder/issues/1257" target="_blank" rel="external">github cmder issues</a> 查找到了需要的答案。<br>原来，</p><blockquote><p>Ok guys, found what the issue was.<br>I am using Windows 10 Insider build 15025 - the problem was with modification that were made by Microsoft to standard cmd.exe</p><p>To solve this I had to “Use legacy console” option in standard cmd - which solved this issue.</p></blockquote><p>是因 win10 升级，可能其内部改变了某些终端的特性，我们需要禁用新的控制台。</p><p><center><img src="http://static.zybuluo.com/lfire/xew1dq4a9von8309oqczgpij/image_1bas34bfun11ip51bot1am71ute9.png" alt="image_1bas34bfun11ip51bot1am71ute9.png-36kB"></center></p><p>这样配置完成后，我们重新打开 cmder 一次，<strong> OK，问题解决 </strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期系统接收到了 win10 的慢速升级推送，但发现，升级过后，系统原先配置好的 cmder 别名全都无法正常工作。在 cmder github 上也试图查找相关的解决方案，但很多的说法以及配置都没能解决，最后，在一个地方发现了问题的初步解决方案。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="https://lfire.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="shell" scheme="https://lfire.github.io/categories/%E5%B7%A5%E5%85%B7/shell/"/>
    
    
      <category term="cmder" scheme="https://lfire.github.io/tags/cmder/"/>
    
      <category term="cmd" scheme="https://lfire.github.io/tags/cmd/"/>
    
      <category term="shell tool" scheme="https://lfire.github.io/tags/shell-tool/"/>
    
      <category term="cmder alias" scheme="https://lfire.github.io/tags/cmder-alias/"/>
    
  </entry>
  
  <entry>
    <title>cmder &amp; cygwin 中文支持解决方案</title>
    <link href="https://lfire.github.io/2017/03/08/20170308/"/>
    <id>https://lfire.github.io/2017/03/08/20170308/</id>
    <published>2017-03-08T01:54:46.000Z</published>
    <updated>2017-03-08T12:50:12.712Z</updated>
    
    <content type="html"><![CDATA[<p>在 windows 环境下，我们因系统本身自带的 cmd 方案表现很弱，所以我们经常使用其他的解决方案来弥补。而这些方案中最为常见和好用的也就是 cmder 和 cygwin 两种。<br>今天对于方案中，我们常遇到的问题——中文编码乱码问题来配置使用。</p><a id="more"></a><h2 id="使用环境-amp-场景"><a href="#使用环境-amp-场景" class="headerlink" title="使用环境 &amp; 场景"></a>使用环境 &amp; 场景</h2><p>中文环境下，最为常见的编码就是：</p><ul><li>GBK</li><li>UTF-8</li></ul><p>而在 windows 环境下，这两种编码的文件同时存在是非常常见的，而在 cmd 的终端环境下，想要一次性解决该显示问题，目前来说并不容易，因此，我们当前只能寻找一种最为全面的解决方案，以最大可能来解决该问题。<br>因此，目前需要来分析一下使用的场景：</p><ul><li>程序员编码</li><li>各工具使用，如： git、svn等</li></ul><p>而对于编码的场景下，我们目前最为推荐的编码格式仍是 utf-8 ，所以，这里也一样的不解释，建议使用 utf-8。<br>而对于 git &amp; svn 等相关的版本管理工具，这里也是程序员常有遇到的场景，而在 git 序列中，github 的使用常在手边过，而 github 所支持的中文编码就是 utf-8 。<br>从这些相关的场景分析来看，我们所有可控的场景中，我们最好使用的编码仍然是 <strong>utf-8</strong> 。<br>因此，这里本人也强烈推荐各位，在可以自己控制的情况下，我们应该首选 <strong>utf8</strong>。<br>场景的主编码确定好后，我们就可以分别针对两种不同工具，来进行相关的支持配置。</p><p><strong>配置总体可以分为：</strong></p><ul><li>软件界面</li><li>终端环境变量</li><li>相关工具配置</li></ul><h2 id="cmder-方案"><a href="#cmder-方案" class="headerlink" title="cmder 方案"></a>cmder 方案</h2><h3 id="界面配置"><a href="#界面配置" class="headerlink" title="界面配置"></a>界面配置</h3><p>右键标题栏 &gt; settings<br><img src="http://static.zybuluo.com/lfire/tj8269jbtkqtfykvgy5zjq6e/image_1balsa4i04rc1qfi1ve13q94ss9.png" alt="image_1balsa4i04rc1qfi1ve13q94ss9.png-14.2kB"></p><p>Main &gt; Font charset  </p><p><center><img src="http://static.zybuluo.com/lfire/uajwkvwfokfmi91x60b6ntwh/image_1balthlad1ksn14qb1jg13551l8om.png" alt="image_1balthlad1ksn14qb1jg13551l8om.png-58.9kB"></center></p><p>这里选择 GB 2312 主要是因为，windows 系统的主要编码还是：ANSI。</p><h3 id="终端环境变量"><a href="#终端环境变量" class="headerlink" title="终端环境变量"></a>终端环境变量</h3><p>Settings &gt; Startup &gt; Environment  </p><p><center><img src="http://static.zybuluo.com/lfire/9dynqnoliilgilonji2mo8jc/image_1baltov1i1s8t1v3h1pqg1k2010cg13.png" alt="image_1baltov1i1s8t1v3h1pqg1k2010cg13.png-52.4kB"></center></p><p>这里的设置，需要关闭 cmder 再重新打开一次生效。<br>我们可以通过 locale 命令查看设置的结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">λ locale</div><div class="line">LANG=zh_CN.utf-8</div><div class="line">LC_CTYPE=<span class="string">"zh_CN.utf-8"</span></div><div class="line">LC_NUMERIC=<span class="string">"zh_CN.utf-8"</span></div><div class="line">LC_TIME=<span class="string">"zh_CN.utf-8"</span></div><div class="line">LC_COLLATE=<span class="string">"zh_CN.utf-8"</span></div><div class="line">LC_MONETARY=<span class="string">"zh_CN.utf-8"</span></div><div class="line">LC_MESSAGES=<span class="string">"zh_CN.utf-8"</span></div><div class="line">LC_ALL=</div></pre></td></tr></table></figure></p><h3 id="相关工具的配置——"><a href="#相关工具的配置——" class="headerlink" title="相关工具的配置——"></a>相关工具的配置——</h3><p><strong>git 配置</strong><br>在 git 命令行下，主要是与：</p><ul><li>i18n.commitencoding</li><li>i18n.logoutputencoding</li></ul><p>两个配置参数有关，我们可以通过以下命令进行配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">λ git config --global i18n.commitencoding utf-8</div><div class="line">λ git config --global i18n.logoutputencoding utf-8</div></pre></td></tr></table></figure></p><p><strong>VIM 配置</strong><br>vim 是终端下最为常见的文档编辑器，我们可以在 VIM 的配置文件中加入如下配置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set fileencoding=cp936</div><div class="line">set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1</div></pre></td></tr></table></figure></p><p>注：<br>查找 vim 配置文件的位置，可以通过进入 vim 后，输入<br>:version</p><h2 id="cygwin-方案"><a href="#cygwin-方案" class="headerlink" title="cygwin 方案"></a>cygwin 方案</h2><h3 id="界面配置-1"><a href="#界面配置-1" class="headerlink" title="界面配置"></a>界面配置</h3><p>右键标题栏 &gt; Options<br><img src="http://static.zybuluo.com/lfire/s4b2vn4jwjnexkenrh523c4k/image_1balvfe7crb3rmutbr10e715211g.png" alt="image_1balvfe7crb3rmutbr10e715211g.png-7.6kB"></p><p>Text<br><img src="http://static.zybuluo.com/lfire/sg7wj11r10qijeg44gl54wme/image_1balvh3up1c1dmrg6ko5jovn01t.png" alt="image_1balvh3up1c1dmrg6ko5jovn01t.png-17.1kB"></p><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><p>修改 ~/.bashrc 文件，加入：<br>export LANG=”zh_CN.UTF-8”<br>export OUTPUT_CHARSET=”UTF8”</p><h3 id="相关工具配置"><a href="#相关工具配置" class="headerlink" title="相关工具配置"></a>相关工具配置</h3><p>git 和 vim 的配置与 cmder 下是一致的，可以采用同样的方式来处理。<br><img src="http://static.zybuluo.com/lfire/onwbhz11og0ocin9z3fe3irq/image_1bam88jme1gt21lt41v5n8j37gh2a.png" alt="image_1bam88jme1gt21lt41v5n8j37gh2a.png-9kB"></p><h2 id="综合方案"><a href="#综合方案" class="headerlink" title="综合方案"></a>综合方案</h2><p>cmder 是一种终端集成器，它同样可以将 cygwin 集成到其内部窗口上。<br>具体的配置方式，我们可以参考 <a href="https://github.com/cmderdev/cmder/wiki/%5BWindows%5D-Integrating-Cygwin" target="_blank" rel="external">cmder 官方手册</a><br>以下是本人的配置截图：  </p><p><center><img src="http://static.zybuluo.com/lfire/ns46ophzsvpq10ws01hqqhqv/image_1bam8ffjp11t71te51p34183e102n.png" alt="image_1bam8ffjp11t71te51p34183e102n.png-60.7kB"></center></p><p>配置后的运行效果图：    </p><p><center><img src="http://static.zybuluo.com/lfire/8c4i86w8lyvj98vx7931pg11/image_1bam8k79o8kk1jmg3ah5tkqo234.png" alt="image_1bam8k79o8kk1jmg3ah5tkqo234.png-73.2kB"></center></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 windows 环境下，我们因系统本身自带的 cmd 方案表现很弱，所以我们经常使用其他的解决方案来弥补。而这些方案中最为常见和好用的也就是 cmder 和 cygwin 两种。&lt;br&gt;今天对于方案中，我们常遇到的问题——中文编码乱码问题来配置使用。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://lfire.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="shell" scheme="https://lfire.github.io/categories/%E5%B7%A5%E5%85%B7/shell/"/>
    
    
      <category term="cmder" scheme="https://lfire.github.io/tags/cmder/"/>
    
      <category term="cygwin" scheme="https://lfire.github.io/tags/cygwin/"/>
    
      <category term="shell中文支持" scheme="https://lfire.github.io/tags/shell%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81/"/>
    
      <category term="windows shell" scheme="https://lfire.github.io/tags/windows-shell/"/>
    
  </entry>
  
  <entry>
    <title>神器 cmder</title>
    <link href="https://lfire.github.io/2017/03/02/cmder/"/>
    <id>https://lfire.github.io/2017/03/02/cmder/</id>
    <published>2017-03-02T01:12:42.000Z</published>
    <updated>2017-03-08T12:32:33.497Z</updated>
    
    <content type="html"><![CDATA[<p>当我们在 windows 环境下来进行开发编码工作时，是不是经常有一个不好的体验—— cmd 太弱了。</p><h2 id="windows-cmd-不足"><a href="#windows-cmd-不足" class="headerlink" title="windows cmd 不足"></a>windows cmd 不足</h2><blockquote><ul><li>界面太过于死板，不美观</li><li>相关的操作，以及命令支持不完善，无法达到，或是平衡 linx 平台下相关的操作习惯</li><li>当前各种框架平台不断发展，相关需要在命令行下执行的操作越来越多，而cmd没有多标签等相关的切换功能</li><li>窗口的大小直接受限，不能自如的调整窗口大小</li><li>…</li></ul></blockquote><p>以上所列出的点不尽全，相信只要有需要使用 shell 来进行终端操作的用户就能感觉到 windows 对于用户，在这方面的不友好。而现实的开发工作序列中，无论是我们的代码管理，还是我们的环境编译，以及其他相关框架或平台的应用，如若想完全的脱离终端，这种可能性及小。<br>另外，从操作的效率性方面来出发，命令行下的操作，要比鼠标和键盘的来回切换操作来得高效和方便。（也许你不太认可，但这是很大一部分人公认的。）</p><a id="more"></a><h2 id="神器登场-cmder"><a href="#神器登场-cmder" class="headerlink" title="神器登场 cmder"></a>神器登场 cmder</h2><p><a href="http://cmder.net" target="_blank" rel="external">cmder</a> 是一款绿色且开源的软件，并且已经托管在了 <a href="https://github.com/cmderdev/cmder" target="_blank" rel="external">github</a> 上，其主要的目标即是在 windows 平台上，打造类 linux 的终端操作体验。<br>先来一张靓照：<br><img src="http://static.zybuluo.com/lfire/kjx599up3fkhyp66w8u1thk1/image_1ba6bg7io1baabambl16t6164l9.png" alt="image_1ba6bg7io1baabambl16t6164l9.png-125.4kB"><br>从图中我们可以看到，中文支持友好，同时，终端的颜值很高，最最主要的是，本软件是高度可定制的。<br>只要是你愿意，你完全可以根据你自己的喜好，自定出一套你自己喜欢的主题出来。<br>如下图所示，你可以打开 Settings 来配置你自己的各种需要</p><p><center><img src="http://static.zybuluo.com/lfire/c7lnguz1rbyw3ptfc25t1nsa/image_1ba6dr9s21t1b1va83kag7r14eqm.png" alt="image_1ba6dr9s21t1b1va83kag7r14eqm.png-58kB"></center></p><h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><h3 id="提供高度类-Linux-的终端体验"><a href="#提供高度类-Linux-的终端体验" class="headerlink" title="提供高度类 Linux 的终端体验"></a>提供高度类 Linux 的终端体验</h3><p>在我们平常的使用命令终端的体验过程中，如若能达到 linux 平台下相关命令的可靠性，那即是 windows 平台下开发者的福音，而 cmder 正是朝着这一方向而来的。可以支持的初略的列一下：<br>pwd ll ls whoami where cp rm unzip …</p><p><center><img src="http://static.zybuluo.com/lfire/popnb072z38727c023futjay/image_1ba6enhov1l3gqh41bfa1ktupf91g.png" alt="image_1ba6enhov1l3gqh41bfa1ktupf91g.png-55.1kB"></center></p><h3 id="快捷键支持丰富"><a href="#快捷键支持丰富" class="headerlink" title="快捷键支持丰富"></a>快捷键支持丰富</h3><ul><li><strong>打开设置：</strong> 使用 <code>win + alt + p</code></li><li><strong>新建标签：</strong> <code>ctrl + t</code></li><li><strong>关闭标签：</strong> <code>ctrl + w</code></li><li><strong>快速新建不同类型标签：</strong> <code>shift + alt + number</code><ol><li>cmd</li><li>PowerShell</li></ol></li><li><strong>全屏：</strong> <code>alt + enter</code></li><li><strong>返回上级目录：</strong> <code>ctrl + alt + u</code></li><li><strong>历史查询：</strong> <code>ctrl + r</code></li><li><strong>选择复制文本：</strong> <code>left mouse select</code></li><li><strong>粘贴文本：</strong> <code>right click</code><br>更多的快捷键，你可以打开 <strong>Settings</strong> &gt; <strong>Keys &amp; Macro</strong> 中进行设置和查看。</li></ul><h3 id="支持命令别名-Aliases-配置"><a href="#支持命令别名-Aliases-配置" class="headerlink" title="支持命令别名(Aliases)配置"></a>支持命令别名(Aliases)配置</h3><p>这是 cmder 所提供的一个非常方便的功能，我们可以很个性化的设置我们个人喜欢的命令，来完成某些长命令的输入。<br>以下是我别名配置的一个片段，大家可参考：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">pwd</span>=<span class="built_in">cd</span></div><div class="line">clear=cls</div><div class="line"><span class="built_in">history</span>=cat <span class="string">"%CMDER_ROOT%\config\.history"</span></div><div class="line"><span class="built_in">unalias</span>=<span class="built_in">alias</span> /d <span class="variable">$1</span></div><div class="line">vi=vim $*</div><div class="line">cmderr=<span class="built_in">cd</span> /d <span class="string">"%CMDER_ROOT%"</span></div><div class="line">e.=explorer .</div><div class="line">gl=git <span class="built_in">log</span> --oneline --all --graph --decorate  $*</div><div class="line">l=ls --show-control-chars  --color $*</div><div class="line">la=ls <span class="_">-a</span>F --show-control-chars --color $*</div><div class="line">ll=ls -alF --show-control-chars --color $*</div><div class="line">ls=ls --show-control-chars -F --color $*</div></pre></td></tr></table></figure></p><h3 id="对于中文支持的处理"><a href="#对于中文支持的处理" class="headerlink" title="对于中文支持的处理"></a>对于中文支持的处理</h3><p>在平常应用过程中，我们经常会遇到中文问题的苦恼，如何很好的解决中文在各种场景下的显示问题，是很多类似产品的一大痛点。</p><p><strong>常见场景：</strong></p><ul><li>中文文件或中文文件夹名的显示和操作；</li><li>VIM 中打开包含中文内容的文件查看及编辑等；</li><li>git 提交代码到 github 等代码仓库时，中文日志的提交及查看；</li></ul><p><strong>几个关键配置要点：</strong></p><ul><li>中文字体的选择：我们需要选择相关支持中文字符显示的字体来做为软件的展示字体。</li><li>字符编码的选择：在 windows 下，很多文件名，及文件的编码都是以 GBK 为编码，因此，这里我们需要很慎重的选择软件的字体编码。</li><li>环境变量的设置：因本软件的类 linux 的设计，所以很多命令，如 git 都有着 linux 下相似的处理逻辑，而 github 这种是全以 UTF8 为编码的平台，因此，环境变量需要对此进行特殊处理。</li><li>VIM 的字符编码配置：因是在 windows 平台中，很多的文件的编码可能是多种多样的，不是固定的某一种，因此，在 VIM 的配置中，就必须要考虑到这种情况，配置让它可以智能的识别并转换文件内容编码。</li></ul><p>以下贴出我所配置的部分参数：<br><strong>字体&amp;字体编码配置</strong></p><p><center><img src="http://static.zybuluo.com/lfire/tqjuairc92zf58e0a6rxrwe3/image_1ba6mm5091ucu1ijdkvg1q6ghn41t.png" alt="image_1ba6mm5091ucu1ijdkvg1q6ghn41t.png-21kB"></center></p><p>其中的 <strong>YaHei Consolas Hybrid</strong> 是我在编程过程中，所遇到的一种字体，对于中文、英文大小写、以及数字的支持以及辨识度很高。<a href="http://pan.baidu.com/s/1i4HDZE1" target="_blank" rel="external">个人推荐使用，可以这下载安装，提取密码: tmgw</a><br>而其中因是在 windows 环境下，所以建议使用 GB2312 编码。</p><p><strong>环境变量配置</strong></p><p><center><img src="http://static.zybuluo.com/lfire/mckot5pvachk05wtrvm1rvpt/image_1ba6n59vr7a8se716vu16jhrbn2a.png" alt="image_1ba6n59vr7a8se716vu16jhrbn2a.png-31.7kB"></center></p><p>为兼容 github 等使用，整体将 cmder 的环境变量中 LANG 设置为 UTF-8 ，以此实现 <em>git log</em> 等命令查看时支持中文。</p><p><strong>VIM配置</strong></p><p><center><img src="http://static.zybuluo.com/lfire/oatt6pao27tfbbkne7j7pgv5/image_1ba6nc7b0g391a4vhjnhfk1mhq2n.png" alt="image_1ba6nc7b0g391a4vhjnhfk1mhq2n.png-62.7kB"></center></p><p>为实现 VIM 支持各种编码格式文件的中文查看及编辑，cmder 内部已做好了配置进行处理，上图只是将相关的配置内容贴出。</p><h2 id="整体配置及软件包下载"><a href="#整体配置及软件包下载" class="headerlink" title="整体配置及软件包下载"></a>整体配置及软件包下载</h2><p>为方便大家直接使用，我将当前我所使用的版本，以及配置整体打包分享出来。<br><a href="http://pan.baidu.com/s/1nuKTEe1" target="_blank" rel="external">推荐大家使用，提取密码: 1aix</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们在 windows 环境下来进行开发编码工作时，是不是经常有一个不好的体验—— cmd 太弱了。&lt;/p&gt;
&lt;h2 id=&quot;windows-cmd-不足&quot;&gt;&lt;a href=&quot;#windows-cmd-不足&quot; class=&quot;headerlink&quot; title=&quot;windows cmd 不足&quot;&gt;&lt;/a&gt;windows cmd 不足&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;界面太过于死板，不美观&lt;/li&gt;
&lt;li&gt;相关的操作，以及命令支持不完善，无法达到，或是平衡 linx 平台下相关的操作习惯&lt;/li&gt;
&lt;li&gt;当前各种框架平台不断发展，相关需要在命令行下执行的操作越来越多，而cmd没有多标签等相关的切换功能&lt;/li&gt;
&lt;li&gt;窗口的大小直接受限，不能自如的调整窗口大小&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上所列出的点不尽全，相信只要有需要使用 shell 来进行终端操作的用户就能感觉到 windows 对于用户，在这方面的不友好。而现实的开发工作序列中，无论是我们的代码管理，还是我们的环境编译，以及其他相关框架或平台的应用，如若想完全的脱离终端，这种可能性及小。&lt;br&gt;另外，从操作的效率性方面来出发，命令行下的操作，要比鼠标和键盘的来回切换操作来得高效和方便。（也许你不太认可，但这是很大一部分人公认的。）&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://lfire.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="shell" scheme="https://lfire.github.io/categories/%E5%B7%A5%E5%85%B7/shell/"/>
    
    
      <category term="cmder" scheme="https://lfire.github.io/tags/cmder/"/>
    
      <category term="cmd" scheme="https://lfire.github.io/tags/cmd/"/>
    
      <category term="shell" scheme="https://lfire.github.io/tags/shell/"/>
    
      <category term="tool" scheme="https://lfire.github.io/tags/tool/"/>
    
      <category term="工具" scheme="https://lfire.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="windows cmd" scheme="https://lfire.github.io/tags/windows-cmd/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lfire.github.io/2017/03/01/hello-world/"/>
    <id>https://lfire.github.io/2017/03/01/hello-world/</id>
    <published>2017-03-01T08:34:00.000Z</published>
    <updated>2017-03-08T12:32:33.499Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;
    
    </summary>
    
      <category term="init" scheme="https://lfire.github.io/categories/init/"/>
    
    
      <category term="hello" scheme="https://lfire.github.io/tags/hello/"/>
    
  </entry>
  
</feed>
