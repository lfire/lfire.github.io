<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-22T13:33:22.115Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>html 开发规范指导手册</title>
    <link href="http://yoursite.com/2018/03/20/html-style-guide/"/>
    <id>http://yoursite.com/2018/03/20/html-style-guide/</id>
    <published>2018-03-20T16:05:21.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E8%83%8C%E6%99%AF">1 背景</a></li><li><a href="#2-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC">2 代码风格</a><ul><li><a href="#21-%E7%BC%A9%E8%BF%9B%E4%B8%8E%E6%8D%A2%E8%A1%8C">2.1 缩进与换行</a></li><li><a href="#22-%E5%91%BD%E5%90%8D">2.2 命名</a></li><li><a href="#23-%E6%A0%87%E7%AD%BE">2.3 标签</a></li><li><a href="#24-%E5%B1%9E%E6%80%A7">2.4 属性</a></li></ul></li><li><a href="#3-%E9%80%9A%E7%94%A8">3 通用</a><ul><li><a href="#31-doctype">3.1 DOCTYPE</a></li><li><a href="#32-%E7%BC%96%E7%A0%81">3.2 编码</a></li><li><a href="#33-css-%E5%92%8C-javascript-%E5%BC%95%E5%85%A5">3.3 CSS 和 JavaScript 引入</a></li></ul></li><li><a href="#4-head">4 head</a><ul><li><a href="#41-title">4.1 title</a></li><li><a href="#42-favicon">4.2 favicon</a></li><li><a href="#43-viewport">4.3 viewport</a></li></ul></li><li><a href="#5-%E5%9B%BE%E7%89%87">5 图片</a></li><li><a href="#6-%E8%A1%A8%E5%8D%95">6 表单</a><ul><li><a href="#61-%E6%8E%A7%E4%BB%B6%E6%A0%87%E9%A2%98">6.1 控件标题</a></li><li><a href="#62-%E6%8C%89%E9%92%AE">6.2 按钮</a></li><li><a href="#63-%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7-a11y">6.3 可访问性 (A11Y)</a></li></ul></li><li><a href="#7-%E5%A4%9A%E5%AA%92%E4%BD%93">7 多媒体</a></li><li><a href="#8-%E6%A8%A1%E6%9D%BF%E4%B8%AD%E7%9A%84-html">8 模板中的 HTML</a></li></ul></p><a id="more"></a><h2 id="1-背景"><a class="markdownIt-Anchor" href="#1-背景"></a> 1 背景</h2><p><a href="https://github.com/ecomfe/spec/blob/master/html-style-guide.md" target="_blank" rel="noopener">转自</a>。<br>HTML 作为描述网页结构的超文本标记语言，在 B/S 架构程序一直有着广泛的应用。本文档的目标是使 HTML 代码风格保持一致，容易被理解和被维护。</p><h2 id="2-代码风格"><a class="markdownIt-Anchor" href="#2-代码风格"></a> 2 代码风格</h2><h3 id="21-缩进与换行"><a class="markdownIt-Anchor" href="#21-缩进与换行"></a> 2.1 缩进与换行</h3><p><strong>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</strong></p><p>解释：<br>对于非 HTML 标签之间的缩进，比如 script 或 style 标签内容缩进，与 script 或 style 标签的缩进同级。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="comment">/* 样式内容的第一级缩进与所属的 style 标签对齐 */</span></span></span><br><span class="line"><span class="undefined">ul &#123;</span></span><br><span class="line"><span class="undefined">    padding: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 脚本代码的第一级缩进与所属的 script 标签对齐</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">require</span>([<span class="string">'app'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">    app.init();</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 每行不得超过 <code>120</code> 个字符。</strong></p><p>解释：</p><p>过长的代码不容易阅读与维护。但是考虑到 HTML 的特殊性，不做硬性要求。</p><h3 id="22-命名"><a class="markdownIt-Anchor" href="#22-命名"></a> 2.2 命名</h3><p><strong>[强制] <code>class</code> 必须单词全字母小写，单词间以 <code>-</code> 分隔。</strong></p><p><strong>[强制] <code>class</code> 必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[强制] 元素 <code>id</code> 必须保证页面唯一。</strong></p><p>解释：</p><p>同一个页面中，不同的元素包含相同的 <code>id</code>，不符合 <code>id</code> 的属性含义。并且使用 <code>document.getElementById</code> 时可能导致难以追查的问题。</p><p><strong>[建议] <code>id</code> 建议单词全字母小写，单词间以 <code>-</code> 分隔。同项目必须保持风格一致。</strong></p><p><strong>[建议] <code>id</code>、<code>class</code> 命名，在避免冲突并描述清楚的前提下尽可能短。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navigation"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"author"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[强制] 禁止为了 <code>hook 脚本</code>，创建无样式信息的 <code>class</code>。</strong></p><p>解释：</p><p>不允许 <code>class</code> 只用于让 JavaScript 选择某些元素，<code>class</code> 应该具有明确的语义和样式。否则容易导致 CSS class 泛滥。</p><p>使用 <code>id</code>、属性选择作为 hook 是更好的方式。</p><p><strong>[强制] 同一页面，应避免使用相同的 <code>name</code> 与 <code>id</code>。</strong></p><p>解释：</p><p>IE 浏览器会混淆元素的 <code>id</code> 和 <code>name</code> 属性， <code>document.getElementById</code> 可能获得不期望的元素。所以在对元素的 <code>id</code> 与 <code>name</code> 属性的命名需要非常小心。</p><p>一个比较好的实践是，为 <code>id</code> 和 <code>name</code> 使用不同的命名法。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"foo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// IE6 将显示 INPUT</span></span></span><br><span class="line"><span class="javascript">alert(<span class="built_in">document</span>.getElementById(<span class="string">'foo'</span>).tagName);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="23-标签"><a class="markdownIt-Anchor" href="#23-标签"></a> 2.3 标签</h3><p><strong>[强制] 标签名必须使用小写字母。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello StyleGuide!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>Hello StyleGuide!<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[强制] 对于无需自闭合的标签，不允许自闭合。</strong></p><p>解释：</p><p>常见无需自闭合标签有 <code>input</code>、<code>br</code>、<code>img</code>、<code>hr</code> 等。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[强制] 对 <code>HTML5</code> 中规定允许省略的闭合标签，不允许省略闭合标签。</strong></p><p>解释：</p><p>对代码体积要求非常严苛的场景，可以例外。比如：第三方页面使用的投放系统。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>first</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>second</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[强制] 标签使用必须符合标签嵌套规则。</strong></p><p>解释：</p><p>比如 <code>div</code> 不得置于 <code>p</code> 中，<code>tbody</code> 必须置于 <code>table</code> 中。</p><p>详细的标签嵌套规则参见<a href="http://www.cs.tut.fi/~jkorpela/html5.dtd" target="_blank" rel="noopener">HTML DTD</a>中的 <code>Elements</code> 定义部分。</p><p><strong>[建议] HTML 标签的使用应该遵循标签的语义。</strong></p><p>解释：</p><p>下面是常见标签语义</p><ul><li>p - 段落</li><li>h1,h2,h3,h4,h5,h6 - 层级标题</li><li>strong,em - 强调</li><li>ins - 插入</li><li>del - 删除</li><li>abbr - 缩写</li><li>code - 代码标识</li><li>cite - 引述来源作品的标题</li><li>q - 引用</li><li>blockquote - 一段或长篇引用</li><li>ul - 无序列表</li><li>ol - 有序列表</li><li>dl,dt,dd - 定义列表</li></ul><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Esprima serves as an important <span class="tag">&lt;<span class="name">strong</span>&gt;</span>building block<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> for some JavaScript language tools.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Esprima serves as an important <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"strong"</span>&gt;</span>building block<span class="tag">&lt;/<span class="name">span</span>&gt;</span> for some JavaScript language tools.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 在 CSS 可以实现相同需求的情况下不得使用表格进行布局。</strong></p><p>解释：</p><p>在兼容性允许的情况下应尽量保持语义正确性。对网格对齐和拉伸性有严格要求的场景允许例外，如多列复杂表单。</p><p><strong>[建议] 标签的使用应尽量简洁，减少不必要的标签。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"avatar"</span> <span class="attr">src</span>=<span class="string">"image.png"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"avatar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="24-属性"><a class="markdownIt-Anchor" href="#24-属性"></a> 2.4 属性</h3><p><strong>[强制] 属性名必须使用小写字母。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellSpacing</span>=<span class="string">"0"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[强制] 属性值必须用双引号包围。</strong></p><p>解释：</p><p>不允许使用单引号，不允许不使用引号。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"esl.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'esl.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">esl.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 布尔类型的属性，建议不添加属性值。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 自定义属性建议以 <code>xxx-</code> 为前缀，推荐使用 <code>data-</code>。</strong></p><p>解释：</p><p>使用前缀有助于区分自定义属性和标准定义的属性。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">data-ui-type</span>=<span class="string">"Select"</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-通用"><a class="markdownIt-Anchor" href="#3-通用"></a> 3 通用</h2><h3 id="31-doctype"><a class="markdownIt-Anchor" href="#31-doctype"></a> 3.1 DOCTYPE</h3><p><strong>[强制] 使用 <code>HTML5</code> 的 <code>doctype</code> 来启用标准模式，建议使用大写的 <code>DOCTYPE</code>。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 启用 IE Edge 模式。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 在 <code>html</code> 标签上设置正确的 <code>lang</code> 属性。</strong></p><p>解释：</p><p>有助于提高页面的可访问性，如：让语音合成工具确定其所应该采用的发音，令翻译工具确定其翻译语言等。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="32-编码"><a class="markdownIt-Anchor" href="#32-编码"></a> 3.2 编码</h3><p><strong>[强制] 页面必须使用精简形式，明确指定字符编码。指定字符编码的 <code>meta</code> 必须是 <code>head</code> 的第一个直接子元素。</strong></p><p>解释：</p><p>见 <a href="http://www.qianduan.net/html5-charset-can-it.html" target="_blank" rel="noopener">HTML5 Charset能用吗</a> 一文。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] <code>HTML</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</strong></p><p>解释：</p><p><code>UTF-8</code> 编码具有更广泛的适应性。<code>BOM</code> 在使用程序或工具处理文件时可能造成不必要的干扰。</p><h3 id="33-css-和-javascript-引入"><a class="markdownIt-Anchor" href="#33-css-和-javascript-引入"></a> 3.3 CSS 和 JavaScript 引入</h3><p><strong>[强制] 引入 <code>CSS</code> 时必须指明 <code>rel=&quot;stylesheet&quot;</code>。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"page.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 引入 <code>CSS</code> 和 <code>JavaScript</code> 时无须指明 <code>type</code> 属性。</strong></p><p>解释：</p><p><code>text/css</code> 和 <code>text/javascript</code> 是 <code>type</code> 的默认值。</p><p><strong>[建议] 展现定义放置于外部 <code>CSS</code> 中，行为定义放置于外部 <code>JavaScript</code> 中。</strong></p><p>解释：</p><p>结构-样式-行为的代码分离，对于提高代码的可阅读性和维护性都有好处。</p><p><strong>[建议] 在 <code>head</code> 中引入页面需要的所有 <code>CSS</code> 资源。</strong></p><p>解释：</p><p>在页面渲染的过程中，新的CSS可能导致元素的样式重新计算和绘制，页面闪烁。</p><p><strong>[建议] <code>JavaScript</code> 应当放在页面末尾，或采用异步加载。</strong></p><p>解释：</p><p>将 <code>script</code> 放在页面中间将阻断页面的渲染。出于性能方面的考虑，如非必要，请遵守此条建议。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- a lot of elements --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"init-behavior.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 移动环境或只针对现代浏览器设计的 Web 应用，如果引用外部资源的 <code>URL</code> 协议部分与页面相同，建议省略协议前缀。</strong></p><p>解释：</p><p>使用 <code>protocol-relative URL</code> 引入 CSS，在 <code>IE7/8</code> 下，会发两次请求。是否使用 <code>protocol-relative URL</code> 应充分考虑页面针对的环境。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//s1.bdstatic.com/cache/static/jquery-1.10.2.min_f2fb5194.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-head"><a class="markdownIt-Anchor" href="#4-head"></a> 4 head</h2><h3 id="41-title"><a class="markdownIt-Anchor" href="#41-title"></a> 4.1 title</h3><p><strong>[强制] 页面必须包含 <code>title</code> 标签声明标题。</strong></p><p><strong>[强制] <code>title</code> 必须作为 <code>head</code> 的直接子元素，并紧随 <code>charset</code> 声明之后。</strong></p><p>解释：</p><p><code>title</code> 中如果包含 ASCII 之外的字符，浏览器需要知道字符编码类型才能进行解码，否则可能导致乱码。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="42-favicon"><a class="markdownIt-Anchor" href="#42-favicon"></a> 4.2 favicon</h3><p><strong>[强制] 保证 <code>favicon</code> 可访问。</strong></p><p>解释：</p><p>在未指定 favicon 时，大多数浏览器会请求 Web Server 根目录下的 <code>favicon.ico</code> 。为了保证 favicon 可访问，避免 404，必须遵循以下两种方法之一：</p><ol><li>在 Web Server 根目录放置 <code>favicon.ico</code> 文件。</li><li>使用 <code>link</code> 指定 favicon。</li></ol><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"path/to/favicon.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="43-viewport"><a class="markdownIt-Anchor" href="#43-viewport"></a> 4.3 viewport</h3><p><strong>[建议] 若页面欲对移动设备友好，需指定页面的 <code>viewport</code>。</strong></p><p>解释：</p><p>viewport meta tag 可以设置可视区域的宽度和初始缩放大小，避免在移动设备上出现页面展示不正常。</p><p>比如，在页面宽度小于 <code>980px</code> 时，若需 iOS 设备友好，应当设置 viewport 的 <code>width</code> 值来适应你的页面宽度。同时因为不同移动设备分辨率不同，在设置时，应当使用 <code>device-width</code> 和 <code>device-height</code> 变量。</p><p>另外，为了使 viewport 正常工作，在页面内容样式布局设计上也要做相应调整，如避免绝对定位等。关于 viewport 的更多介绍，可以参见 <a href="https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/UsingtheViewport/UsingtheViewport.html#//apple_ref/doc/uid/TP40006509-SW26" target="_blank" rel="noopener">Safari Web Content Guide的介绍</a></p><h2 id="5-图片"><a class="markdownIt-Anchor" href="#5-图片"></a> 5 图片</h2><p><strong>[强制] 禁止 <code>img</code> 的 <code>src</code> 取值为空。延迟加载的图片也要增加默认的 <code>src</code>。</strong></p><p>解释：</p><p><code>src</code> 取值为空，会导致部分浏览器重新加载一次当前页面，参考：<a href="https://developer.yahoo.com/performance/rules.html#emptysrc" target="_blank" rel="noopener">https://developer.yahoo.com/performance/rules.html#emptysrc</a></p><p><strong>[建议] 避免为 <code>img</code> 添加不必要的 <code>title</code> 属性。</strong></p><p>解释：</p><p>多余的 <code>title</code> 影响看图体验，并且增加了页面尺寸。</p><p><strong>[建议] 为重要图片添加 <code>alt</code> 属性。</strong></p><p>解释：</p><p>可以提高图片加载失败时的用户体验。</p><p><strong>[建议] 添加 <code>width</code> 和 <code>height</code> 属性，以避免页面抖动。</strong></p><p><strong>[建议] 有下载需求的图片采用 <code>img</code> 标签实现，无下载需求的图片采用 CSS 背景图实现。</strong></p><p>解释：</p><ol><li>产品 logo、用户头像、用户产生的图片等有潜在下载需求的图片，以 <code>img</code> 形式实现，能方便用户下载。</li><li>无下载需求的图片，比如：icon、背景、代码使用的图片等，尽可能采用 CSS 背景图实现。</li></ol><h2 id="6-表单"><a class="markdownIt-Anchor" href="#6-表单"></a> 6 表单</h2><h3 id="61-控件标题"><a class="markdownIt-Anchor" href="#61-控件标题"></a> 6.1 控件标题</h3><p><strong>[强制] 有文本标题的控件必须使用 <code>label</code> 标签将其与其标题相关联。</strong></p><p>解释：</p><p>有两种方式：</p><ol><li>将控件置于 <code>label</code> 内。</li><li><code>label</code> 的 <code>for</code> 属性指向控件的 <code>id</code>。</li></ol><p>推荐使用第一种，减少不必要的 <code>id</code>。如果 DOM 结构不允许直接嵌套，则应使用第二种。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"confirm"</span> <span class="attr">value</span>=<span class="string">"on"</span>&gt;</span> 我已确认上述条款<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"textbox"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="62-按钮"><a class="markdownIt-Anchor" href="#62-按钮"></a> 6.2 按钮</h3><p><strong>[强制] 使用 <code>button</code> 元素时必须指明 <code>type</code> 属性值。</strong></p><p>解释：</p><p><code>button</code> 元素的默认 <code>type</code> 为 <code>submit</code>，如果被置于 <code>form</code> 元素中，点击后将导致表单提交。为显示区分其作用方便理解，必须给出 <code>type</code> 属性。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 尽量不要使用按钮类元素的 <code>name</code> 属性。</strong></p><p>解释：</p><p>由于浏览器兼容性问题，使用按钮的 <code>name</code> 属性会带来许多难以发现的问题。具体情况可参考<a href="http://w3help.org/zh-cn/causes/CM2001" target="_blank" rel="noopener">此文</a>。</p><h3 id="63-可访问性-a11y"><a class="markdownIt-Anchor" href="#63-可访问性-a11y"></a> 6.3 可访问性 (A11Y)</h3><p><strong>[建议] 负责主要功能的按钮在 DOM 中的顺序应靠前。</strong></p><p>解释：</p><p>负责主要功能的按钮应相对靠前，以提高可访问性。如果在 CSS 中指定了 <code>float: right</code> 则可能导致视觉上主按钮在前，而 DOM 中主按钮靠后的情况。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.buttons</span> <span class="selector-class">.button-group</span> &#123;</span></span><br><span class="line"><span class="undefined">    float: right;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.buttons</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="undefined">    float: right;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 当使用 JavaScript 进行表单提交时，如果条件允许，应使原生提交功能正常工作。</strong></p><p>解释：</p><p>当浏览器 JS 运行错误或关闭 JS 时，提交功能将无法工作。如果正确指定了 <code>form</code> 元素的 <code>action</code> 属性和表单控件的 <code>name</code> 属性时，提交仍可继续进行。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 在针对移动设备开发的页面时，根据内容类型指定输入框的 <code>type</code> 属性。</strong></p><p>解释：</p><p>根据内容类型指定输入框类型，能获得能友好的输入体验。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-多媒体"><a class="markdownIt-Anchor" href="#7-多媒体"></a> 7 多媒体</h2><p><strong>[建议] 当在现代浏览器中使用 <code>audio</code> 以及 <code>video</code> 标签来播放音频、视频时，应当注意格式。</strong></p><p>解释：</p><p>音频应尽可能覆盖到如下格式：</p><ul><li>MP3</li><li>WAV</li><li>Ogg</li></ul><p>视频应尽可能覆盖到如下格式：</p><ul><li>MP4</li><li>WebM</li><li>Ogg</li></ul><p><strong>[建议] 在支持 <code>HTML5</code> 的浏览器中优先使用 <code>audio</code> 和 <code>video</code> 标签来定义音视频元素。</strong></p><p><strong>[建议] 使用退化到插件的方式来对多浏览器进行支持。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"audio.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"audio.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">data</span>=<span class="string">"audio.mp3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">src</span>=<span class="string">"audio.swf"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">data</span>=<span class="string">"video.mp4"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">src</span>=<span class="string">"video.swf"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 只在必要的时候开启音视频的自动播放。</strong></p><p><strong>[建议] 在 <code>object</code> 标签内部提供指示浏览器不支持该标签的说明。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">data</span>=<span class="string">"something.swf"</span>&gt;</span>DO NOT SUPPORT THIS TAG<span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-模板中的-html"><a class="markdownIt-Anchor" href="#8-模板中的-html"></a> 8 模板中的 HTML</h2><p><strong>[建议] 模板代码的缩进优先保证 HTML 代码的缩进规则。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line">&#123;if $display == true&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;foreach $item_list as $item&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;$item.name&#125;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;/foreach&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;/if&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line">&#123;if $display == true&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;foreach $item_list as $item&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;$item.name&#125;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;/foreach&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;/if&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 模板代码应以保证 HTML 单个标签语法的正确性为基本原则。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"&#123;if $item.type_id == $current_type&#125;focus&#123;/if&#125;"</span>&gt;</span>&#123; $item.type_name &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> &#123;<span class="attr">if</span> $<span class="attr">item.type_id</span> == <span class="string">$current_type&#125;</span> <span class="attr">class</span>=<span class="string">"focus"</span>&#123;/<span class="attr">if</span>&#125;&gt;</span>&#123; $item.type_name &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 在循环处理模板数据构造表格时，若要求每行输出固定的个数，建议先将数据分组，之后再循环输出。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    &#123;foreach $item_list as $item_group&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;foreach $item_group as $item&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123; $item.name &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        &#123;/foreach&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;/foreach&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;foreach $item_list as $item&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123; $item.name &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        &#123;if $item@iteration is div by 5&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;/if&#125;</span><br><span class="line">    &#123;/foreach&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E8%83%8C%E6%99%AF&quot;&gt;1 背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC&quot;&gt;2 代码风格&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-%E7%BC%A9%E8%BF%9B%E4%B8%8E%E6%8D%A2%E8%A1%8C&quot;&gt;2.1 缩进与换行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-%E5%91%BD%E5%90%8D&quot;&gt;2.2 命名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-%E6%A0%87%E7%AD%BE&quot;&gt;2.3 标签&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#24-%E5%B1%9E%E6%80%A7&quot;&gt;2.4 属性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E9%80%9A%E7%94%A8&quot;&gt;3 通用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-doctype&quot;&gt;3.1 DOCTYPE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-%E7%BC%96%E7%A0%81&quot;&gt;3.2 编码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33-css-%E5%92%8C-javascript-%E5%BC%95%E5%85%A5&quot;&gt;3.3 CSS 和 JavaScript 引入&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-head&quot;&gt;4 head&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#41-title&quot;&gt;4.1 title&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#42-favicon&quot;&gt;4.2 favicon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#43-viewport&quot;&gt;4.3 viewport&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%E5%9B%BE%E7%89%87&quot;&gt;5 图片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-%E8%A1%A8%E5%8D%95&quot;&gt;6 表单&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#61-%E6%8E%A7%E4%BB%B6%E6%A0%87%E9%A2%98&quot;&gt;6.1 控件标题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#62-%E6%8C%89%E9%92%AE&quot;&gt;6.2 按钮&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#63-%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%80%A7-a11y&quot;&gt;6.3 可访问性 (A11Y)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-%E5%A4%9A%E5%AA%92%E4%BD%93&quot;&gt;7 多媒体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8-%E6%A8%A1%E6%9D%BF%E4%B8%AD%E7%9A%84-html&quot;&gt;8 模板中的 HTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="开发规范" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
      <category term="html" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/html/"/>
    
    
      <category term="开发规范" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>css 开发规范指导手册</title>
    <link href="http://yoursite.com/2018/03/20/css-style-guide/"/>
    <id>http://yoursite.com/2018/03/20/css-style-guide/</id>
    <published>2018-03-20T15:41:34.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E8%83%8C%E6%99%AF">1 背景</a></li><li><a href="#2-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC">2 代码风格</a><ul><li><a href="#21-%E6%96%87%E4%BB%B6">2.1 文件</a></li><li><a href="#22-%E7%BC%A9%E8%BF%9B">2.2 缩进</a></li><li><a href="#23-%E7%A9%BA%E6%A0%BC">2.3 空格</a></li><li><a href="#24-%E8%A1%8C%E9%95%BF%E5%BA%A6">2.4 行长度</a></li><li><a href="#25-%E9%80%89%E6%8B%A9%E5%99%A8">2.5 选择器</a></li><li><a href="#26-%E5%B1%9E%E6%80%A7">2.6 属性</a></li></ul></li><li><a href="#3-%E9%80%9A%E7%94%A8">3 通用</a><ul><li><a href="#31-%E9%80%89%E6%8B%A9%E5%99%A8">3.1 选择器</a></li><li><a href="#32-%E5%B1%9E%E6%80%A7%E7%BC%A9%E5%86%99">3.2 属性缩写</a></li><li><a href="#33-%E5%B1%9E%E6%80%A7%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F">3.3 属性书写顺序</a></li><li><a href="#34-%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8">3.4 清除浮动</a></li><li><a href="#35-important">3.5 !important</a></li><li><a href="#36-z-index">3.6 z-index</a></li></ul></li><li><a href="#4-%E5%80%BC%E4%B8%8E%E5%8D%95%E4%BD%8D">4 值与单位</a><ul><li><a href="#41-%E6%96%87%E6%9C%AC">4.1 文本</a></li><li><a href="#42-%E6%95%B0%E5%80%BC">4.2 数值</a></li><li><a href="#43-url">4.3 url()</a></li><li><a href="#44-%E9%95%BF%E5%BA%A6">4.4 长度</a></li><li><a href="#45-%E9%A2%9C%E8%89%B2">4.5 颜色</a></li><li><a href="#46-2d-%E4%BD%8D%E7%BD%AE">4.6 2D 位置</a></li></ul></li><li><a href="#5-%E6%96%87%E6%9C%AC%E7%BC%96%E6%8E%92">5 文本编排</a><ul><li><a href="#51-%E5%AD%97%E4%BD%93%E6%97%8F">5.1 字体族</a></li><li><a href="#52-%E5%AD%97%E5%8F%B7">5.2 字号</a></li><li><a href="#53-%E5%AD%97%E4%BD%93%E9%A3%8E%E6%A0%BC">5.3 字体风格</a></li><li><a href="#54-%E5%AD%97%E9%87%8D">5.4 字重</a></li><li><a href="#55-%E8%A1%8C%E9%AB%98">5.5 行高</a></li></ul></li><li><a href="#6-%E5%8F%98%E6%8D%A2%E4%B8%8E%E5%8A%A8%E7%94%BB">6 变换与动画</a></li><li><a href="#7-%E5%93%8D%E5%BA%94%E5%BC%8F">7 响应式</a></li><li><a href="#8-%E5%85%BC%E5%AE%B9%E6%80%A7">8 兼容性</a><ul><li><a href="#81-%E5%B1%9E%E6%80%A7%E5%89%8D%E7%BC%80">8.1 属性前缀</a></li><li><a href="#82-hack">8.2 Hack</a></li><li><a href="#83-expression">8.3 Expression</a></li></ul></li></ul></p><a id="more"></a><h2 id="1-背景"><a class="markdownIt-Anchor" href="#1-背景"></a> 1 背景</h2><p><a href="https://github.com/ecomfe/spec/blob/master/css-style-guide.md" target="_blank" rel="noopener">转自</a>。<br>CSS 作为网页样式的描述语言，在百度一直有着广泛的应用。本文档的目标是使 CSS 代码风格保持一致，容易被理解和被维护。</p><p>虽然本文档是针对 CSS 设计的，但是在使用各种 CSS 的预编译器(如 less、sass、stylus 等)时，适用的部分也应尽量遵循本文档的约定。</p><h2 id="2-代码风格"><a class="markdownIt-Anchor" href="#2-代码风格"></a> 2 代码风格</h2><h3 id="21-文件"><a class="markdownIt-Anchor" href="#21-文件"></a> 2.1 文件</h3><p><strong>[建议] <code>CSS</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</strong></p><p>解释：</p><p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p><h3 id="22-缩进"><a class="markdownIt-Anchor" href="#22-缩进"></a> 2.2 缩进</h3><p><strong>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23-空格"><a class="markdownIt-Anchor" href="#23-空格"></a> 2.3 空格</h3><p><strong>[强制] <code>选择器</code> 与 <code>{</code> 之间必须包含空格。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>属性名</code> 与之后的 <code>:</code> 之间不允许包含空格， <code>:</code> 与 <code>属性值</code> 之间必须包含空格。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin</span>: 0;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>列表型属性值</code> 书写在单行时，<code>,</code> 后必须跟一个空格。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Arial</span>, <span class="selector-tag">sans-serif</span>;</span><br></pre></td></tr></table></figure><h3 id="24-行长度"><a class="markdownIt-Anchor" href="#24-行长度"></a> 2.4 行长度</h3><p><strong>[强制] 每行不得超过 <code>120</code> 个字符，除非单行不可分割。</strong></p><p>解释：</p><p>常见不可分割的场景为URL超长。</p><p><strong>[建议] 对于超长的样式，在样式值的 <code>空格</code> 处或 <code>,</code> 后换行，建议按逻辑分组。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 不同属性值按逻辑分组 */</span></span><br><span class="line"><span class="selector-tag">background</span>:</span><br><span class="line">    <span class="selector-tag">transparent</span> <span class="selector-tag">url</span>(<span class="selector-tag">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class="line">    <span class="selector-tag">no-repeat</span> 0 0;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 可重复多次的属性，每次重复一行 */</span></span><br><span class="line"><span class="selector-tag">background-image</span>:</span><br><span class="line">    <span class="selector-tag">url</span>(<span class="selector-tag">aVeryVeryVeryLongUrlIsPlacedHere</span>)</span><br><span class="line">    <span class="selector-tag">url</span>(<span class="selector-tag">anotherVeryVeryVeryLongUrlIsPlacedHere</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类似函数的属性值可以根据函数调用的缩进进行 */</span></span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">-webkit-gradient</span>(</span><br><span class="line">    <span class="selector-tag">linear</span>,</span><br><span class="line">    <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>,</span><br><span class="line">    <span class="selector-tag">left</span> <span class="selector-tag">top</span>,</span><br><span class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.04</span>, <span class="selector-tag">rgb</span>(88,94,124)),</span><br><span class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.52</span>, <span class="selector-tag">rgb</span>(115,123,162))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="25-选择器"><a class="markdownIt-Anchor" href="#25-选择器"></a> 2.5 选择器</h3><p><strong>[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.post</span>,</span><br><span class="line"><span class="selector-class">.page</span>,</span><br><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.post</span>, <span class="selector-class">.page</span>, <span class="selector-class">.comment</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>&gt;</code>、<code>+</code>、<code>~</code> 选择器的两边各保留一个空格。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">main</span> &gt; <span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> + <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">main</span>&gt;<span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span>+<span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span>~<span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 属性选择器中的值必须用双引号包围。</strong></p><p>解释：</p><p>不允许使用单引号，不允许不使用引号。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[character="juliet"]</span> &#123;</span><br><span class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[character='juliet']</span> &#123;</span><br><span class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="26-属性"><a class="markdownIt-Anchor" href="#26-属性"></a> 2.6 属性</h3><p><strong>[强制] 属性定义必须另起一行。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 属性定义后必须以分号结尾。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-通用"><a class="markdownIt-Anchor" href="#3-通用"></a> 3 通用</h2><h3 id="31-选择器"><a class="markdownIt-Anchor" href="#31-选择器"></a> 3.1 选择器</h3><p><strong>[强制] 如无必要，不得为 <code>id</code>、<code>class</code> 选择器添加类型选择器进行限定。</strong></p><p>解释：</p><p>在性能和维护性上，都有一定的影响。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-id">#error</span>,</span><br><span class="line"><span class="selector-class">.danger-message</span> &#123;</span><br><span class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">dialog</span><span class="selector-id">#error</span>,</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.danger-message</span> &#123;</span><br><span class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 选择器的嵌套层级应不大于 <code>3</code> 级，位置靠后的限定条件应尽可能精确。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-class">.avatar</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.page</span> <span class="selector-class">.header</span> <span class="selector-class">.login</span> <span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.comment</span> <span class="selector-tag">div</span> * &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="32-属性缩写"><a class="markdownIt-Anchor" href="#32-属性缩写"></a> 3.2 属性缩写</h3><p><strong>[建议] 在可以使用缩写的情况下，尽量使用属性缩写。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 使用 <code>border</code> / <code>margin</code> / <code>padding</code> 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。</strong></p><p>解释：</p><p><code>border</code> / <code>margin</code> / <code>padding</code> 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* centering &lt;article class="page"&gt; horizontally and highlight featured ones */</span></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.featured</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#69c</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> auto; <span class="comment">/* introducing redundancy */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.featured</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#69c</span>; <span class="comment">/* introducing redundancy */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="33-属性书写顺序"><a class="markdownIt-Anchor" href="#33-属性书写顺序"></a> 3.3 属性书写顺序</h3><p><strong>[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 <code>Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果）</code> 的顺序书写，以提高代码的可读性。</strong></p><p>解释：</p><ul><li>Formatting Model 相关属性包括：<code>position</code> / <code>top</code> / <code>right</code> / <code>bottom</code> / <code>left</code> / <code>float</code> / <code>display</code> / <code>overflow</code> 等</li><li>Box Model 相关属性包括：<code>border</code> / <code>margin</code> / <code>padding</code> / <code>width</code> / <code>height</code> 等</li><li>Typographic 相关属性包括：<code>font</code> / <code>line-height</code> / <code>text-align</code> / <code>word-wrap</code> 等</li><li>Visual 相关属性包括：<code>background</code> / <code>color</code> / <code>transition</code> / <code>list-style</code> 等</li></ul><p>另外，如果包含 <code>content</code> 属性，应放在最前面。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="comment">/* formatting model: positioning schemes / offsets / z-indexes / display / ...  */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* box model: sizes / margins / paddings / borders / ...  */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* typographic: font / aligns / text styles / ... */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* visual: colors / shadows / gradients / ... */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: color <span class="number">1s</span>;</span><br><span class="line">       <span class="attribute">-moz-transition</span>: color <span class="number">1s</span>;</span><br><span class="line">            <span class="attribute">transition</span>: color <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="34-清除浮动"><a class="markdownIt-Anchor" href="#34-清除浮动"></a> 3.4 清除浮动</h3><p><strong>[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 <code>clear</code> 或触发 <code>BFC</code> 的方式进行 <code>clearfix</code>。尽量不使用增加空标签的方式。</strong></p><p>解释：</p><p>触发 BFC 的方式很多，常见的有：</p><ul><li>float 非 none</li><li>position 非 static</li><li>overflow 非 visible</li></ul><p>如希望使用更小副作用的清除浮动方法，参见 <a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="noopener">A new micro clearfix hack</a> 一文。</p><p>另需注意，对已经触发 BFC 的元素不需要再进行 clearfix。</p><h3 id="35-important"><a class="markdownIt-Anchor" href="#35-important"></a> 3.5 !important</h3><p><strong>[建议] 尽量不使用 <code>!important</code> 声明。</strong></p><p><strong>[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 <code>!important</code> 定义样式。</strong></p><p>解释：</p><p>必须注意的是，仅在设计上 <code>确实不允许任何其它场景覆盖样式</code> 时，才使用内联的 <code>!important</code> 样式。通常在第三方环境的应用中使用这种方案。下面的 <code>z-index</code> 章节是其中一个特殊场景的典型样例。</p><h3 id="36-z-index"><a class="markdownIt-Anchor" href="#36-z-index"></a> 3.6 z-index</h3><p><strong>[建议] 将 <code>z-index</code> 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。</strong></p><p>解释：</p><p>同层的多个元素，如多个由用户输入触发的 Dialog，在该层级内使用相同的 <code>z-index</code> 或递增 <code>z-index</code>。</p><p>建议每层包含100个 <code>z-index</code> 来容纳足够的元素，如果每层元素较多，可以调整这个数值。</p><p><strong>[建议] 在可控环境下，期望显示在最上层的元素，<code>z-index</code> 指定为 <code>999999</code>。</strong></p><p>解释：</p><p>可控环境分成两种，一种是自身产品线环境；还有一种是可能会被其他产品线引用，但是不会被外部第三方的产品引用。</p><p>不建议取值为 <code>2147483647</code>。以便于自身产品线被其他产品线引用时，当遇到层级覆盖冲突的情况，留出向上调整的空间。</p><p><strong>[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 <code>!important</code>，将 <code>z-index</code> 指定为 <code>2147483647</code>。</strong></p><p>解释：</p><p>第三方环境对于开发者来说完全不可控。在第三方环境下的元素，为了保证元素不被其页面其他样式定义覆盖，需要采用此做法。</p><h2 id="4-值与单位"><a class="markdownIt-Anchor" href="#4-值与单位"></a> 4 值与单位</h2><h3 id="41-文本"><a class="markdownIt-Anchor" href="#41-文本"></a> 4.1 文本</h3><p><strong>[强制] 文本内容必须用双引号包围。</strong></p><p>解释：</p><p>文本类型的内容可能在选择器、属性值等内容中。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"“"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'“'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="42-数值"><a class="markdownIt-Anchor" href="#42-数值"></a> 4.2 数值</h3><p><strong>[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 <code>0</code>。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">panel</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">panel</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="43-url"><a class="markdownIt-Anchor" href="#43-url"></a> 4.3 url()</h3><p><strong>[强制] <code>url()</code> 函数中的路径不加引号。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(bg.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] <code>url()</code> 函数中的绝对路径可省去协议名。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(//baidu.com/img/bg.png) no-repeat <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="44-长度"><a class="markdownIt-Anchor" href="#44-长度"></a> 4.4 长度</h3><p><strong>[强制] 长度为 <code>0</code> 时须省略单位。 (也只有长度单位可省)</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="45-颜色"><a class="markdownIt-Anchor" href="#45-颜色"></a> 4.5 颜色</h3><p><strong>[强制] RGB颜色值必须使用十六进制记号形式 <code>#rrggbb</code>。不允许使用 <code>rgb()</code>。</strong></p><p>解释：</p><p>带有alpha的颜色信息可以使用 <code>rgba()</code>。使用 <code>rgba()</code> 时每个逗号后必须保留一个空格。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0, 128, 0, .3);</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#008000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0,128,0,.3);</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(0, 128, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 颜色值可以缩写时，必须使用缩写形式。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aaccaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 颜色值不允许使用命名色值。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90EE90</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="46-2d-位置"><a class="markdownIt-Anchor" href="#46-2d-位置"></a> 4.6 2D 位置</h3><p><strong>[强制] 必须同时给出水平和垂直方向的位置。</strong></p><p>解释：</p><p>2D 位置初始值为 <code>0% 0%</code>，但在只有一个方向的值时，另一个方向的值会被解析为 center。为避免理解上的困扰，应同时给出两个方向的值。<a href="http://www.w3.org/TR/CSS21/colors.html#propdef-background-position" target="_blank" rel="noopener">background-position属性值的定义</a></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: center top; <span class="comment">/* 50% 0% */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: top; <span class="comment">/* 50% 0% */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-文本编排"><a class="markdownIt-Anchor" href="#5-文本编排"></a> 5 文本编排</h2><h3 id="51-字体族"><a class="markdownIt-Anchor" href="#51-字体族"></a> 5.1 字体族</h3><p><strong>[强制] <code>font-family</code> 属性中的字体族名称应使用字体的英文 <code>Family Name</code>，其中如有空格，须放置在引号中。</strong></p><p>解释：</p><p>所谓英文 Family Name，为字体文件的一个元数据，常见名称如下：</p><table><thead><tr><th>字体</th><th>操作系统</th><th>Family Name</th></tr></thead><tbody><tr><td>宋体 (中易宋体)</td><td>Windows</td><td>SimSun</td></tr><tr><td>黑体 (中易黑体)</td><td>Windows</td><td>SimHei</td></tr><tr><td>微软雅黑</td><td>Windows</td><td>Microsoft YaHei</td></tr><tr><td>微软正黑</td><td>Windows</td><td>Microsoft JhengHei</td></tr><tr><td>华文黑体</td><td>Mac/iOS</td><td>STHeiti</td></tr><tr><td>冬青黑体</td><td>Mac/iOS</td><td>Hiragino Sans GB</td></tr><tr><td>文泉驿正黑</td><td>Linux</td><td>WenQuanYi Zen Hei</td></tr><tr><td>文泉驿微米黑</td><td>Linux</td><td>WenQuanYi Micro Hei</td></tr></tbody></table><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>font-family</code> 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( <code>serif</code> / <code>sans-serif</code> )。</strong></p><p>解释：</p><p>更详细说明可参考<a href="http://www.zhihu.com/question/19911793/answer/13329819" target="_blank" rel="noopener">本文</a>。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Display according to platform */</span></span><br><span class="line"><span class="selector-class">.article</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Specific for most platforms */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Arial, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"WenQuanYi Micro Hei"</span>, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>font-family</code> 不区分大小写，但在同一个项目中，同样的 <code>Family Name</code> 大小写必须统一。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="52-字号"><a class="markdownIt-Anchor" href="#52-字号"></a> 5.2 字号</h3><p><strong>[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 <code>12px</code>。</strong></p><p>解释：</p><p>由于 Windows 的字体渲染机制，小于 <code>12px</code> 的文字显示效果极差、难以辨认。</p><h3 id="53-字体风格"><a class="markdownIt-Anchor" href="#53-字体风格"></a> 5.3 字体风格</h3><p><strong>[建议] 需要在 Windows 平台显示的中文内容，不要使用除 <code>normal</code> 外的 <code>font-style</code>。其他平台也应慎用。</strong></p><p>解释：</p><p>由于中文字体没有 <code>italic</code> 风格的实现，所有浏览器下都会 fallback 到 <code>obilique</code> 实现 (自动拟合为斜体)，小字号下 (特别是 Windows 下会在小字号下使用点阵字体的情况下) 显示效果差，造成阅读困难。</p><h3 id="54-字重"><a class="markdownIt-Anchor" href="#54-字重"></a> 5.4 字重</h3><p><strong>[强制] <code>font-weight</code> 属性必须使用数值方式描述。</strong></p><p>解释：</p><p>CSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 <code>400</code> 和 <code>700</code> 两档，分别等价于关键词 <code>normal</code> 和 <code>bold</code>。</p><p>浏览器本身使用一系列<a href="http://www.w3.org/TR/CSS21/fonts.html#propdef-font-weight" target="_blank" rel="noopener">启发式规则</a>来进行匹配，在 <code>&lt;700</code> 时一般匹配字体的 Regular 字重，<code>&gt;=700</code> 时匹配 Bold 字重。</p><p>但已有浏览器开始支持 <code>=600</code> 时匹配 Semibold 字重 (见<a href="http://justineo.github.io/slideshows/font/#/3/15" target="_blank" rel="noopener">此表</a>)，故使用数值描述增加了灵活性，也更简短。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="55-行高"><a class="markdownIt-Anchor" href="#55-行高"></a> 5.5 行高</h3><p><strong>[建议] <code>line-height</code> 在定义文本段落时，应使用数值。</strong></p><p>解释：</p><p>将 <code>line-height</code> 设置为数值，浏览器会基于当前元素设置的 <code>font-size</code> 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 <code>font-size</code> 都需要设置 <code>line-height</code>。</p><p>当 <code>line-height</code> 用于控制垂直居中时，还是应该设置成与容器高度一致。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-变换与动画"><a class="markdownIt-Anchor" href="#6-变换与动画"></a> 6 变换与动画</h2><p><strong>[强制] 使用 <code>transition</code> 时应指定 <code>transition-property</code>。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: color <span class="number">1s</span>, border-color <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。</strong></p><p>解释：</p><p>见<a href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/" target="_blank" rel="noopener">本文</a>，在可能的情况下应选择这样四种变换：</p><ul><li><code>transform: translate(npx, npx);</code></li><li><code>transform: scale(n);</code></li><li><code>transform: rotate(ndeg);</code></li><li><code>opacity: 0..1;</code></li></ul><p>典型的，可以使用 <code>translate</code> 来代替 <code>left</code> 作为动画属性。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* good */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(20px); <span class="comment">/* move right for 20px */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bad */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: left <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20px</span>; <span class="comment">/* move right for 20px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-响应式"><a class="markdownIt-Anchor" href="#7-响应式"></a> 7 响应式</h2><p><strong>[强制] <code>Media Query</code> 不得单独编排，必须与相关的规则一起定义。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Good */</span></span><br><span class="line"><span class="comment">/* header styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* header styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* main styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* main styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* footer styles */</span></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* footer styles */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bad */</span></span><br><span class="line"><span class="comment">/* header styles */</span></span><br><span class="line"><span class="comment">/* main styles */</span></span><br><span class="line"><span class="comment">/* footer styles */</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (...) &#123;</span><br><span class="line">    <span class="comment">/* header styles */</span></span><br><span class="line">    <span class="comment">/* main styles */</span></span><br><span class="line">    <span class="comment">/* footer styles */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>Media Query</code> 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span></span><br><span class="line">(-webkit-min-device-pixel-ratio: 2), /* Webkit-based browsers */</span><br><span class="line">(<span class="selector-tag">min--moz-device-pixel-ratio</span>: 2),    <span class="comment">/* Older Firefox browsers (prior to Firefox 16) */</span></span><br><span class="line">(<span class="selector-tag">min-resolution</span>: 2<span class="selector-tag">dppx</span>),             <span class="comment">/* The standard way */</span></span><br><span class="line">(<span class="selector-tag">min-resolution</span>: 192<span class="selector-tag">dpi</span>) &#123;           <span class="comment">/* dppx fallback */</span></span><br><span class="line">    <span class="comment">/* Retina-specific stuff here */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。</strong></p><h2 id="8-兼容性"><a class="markdownIt-Anchor" href="#8-兼容性"></a> 8 兼容性</h2><h3 id="81-属性前缀"><a class="markdownIt-Anchor" href="#81-属性前缀"></a> 8.1 属性前缀</h3><p><strong>[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。</strong></p><p>解释：</p><p>标准属性放在最后，按冒号对齐方便阅读，也便于在编辑器内进行多行编辑。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">       <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">            <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="82-hack"><a class="markdownIt-Anchor" href="#82-hack"></a> 8.2 Hack</h3><p><strong>[建议] 需要添加 <code>hack</code> 时应尽可能考虑是否可以采用其他方式解决。</strong></p><p>解释：</p><p>如果能通过合理的 HTML 结构或使用其他的 CSS 定义达到理想的样式，则不应该使用 hack 手段解决问题。通常 hack 会导致维护成本的增加。</p><p><strong>[建议] 尽量使用 <code>选择器 hack</code> 处理兼容性，而非 <code>属性 hack</code>。</strong></p><p>解释：</p><p>尽量使用符合 CSS 语法的 selector hack，可以避免一些第三方库无法识别 hack 语法的问题。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* IE 7 */</span></span><br><span class="line">*<span class="selector-pseudo">:first-child</span> + <span class="selector-tag">html</span> <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE 6 */</span></span><br><span class="line">* <span class="selector-tag">html</span> <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 尽量使用简单的 <code>属性 hack</code>。</strong></p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">_display</span>: inline; <span class="comment">/* fix double margin */</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    *zoom: 1; /* triggering hasLayout */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="83-expression"><a class="markdownIt-Anchor" href="#83-expression"></a> 8.3 Expression</h3><p><strong>[强制] 禁止使用 <code>Expression</code>。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E8%83%8C%E6%99%AF&quot;&gt;1 背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC&quot;&gt;2 代码风格&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-%E6%96%87%E4%BB%B6&quot;&gt;2.1 文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-%E7%BC%A9%E8%BF%9B&quot;&gt;2.2 缩进&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-%E7%A9%BA%E6%A0%BC&quot;&gt;2.3 空格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#24-%E8%A1%8C%E9%95%BF%E5%BA%A6&quot;&gt;2.4 行长度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#25-%E9%80%89%E6%8B%A9%E5%99%A8&quot;&gt;2.5 选择器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#26-%E5%B1%9E%E6%80%A7&quot;&gt;2.6 属性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E9%80%9A%E7%94%A8&quot;&gt;3 通用&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-%E9%80%89%E6%8B%A9%E5%99%A8&quot;&gt;3.1 选择器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-%E5%B1%9E%E6%80%A7%E7%BC%A9%E5%86%99&quot;&gt;3.2 属性缩写&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33-%E5%B1%9E%E6%80%A7%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F&quot;&gt;3.3 属性书写顺序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#34-%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8&quot;&gt;3.4 清除浮动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#35-important&quot;&gt;3.5 !important&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#36-z-index&quot;&gt;3.6 z-index&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%E5%80%BC%E4%B8%8E%E5%8D%95%E4%BD%8D&quot;&gt;4 值与单位&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#41-%E6%96%87%E6%9C%AC&quot;&gt;4.1 文本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#42-%E6%95%B0%E5%80%BC&quot;&gt;4.2 数值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#43-url&quot;&gt;4.3 url()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#44-%E9%95%BF%E5%BA%A6&quot;&gt;4.4 长度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#45-%E9%A2%9C%E8%89%B2&quot;&gt;4.5 颜色&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#46-2d-%E4%BD%8D%E7%BD%AE&quot;&gt;4.6 2D 位置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%E6%96%87%E6%9C%AC%E7%BC%96%E6%8E%92&quot;&gt;5 文本编排&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#51-%E5%AD%97%E4%BD%93%E6%97%8F&quot;&gt;5.1 字体族&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#52-%E5%AD%97%E5%8F%B7&quot;&gt;5.2 字号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#53-%E5%AD%97%E4%BD%93%E9%A3%8E%E6%A0%BC&quot;&gt;5.3 字体风格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#54-%E5%AD%97%E9%87%8D&quot;&gt;5.4 字重&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#55-%E8%A1%8C%E9%AB%98&quot;&gt;5.5 行高&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-%E5%8F%98%E6%8D%A2%E4%B8%8E%E5%8A%A8%E7%94%BB&quot;&gt;6 变换与动画&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-%E5%93%8D%E5%BA%94%E5%BC%8F&quot;&gt;7 响应式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8-%E5%85%BC%E5%AE%B9%E6%80%A7&quot;&gt;8 兼容性&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#81-%E5%B1%9E%E6%80%A7%E5%89%8D%E7%BC%80&quot;&gt;8.1 属性前缀&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#82-hack&quot;&gt;8.2 Hack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#83-expression&quot;&gt;8.3 Expression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="开发规范" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/css/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="开发规范" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>JS 开发规范指导手册</title>
    <link href="http://yoursite.com/2018/03/13/js-style-guide/"/>
    <id>http://yoursite.com/2018/03/13/js-style-guide/</id>
    <published>2018-03-13T14:55:13.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E8%83%8C%E6%99%AF">1 背景</a></li><li><a href="#2-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC">2 代码风格</a><ul><li><a href="#21-%E6%96%87%E4%BB%B6">2.1 文件</a></li><li><a href="#22-%E7%BB%93%E6%9E%84">2.2 结构</a><ul><li><a href="#221-%E7%BC%A9%E8%BF%9B">2.2.1 缩进</a></li><li><a href="#222-%E7%A9%BA%E6%A0%BC">2.2.2 空格</a></li><li><a href="#223-%E6%8D%A2%E8%A1%8C">2.2.3 换行</a></li><li><a href="#224-%E8%AF%AD%E5%8F%A5">2.2.4 语句</a></li><li><a href="#225-%E5%9D%97">2.2.5 块</a></li><li><a href="#226-%E9%80%97%E5%8F%B7">2.2.6 逗号</a></li><li><a href="#227-%E5%88%86%E5%8F%B7">2.2.7 分号</a></li></ul></li><li><a href="#23-%E5%91%BD%E5%90%8D">2.3 命名</a></li><li><a href="#24-%E6%B3%A8%E9%87%8A">2.4 注释</a><ul><li><a href="#241-%E5%8D%95%E8%A1%8C%E6%B3%A8%E9%87%8A">2.4.1 单行注释</a></li><li><a href="#242-%E5%A4%9A%E8%A1%8C%E6%B3%A8%E9%87%8A">2.4.2 多行注释</a></li><li><a href="#243-%E6%96%87%E6%A1%A3%E5%8C%96%E6%B3%A8%E9%87%8A">2.4.3 文档化注释</a></li><li><a href="#244-%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89">2.4.4 类型定义</a></li><li><a href="#245-%E6%96%87%E4%BB%B6%E6%B3%A8%E9%87%8A">2.4.5 文件注释</a></li><li><a href="#246-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%A8%E9%87%8A">2.4.6 命名空间注释</a></li><li><a href="#247-%E7%B1%BB%E6%B3%A8%E9%87%8A">2.4.7 类注释</a></li><li><a href="#248-%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A">2.4.8 函数/方法注释</a></li><li><a href="#249-%E4%BA%8B%E4%BB%B6%E6%B3%A8%E9%87%8A">2.4.9 事件注释</a></li><li><a href="#2410-%E5%B8%B8%E9%87%8F%E6%B3%A8%E9%87%8A">2.4.10 常量注释</a></li><li><a href="#2411-%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A">2.4.11 复杂类型注释</a></li><li><a href="#2412-amd-%E6%A8%A1%E5%9D%97%E6%B3%A8%E9%87%8A">2.4.12 AMD 模块注释</a></li><li><a href="#2413-%E7%BB%86%E8%8A%82%E6%B3%A8%E9%87%8A">2.4.13 细节注释</a></li></ul></li></ul></li><li><a href="#3-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7">3 语言特性</a><ul><li><a href="#31-%E5%8F%98%E9%87%8F">3.1 变量</a></li><li><a href="#32-%E6%9D%A1%E4%BB%B6">3.2 条件</a></li><li><a href="#33-%E5%BE%AA%E7%8E%AF">3.3 循环</a></li><li><a href="#34-%E7%B1%BB%E5%9E%8B">3.4 类型</a><ul><li><a href="#341-%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B">3.4.1 类型检测</a></li><li><a href="#342-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">3.4.2 类型转换</a></li></ul></li><li><a href="#35-%E5%AD%97%E7%AC%A6%E4%B8%B2">3.5 字符串</a></li><li><a href="#36-%E5%AF%B9%E8%B1%A1">3.6 对象</a></li><li><a href="#37-%E6%95%B0%E7%BB%84">3.7 数组</a></li><li><a href="#38-%E5%87%BD%E6%95%B0">3.8 函数</a><ul><li><a href="#381-%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F">3.8.1 函数表达式</a></li><li><a href="#382-%E5%87%BD%E6%95%B0%E9%95%BF%E5%BA%A6">3.8.2 函数长度</a></li><li><a href="#383-%E5%8F%82%E6%95%B0%E8%AE%BE%E8%AE%A1">3.8.3 参数设计</a></li><li><a href="#384-%E9%97%AD%E5%8C%85">3.8.4 闭包</a></li><li><a href="#385-%E7%A9%BA%E5%87%BD%E6%95%B0">3.8.5 空函数</a></li></ul></li><li><a href="#39-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">3.9 面向对象</a></li><li><a href="#310-%E5%8A%A8%E6%80%81%E7%89%B9%E6%80%A7">3.10 动态特性</a><ul><li><a href="#3101-eval">3.10.1 eval</a></li><li><a href="#3102-%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81">3.10.2 动态执行代码</a></li><li><a href="#3103-with">3.10.3 with</a></li><li><a href="#3104-delete">3.10.4 delete</a></li><li><a href="#3105-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7">3.10.5 对象属性</a></li></ul></li><li><a href="#311-%E5%AD%98%E5%8F%96%E5%99%A8">3.11 存取器</a></li></ul></li><li><a href="#4-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83">4 浏览器环境</a><ul><li><a href="#41-%E6%A8%A1%E5%9D%97%E5%8C%96">4.1 模块化</a><ul><li><a href="#411-amd">4.1.1 AMD</a></li><li><a href="#412-define">4.1.2 define</a></li><li><a href="#413-require">4.1.3 require</a></li></ul></li><li><a href="#42-dom">4.2 DOM</a><ul><li><a href="#421-%E5%85%83%E7%B4%A0%E8%8E%B7%E5%8F%96">4.2.1 元素获取</a></li><li><a href="#422-%E6%A0%B7%E5%BC%8F%E8%8E%B7%E5%8F%96">4.2.2 样式获取</a></li><li><a href="#423-%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE">4.2.3 样式设置</a></li><li><a href="#424-dom-%E6%93%8D%E4%BD%9C">4.2.4 DOM 操作</a></li><li><a href="#425-dom-%E4%BA%8B%E4%BB%B6">4.2.5 DOM 事件</a></li></ul></li></ul></li><li><a href="#5-jquery">5 jQuery</a><ul><li><a href="#51-jquery-%E5%8F%98%E9%87%8F">5.1 jQuery 变量</a></li><li><a href="#52-%E9%80%89%E6%8B%A9%E5%99%A8">5.2 选择器</a></li><li><a href="#53-dom-%E6%93%8D%E4%BD%9C">5.3 DOM 操作</a></li><li><a href="#54-%E4%BA%8B%E4%BB%B6">5.4 事件</a></li><li><a href="#55-ajax">5.5 Ajax</a></li><li><a href="#56-%E9%93%BE%E5%BC%8F%E5%86%99%E6%B3%95">5.6 链式写法</a></li></ul></li></ul></p><a id="more"></a><h2 id="1-背景"><a class="markdownIt-Anchor" href="#1-背景"></a> 1 背景</h2><p>在前端项目开发中，JavaScript 的应用特别广泛，而为了让代码更具可读性，好的代码风格显示尤为重要。</p><p>虽然本文档是针对JavaScript设计的，但是在使用各种JavaScript的预编译语言时(如ES6，TypeScript等)时，适用的部分也应尽量遵循本文档的约定。</p><h2 id="2-代码风格"><a class="markdownIt-Anchor" href="#2-代码风格"></a> 2 代码风格</h2><h3 id="21-文件"><a class="markdownIt-Anchor" href="#21-文件"></a> 2.1 文件</h3><p><strong>[建议] <code>JavaScript</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</strong></p><p>解释：<br>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p><p><strong>[建议] 在文件结尾处，保留一个空行。</strong></p><h3 id="22-结构"><a class="markdownIt-Anchor" href="#22-结构"></a> 2.2 结构</h3><h4 id="221-缩进"><a class="markdownIt-Anchor" href="#221-缩进"></a> 2.2.1 缩进</h4><p><strong>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</strong></p><p><strong>[强制] <code>switch</code> 下的 <code>case</code> 和 <code>default</code> 必须增加一个缩进层级。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (variable) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">switch</span> (variable) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="222-空格"><a class="markdownIt-Anchor" href="#222-空格"></a> 2.2.2 空格</h4><p><strong>[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = !arr.length;</span><br><span class="line">a++;</span><br><span class="line">a = b + c;</span><br></pre></td></tr></table></figure><p><strong>[强制] 用作代码块起始的左花括号 <code>{</code> 前必须有一个空格。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>if / else / for / while / function / switch / do / try / catch / finally</code> 关键字后，必须有一个空格。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(condition) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><strong>[强制] 在对象创建时，属性中的 <code>:</code> 之后必须有空格，<code>:</code> 之前不允许有空格。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c :<span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] 函数声明、具名函数表达式、函数调用中，函数名和 <code>(</code> 之间不允许有空格。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">funcName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">funcName ();</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>,</code> 和 <code>;</code> 前不允许有空格。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">callFunc(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">callFunc(a , b) ;</span><br></pre></td></tr></table></figure><p><strong>[强制] 在函数调用、函数声明、括号表达式、属性访问、<code>if / for / while / switch / catch</code> 等语句中，<code>()</code> 和 <code>[]</code> 内紧贴括号部分不允许有空格。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">callFunc(param1, param2, param3);</span><br><span class="line"></span><br><span class="line">save(<span class="keyword">this</span>.list[<span class="keyword">this</span>.indexes[i]]);</span><br><span class="line"></span><br><span class="line">needIncream &amp;&amp; (variable += increament);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num &gt; list.length) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">callFunc( param1, param2, param3 );</span><br><span class="line"></span><br><span class="line">save( <span class="keyword">this</span>.list[ <span class="keyword">this</span>.indexes[ i ] ] );</span><br><span class="line"></span><br><span class="line">needIncreament &amp;&amp; ( variable += increament );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( num &gt; list.length ) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( len-- ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 单行声明的数组与对象，如果包含元素，<code>{}</code> 和 <code>[]</code> 内紧贴括号部分不允许包含空格。</strong></p><p>解释：</p><p>声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'obj'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    name: <span class="string">'obj'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    sex: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [ ];</span><br><span class="line"><span class="keyword">var</span> arr2 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">'obj'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;<span class="attr">name</span>: <span class="string">'obj'</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] 行尾不得有多余的空格。</strong></p><h4 id="223-换行"><a class="markdownIt-Anchor" href="#223-换行"></a> 2.2.3 换行</h4><p><strong>[强制] 每个独立语句结束后必须换行。</strong></p><p><strong>[强制] 每行不得超过 <code>120</code> 个字符。</strong></p><p>解释：</p><p>超长的不可分割的代码允许例外，比如复杂的正则表达式。长字符串不在例外之列。</p><p><strong>[强制] 运算符处换行时，运算符必须在新行的行首。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (user.isAuthenticated()</span><br><span class="line">    &amp;&amp; user.isInRole(<span class="string">'admin'</span>)</span><br><span class="line">    &amp;&amp; user.hasAuthority(<span class="string">'add-admin'</span>)</span><br><span class="line">    || user.hasAuthority(<span class="string">'delete-admin'</span>)</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = number1 + number2 + number3</span><br><span class="line">    + number4 + number5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (user.isAuthenticated() &amp;&amp;</span><br><span class="line">    user.isInRole(<span class="string">'admin'</span>) &amp;&amp;</span><br><span class="line">    user.hasAuthority(<span class="string">'add-admin'</span>) ||</span><br><span class="line">    user.hasAuthority(<span class="string">'delete-admin'</span>)) &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = number1 + number2 + number3 +</span><br><span class="line">    number4 + number5;</span><br></pre></td></tr></table></figure><p><strong>[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for语句等场景中，不允许在 <code>,</code> 或 <code>;</code> 前换行。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(</span><br><span class="line">    aVeryVeryLongArgument,</span><br><span class="line">    anotherVeryLongArgument,</span><br><span class="line">    callback</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">    , <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">    , <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(</span><br><span class="line">    aVeryVeryLongArgument</span><br><span class="line">    , anotherVeryLongArgument</span><br><span class="line">    , callback</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅为按逻辑换行的示例，不代表setStyle的最优实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyle</span>(<span class="params">element, property, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    element.style[property] = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 在语句的行长度超过 <code>120</code> 时，根据逻辑条件合理缩进。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 较复杂的逻辑条件组合，将每个条件独立一行，逻辑运算符放置在行首进行分隔，或将部分逻辑按逻辑组合进行分隔。</span></span><br><span class="line"><span class="comment">// 建议最终将右括号 ) 与左大括号 &#123; 放在独立一行，保证与 if 内语句块能容易视觉辨识。</span></span><br><span class="line"><span class="keyword">if</span> (user.isAuthenticated()</span><br><span class="line">    &amp;&amp; user.isInRole(<span class="string">'admin'</span>)</span><br><span class="line">    &amp;&amp; user.hasAuthority(<span class="string">'add-admin'</span>)</span><br><span class="line">    || user.hasAuthority(<span class="string">'delete-admin'</span>)</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按一定长度截断字符串，并使用 + 运算符进行连接。</span></span><br><span class="line"><span class="comment">// 分隔字符串尽量按语义进行，如不要在一个完整的名词中间断开。</span></span><br><span class="line"><span class="comment">// 特别的，对于HTML片段的拼接，通过缩进，保持和HTML相同的结构。</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="string">''</span> <span class="comment">// 此处用一个空字符串，以便整个HTML片段都在新行严格对齐</span></span><br><span class="line">    + <span class="string">'&lt;article&gt;'</span></span><br><span class="line">    +     <span class="string">'&lt;h1&gt;Title here&lt;/h1&gt;'</span></span><br><span class="line">    +     <span class="string">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span></span><br><span class="line">    +     <span class="string">'&lt;footer&gt;Complete&lt;/footer&gt;'</span></span><br><span class="line">    + <span class="string">'&lt;/article&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可使用数组来进行拼接，相对 + 更容易调整缩进。</span></span><br><span class="line"><span class="keyword">var</span> html = [</span><br><span class="line">    <span class="string">'&lt;article&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;h1&gt;Title here&lt;/h1&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;footer&gt;Complete&lt;/footer&gt;'</span>,</span><br><span class="line">    <span class="string">'&lt;/article&gt;'</span></span><br><span class="line">];</span><br><span class="line">html = html.join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当参数过多时，将每个参数独立写在一行上，并将结束的右括号 ) 独立一行。</span></span><br><span class="line"><span class="comment">// 所有参数必须增加一个缩进。</span></span><br><span class="line">foo(</span><br><span class="line">    aVeryVeryLongArgument,</span><br><span class="line">    anotherVeryLongArgument,</span><br><span class="line">    callback</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以按逻辑对参数进行组合。</span></span><br><span class="line"><span class="comment">// 最经典的是baidu.format函数，调用时将参数分为“模板”和“数据”两块</span></span><br><span class="line">baidu.format(</span><br><span class="line">    dateFormatTemplate,</span><br><span class="line">    year, month, date, hour, minute, second</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当函数调用时，如果有一个或以上参数跨越多行，应当每一个参数独立一行。</span></span><br><span class="line"><span class="comment">// 这通常出现在匿名函数或者对象初始化等作为参数时，如setTimeout函数等。</span></span><br><span class="line">setTimeout(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">200</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">order.data.read(</span><br><span class="line">    <span class="string">'id='</span> + me.model.id,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        me.attchToModel(data.result);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">300</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用较长时采用缩进进行调整。</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">    .find(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元运算符由3部分组成，因此其换行应当根据每个部分的长度不同，形成不同的情况。</span></span><br><span class="line"><span class="keyword">var</span> result = thisIsAVeryVeryLongCondition</span><br><span class="line">    ? resultA : resultB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = condition</span><br><span class="line">    ? thisIsAVeryVeryLongResult</span><br><span class="line">    : resultB;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组和对象初始化的混用，严格按照每个对象的 &#123; 和结束 &#125; 在独立一行的风格书写。</span></span><br><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><strong>[建议] 对于 <code>if...else...</code>、<code>try...catch...finally</code> 等语句，推荐使用在 <code>}</code> 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 在使用长方法链时进行换行缩进。使用前面的 <code>.</code> 强调这是方法调用，而不是新语句。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).</span><br><span class="line">  find(<span class="string">'.selected'</span>).</span><br><span class="line">    highlight().</span><br><span class="line">    end().</span><br><span class="line">  find(<span class="string">'.open'</span>).</span><br><span class="line">    updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">    .find(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end()</span><br><span class="line">    .find(<span class="string">'.open'</span>)</span><br><span class="line">    .updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">    .enter().append(<span class="string">'svg:svg'</span>)</span><br><span class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>)</span><br><span class="line">    .append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br></pre></td></tr></table></figure><h4 id="224-语句"><a class="markdownIt-Anchor" href="#224-语句"></a> 2.2.4 语句</h4><p><strong>[强制] 不得省略语句结束的分号。</strong></p><p><strong>[强制] 在 <code>if / else / for / do / while</code> 语句中，即使只有一行，也不得省略块 <code>{...}</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    callFunc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition) callFunc();</span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    callFunc();</span><br></pre></td></tr></table></figure><p><strong>[强制] 函数定义结束不允许添加分号。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是函数表达式，分号是不允许省略的。</span></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>IIFE</code> 必须在函数表达式外添加 <code>(</code>，非 <code>IIFE</code> 不得在函数表达式外添加 <code>(</code>。</strong></p><p>解释：</p><p>IIFE = Immediately-Invoked Function Expression.</p><p>额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> task = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// Code</span></span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Code</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="225-块"><a class="markdownIt-Anchor" href="#225-块"></a> 2.2.5 块</h4><p><strong>[强制] 使用大括号包裹所有的多行代码块。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFun</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 在块末和新语句前插入空行。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br></pre></td></tr></table></figure><h4 id="226-逗号"><a class="markdownIt-Anchor" href="#226-逗号"></a> 2.2.6 逗号</h4><p><strong>[强制] 禁止行首逗号。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> story = [</span><br><span class="line">    once</span><br><span class="line">  , upon</span><br><span class="line">  , aTime</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> story = [</span><br><span class="line">    once,</span><br><span class="line">    upon,</span><br><span class="line">    aTime</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Bob'</span></span><br><span class="line">  , <span class="attr">lastName</span>: <span class="string">'Parr'</span></span><br><span class="line">  , <span class="attr">heroName</span>: <span class="string">'Mr. Incredible'</span></span><br><span class="line">  , <span class="attr">superPower</span>: <span class="string">'strength'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Bob'</span>,</span><br><span class="line">    lastName: <span class="string">'Parr'</span>,</span><br><span class="line">    heroName: <span class="string">'Mr. Incredible'</span>,</span><br><span class="line">    superPower: <span class="string">'strength'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] 禁止额外的行末逗号。</strong></p><p>解释：</p><p>行末逗号，会在 IE6/7 和 IE9 怪异模式下引下问题，多余的逗号在某些 ES3 的实现里会增加数组的长度。在 ES5 中已经<a href="http://es5.github.io/#D" target="_blank" rel="noopener">澄清</a>。</p><blockquote><p>Edition 5 clarifies the fact that a trailing comma at the end of an ArrayInitialiser does not add to the length of the array. This is not a semantic change from Edition 3 but some implementations may have previously misinterpreted this.</p></blockquote><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Kevin'</span>,</span><br><span class="line">    lastName: <span class="string">'Flynn'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heroes = [</span><br><span class="line">    <span class="string">'Batman'</span>,</span><br><span class="line">    <span class="string">'Superman'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Kevin'</span>,</span><br><span class="line">    lastName: <span class="string">'Flynn'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heroes = [</span><br><span class="line">    <span class="string">'Batman'</span>,</span><br><span class="line">    <span class="string">'Superman'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="227-分号"><a class="markdownIt-Anchor" href="#227-分号"></a> 2.2.7 分号</h4><p><strong>[强制] 语句结束必须使用分号。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'Skywalker'</span></span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (防止函数在两个 IIFE 合并时被当成一个参数</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="23-命名"><a class="markdownIt-Anchor" href="#23-命名"></a> 2.3 命名</h3><p><strong>[强制] <code>变量</code> 使用 <a href="https://zh.wikipedia.org/zh-cn/%E9%A7%9D%E5%B3%B0%E5%BC%8F%E5%A4%A7%E5%B0%8F%E5%AF%AB" target="_blank" rel="noopener"><code>Camel命名法</code></a>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingModules = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>常量</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HTML_ENTITY = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>函数</code> 使用 <code>Camel命名法</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringFormat</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 函数的 <code>参数</code> 使用 <code>Camel命名法</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hear</span>(<span class="params">theBells</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>类</code> 使用 <code>Pascal命名法</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 类的 <code>方法 / 属性</code> 使用 <code>Camel命名法</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>枚举变量</code> 使用 <code>Pascal命名法</code>，<code>枚举的属性</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TargetState = &#123;</span><br><span class="line">    READING: <span class="number">1</span>,</span><br><span class="line">    READED: <span class="number">2</span>,</span><br><span class="line">    APPLIED: <span class="number">3</span>,</span><br><span class="line">    READY: <span class="number">4</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>命名空间</code> 使用 <code>Camel命名法</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">equipments.heavyWeapons = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">XMLParser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertHTML</span>(<span class="params">element, html</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpRequest = <span class="keyword">new</span> HTTPRequest();</span><br></pre></td></tr></table></figure><p><strong>[强制] <code>类名</code> 使用 <code>名词</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engine</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] <code>函数名</code> 使用 <code>动宾短语</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] <code>boolean</code> 类型的变量使用 <code>is</code> 或 <code>has</code> 开头。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isReady = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> hasMoreCommands = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><strong>[建议] <code>Promise对象</code> 用 <code>动宾短语的进行时</code> 表达。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingData = ajax.get(<span class="string">'url'</span>);</span><br><span class="line">loadingData.then(callback);</span><br></pre></td></tr></table></figure><p><strong>[建议] 不要使用下划线前/后缀。</strong></p><p>解释：</p><p>JavaScript 并没有私有属性或私有方法的概念。虽然使用下划线是表示「私有」的一种共识，但实际上这些属性是完全公开的，它本身就是你公共接口的一部分。这种习惯或许会导致开发者错误的认为改动它不会造成破坏或者不需要去测试。<br>也就是说：如果你想要某处为「私有」，它必须不能是显式提出的。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">this</span>.firstName = <span class="string">'Panda'</span>;</span><br></pre></td></tr></table></figure><p><strong>[建议] 不保存 <code>this</code> 的引用，使用 <code>Function#bind</code> 。</strong></p><p>解释：</p><p>让代码变得更加简洁，避免了很多不必要的变量（存放上文this）。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(self);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(that);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(_this);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 如果文件导出一个类，文件名应该与类名完全相同。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file contents</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in some other file</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./checkBox'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./check_box'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./CheckBox'</span>);</span><br></pre></td></tr></table></figure><h3 id="24-注释"><a class="markdownIt-Anchor" href="#24-注释"></a> 2.4 注释</h3><h4 id="241-单行注释"><a class="markdownIt-Anchor" href="#241-单行注释"></a> 2.4.1 单行注释</h4><p><strong>[强制] 必须独占一行。<code>//</code> 后跟一个空格，缩进与下一行被注释说明的代码一致。</strong></p><h4 id="242-多行注释"><a class="markdownIt-Anchor" href="#242-多行注释"></a> 2.4.2 多行注释</h4><p><strong>[建议] 避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</strong></p><h4 id="243-文档化注释"><a class="markdownIt-Anchor" href="#243-文档化注释"></a> 2.4.3 文档化注释</h4><p><strong>[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 <code>/**...*/</code> 形式的块注释中。</strong></p><p>解释：</p><ol><li>文件</li><li>namespace</li><li>类</li><li>函数或方法</li><li>类属性</li><li>事件</li><li>全局变量</li><li>常量</li><li>AMD 模块</li></ol><p><strong>[强制] 文档注释前必须空一行。</strong></p><p><strong>[建议] 自文档化的文档说明 what，而不是 how。</strong></p><h4 id="244-类型定义"><a class="markdownIt-Anchor" href="#244-类型定义"></a> 2.4.4 类型定义</h4><p><strong>[强制] 类型定义都是以<code>{</code>开始, 以<code>}</code>结束。</strong></p><p>解释：</p><p>常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。</p><p>类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。</p><p><strong>[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。</strong></p><table><thead><tr><th style="text-align:left">类型定义</th><th style="text-align:left">语法示例</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:left">String</td><td style="text-align:left">{string}</td><td>–</td></tr><tr><td style="text-align:left">Number</td><td style="text-align:left">{number}</td><td>–</td></tr><tr><td style="text-align:left">Boolean</td><td style="text-align:left">{boolean}</td><td>–</td></tr><tr><td style="text-align:left">Object</td><td style="text-align:left">{Object}</td><td>–</td></tr><tr><td style="text-align:left">Function</td><td style="text-align:left">{Function}</td><td>–</td></tr><tr><td style="text-align:left">RegExp</td><td style="text-align:left">{RegExp}</td><td>–</td></tr><tr><td style="text-align:left">Array</td><td style="text-align:left">{Array}</td><td>–</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:left">{Date}</td><td>–</td></tr><tr><td style="text-align:left">单一类型集合</td><td style="text-align:left">{Array.&lt;string&gt;}</td><td>string 类型的数组</td></tr><tr><td style="text-align:left">多类型</td><td style="text-align:left">{(number｜boolean)}</td><td>可能是 number 类型, 也可能是 boolean 类型</td></tr><tr><td style="text-align:left">允许为null</td><td style="text-align:left">{?number}</td><td>可能是 number, 也可能是 null</td></tr><tr><td style="text-align:left">不允许为null</td><td style="text-align:left">{!Object}</td><td>Object 类型, 但不是 null</td></tr><tr><td style="text-align:left">Function类型</td><td style="text-align:left">{function(number, boolean)}</td><td>函数, 形参类型</td></tr><tr><td style="text-align:left">Function带返回值</td><td style="text-align:left">{function(number, boolean):string}</td><td>函数, 形参, 返回值类型</td></tr><tr><td style="text-align:left">参数可选</td><td style="text-align:left">@param {string=} name</td><td>可选参数, =为类型后缀</td></tr><tr><td style="text-align:left">可变参数</td><td style="text-align:left">@param {…number} args</td><td>变长参数,  …为类型前缀</td></tr><tr><td style="text-align:left">任意类型</td><td style="text-align:left">{*}</td><td>任意类型</td></tr><tr><td style="text-align:left">可选任意类型</td><td style="text-align:left">@param {*=} name</td><td>可选参数，类型不限</td></tr><tr><td style="text-align:left">可变任意类型</td><td style="text-align:left">@param {…*} args</td><td>变长参数，类型不限</td></tr></tbody></table><h4 id="245-文件注释"><a class="markdownIt-Anchor" href="#245-文件注释"></a> 2.4.5 文件注释</h4><p><strong>[强制] 文件顶部必须包含文件注释，用 <code>@file</code> 标识文件说明。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file Describe the file</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 文件注释中可以用 <code>@author</code> 标识开发者信息。</strong></p><p>解释：</p><p>开发者信息能够体现开发人员对文件的贡献，并且能够让遇到问题或希望了解相关信息的人找到维护人。通常情况文件在被创建时标识的是创建者。随着项目的进展，越来越多的人加入，参与这个文件的开发，新的作者应该被加入 <code>@author</code> 标识。</p><p><code>@author</code> 标识具有多人时，原则是按照 <code>责任</code> 进行排序。通常的说就是如果有问题，就是找第一个人应该比找第二个人有效。比如文件的创建者由于各种原因，模块移交给了其他人或其他团队，后来因为新增需求，其他人在新增代码时，添加 <code>@author</code> 标识应该把自己的名字添加在创建人的前面。</p><p><code>@author</code> 中的名字不允许被删除。任何劳动成果都应该被尊重。</p><p>业务项目中，一个文件可能被多人频繁修改，并且每个人的维护时间都可能不会很长，不建议为文件增加 <code>@author</code> 标识。通过版本控制系统追踪变更，按业务逻辑单元确定模块的维护责任人，通过文档与wiki跟踪和查询，是更好的责任管理方式。</p><p>对于业务逻辑无关的技术型基础项目，特别是开源的公共项目，应使用 <code>@author</code> 标识。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file Describe the file</span></span><br><span class="line"><span class="comment"> * @author author-name(mail-name@domain.com)</span></span><br><span class="line"><span class="comment"> *         author-name2(mail-name2@domain.com)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="246-命名空间注释"><a class="markdownIt-Anchor" href="#246-命名空间注释"></a> 2.4.6 命名空间注释</h4><p><strong>[建议] 命名空间使用 <code>@namespace</code> 标识。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @namespace</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> util = &#123;&#125;;</span><br></pre></td></tr></table></figure><h4 id="247-类注释"><a class="markdownIt-Anchor" href="#247-类注释"></a> 2.4.7 类注释</h4><p><strong>[建议] 使用 <code>@class</code> 标记类或构造函数。</strong></p><p>解释：</p><p>对于使用对象 <code>constructor</code> 属性来定义的构造函数，可以使用 <code>@constructor</code> 来标记。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Developer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 使用 <code>@extends</code> 标记类的继承信息。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> * @extends Developer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fronteer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Developer.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br><span class="line">util.inherits(Fronteer, Developer);</span><br></pre></td></tr></table></figure><p><strong>[强制] 使用包装方式扩展类成员时， 必须通过 <code>@lends</code> 进行重新指向。</strong></p><p>解释：</p><p>没有 <code>@lends</code> 标记将无法为该类生成包含扩展类成员的文档。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> * @extends Developer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fronteer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Developer.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.extend(</span><br><span class="line">    Fronteer.prototype,</span><br><span class="line">    <span class="comment">/** @lends Fronteer.prototype */</span>&#123;</span><br><span class="line">        _getLevel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>[强制] 类的属性或方法等成员信息使用 <code>@public</code> / <code>@protected</code> / <code>@private</code> 中的任意一个，指明可访问性。</strong></p><p>解释：</p><p>生成的文档中将有可访问性的标记，避免用户直接使用非 <code>public</code> 的属性或方法。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> * @extends Developer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Fronteer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Developer.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性描述</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @type &#123;string&#125;</span></span><br><span class="line"><span class="comment">     * @private</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>._level = <span class="string">'T12'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor body</span></span><br><span class="line">&#125;;</span><br><span class="line">util.inherits(Fronteer, Developer);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125; 返回值描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Fronteer.prototype._getLevel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="248-函数方法注释"><a class="markdownIt-Anchor" href="#248-函数方法注释"></a> 2.4.8 函数/方法注释</h4><p><strong>[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。</strong></p><p><strong>[强制] 参数和返回值注释必须包含类型信息和说明。</strong></p><p><strong>[建议] 当函数是内部函数，外部不可访问时，可以使用 <code>@inner</code> 标识。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; p1 参数1的说明</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; p2 参数2的说明，比较长</span></span><br><span class="line"><span class="comment"> *     那就换行了.</span></span><br><span class="line"><span class="comment"> * @param &#123;number=&#125; p3 参数3的说明（可选）</span></span><br><span class="line"><span class="comment"> * @return &#123;Object&#125; 返回值描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p1, p2, p3</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> p3 = p3 || <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        p1: p1,</span><br><span class="line">        p2: p2,</span><br><span class="line">        p3: p3</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 对 Object 中各项的描述， 必须使用 <code>@param</code> 标识。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; option 参数描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; option.url option项描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string=&#125; option.method option项描述，可选参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 重写父类方法时， 应当添加 <code>@override</code> 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 <code>@param</code>、<code>@return</code>，仅用 <code>@override</code> 标识，否则仍应作完整注释。</strong></p><p>解释：</p><p>简而言之，当子类重写的方法能直接套用父类的方法注释时可省略对参数与返回值的注释。</p><h4 id="249-事件注释"><a class="markdownIt-Anchor" href="#249-事件注释"></a> 2.4.9 事件注释</h4><p><strong>[强制] 必须使用 <code>@event</code> 标识事件，事件参数的标识与方法描述的参数标识相同。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 值变更时触发</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @event</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; e e描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; e.before before描述</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; e.after after描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onchange: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 在会广播事件的函数前使用 <code>@fires</code> 标识广播的事件，在广播事件代码前使用 <code>@event</code> 标识事件。</strong></p><p><strong>[建议] 对于事件对象的注释，使用 <code>@param</code> 标识，生成文档时可读性更好。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @fires Select#change</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Select.prototype.clickHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值变更时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @event Select#change</span></span><br><span class="line"><span class="comment">     * @param &#123;Object&#125; e e描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.before before描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.after after描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.fire(</span><br><span class="line">        <span class="string">'change'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            before: <span class="string">'foo'</span>,</span><br><span class="line">            after: <span class="string">'bar'</span></span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2410-常量注释"><a class="markdownIt-Anchor" href="#2410-常量注释"></a> 2.4.10 常量注释</h4><p><strong>[强制] 常量必须使用 <code>@const</code> 标记，并包含说明和类型信息。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常量说明</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @const</span></span><br><span class="line"><span class="comment"> * @type &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> REQUEST_URL = <span class="string">'myurl.do'</span>;</span><br></pre></td></tr></table></figure><h4 id="2411-复杂类型注释"><a class="markdownIt-Anchor" href="#2411-复杂类型注释"></a> 2.4.11 复杂类型注释</h4><p><strong>[建议] 对于类型未定义的复杂结构的注释，可以使用 <code>@typedef</code> 标识来定义。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `namespaceA~` 可以换成其它 namepaths 前缀，目的是为了生成文档中能显示 `@typedef` 定义的类型和链接。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @typedef &#123;Object&#125; namespaceA~Server</span></span><br><span class="line"><span class="comment"> * @property &#123;string&#125; host 主机</span></span><br><span class="line"><span class="comment"> * @property &#123;number&#125; port 端口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @type &#123;Array.&lt;namespaceA~Server&gt;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> servers = [</span><br><span class="line">    &#123;</span><br><span class="line">        host: <span class="string">'1.2.3.4'</span>,</span><br><span class="line">        port: <span class="number">8080</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        host: <span class="string">'1.2.3.5'</span>,</span><br><span class="line">        port: <span class="number">8081</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="2412-amd-模块注释"><a class="markdownIt-Anchor" href="#2412-amd-模块注释"></a> 2.4.12 AMD 模块注释</h4><p><strong>[强制] AMD 模块使用 <code>@module</code> 或 <code>@exports</code> 标识。</strong></p><p>解释：</p><p>@exports 与 @module 都可以用来标识模块，区别在于 @module 可以省略模块名称。而只使用 @exports 时在 namepaths 中可以省略 module: 前缀。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * foo description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @exports Foo</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> foo = &#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * baz description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @return &#123;boolean&#125; return description</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        foo.baz = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> foo;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>也可以在 exports 变量前使用 @module 标识：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * module description.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @module foo</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * bar description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        exports.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果直接使用 factory 的 exports 参数，还可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * module description.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @module</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * bar description</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        exports.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>[强制] 对于已使用 <code>@module</code> 标识为 AMD模块 的引用，在 <code>namepaths</code> 中必须增加 <code>module:</code> 作前缀。</strong></p><p>解释：</p><p>namepaths 没有 module: 前缀时，生成的文档中将无法正确生成链接。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点击处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @fires module:Select#change</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Select.prototype.clickHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值变更时触发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @event module:Select#change</span></span><br><span class="line"><span class="comment">     * @param &#123;Object&#125; e e描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.before before描述</span></span><br><span class="line"><span class="comment">     * @param &#123;string&#125; e.after after描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.fire(</span><br><span class="line">        <span class="string">'change'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            before: <span class="string">'foo'</span>,</span><br><span class="line">            after: <span class="string">'bar'</span></span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[建议] 对于类定义的模块，可以使用 <code>@alias</code> 标识构建函数。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A module representing a jacket.</span></span><br><span class="line"><span class="comment"> * @module jacket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * @class</span></span><br><span class="line"><span class="comment">         * @alias module:jacket</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">var</span> Jacket = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jacket;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>[建议] 多模块定义时，可以使用 <code>@exports</code> 标识各个模块。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// one module</span></span><br><span class="line">define(<span class="string">'html/utils'</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Utility functions to ease working with DOM elements.</span></span><br><span class="line"><span class="comment">     * @exports html/utils</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> exports = &#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// another module</span></span><br><span class="line">define(<span class="string">'tag'</span>,</span><br><span class="line">    <span class="comment">/** @exports tag */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> exports = &#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>[建议] 对于 exports 为 Object 的模块，可以使用<code>@namespace</code>标识。</strong></p><p>解释：</p><p>使用 @namespace 而不是 @module 或 @exports 时，对模块的引用可以省略 module: 前缀。</p><p><strong>[建议] 对于 exports 为类名的模块，使用 <code>@class</code> 和 <code>@exports</code> 标识。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只使用 @class Bar 时，类方法和属性都必须增加 @name Bar#methodName 来标识，与 @exports 配合可以免除这一麻烦，并且在引用时可以省去 module: 前缀。</span></span><br><span class="line"><span class="comment">// 另外需要注意类名需要使用 var 定义的方式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bar description</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @see foo</span></span><br><span class="line"><span class="comment"> * @exports  Bar</span></span><br><span class="line"><span class="comment"> * @class</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * baz description</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return &#123;(string|Array)&#125; return description</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Bar.prototype.baz = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2413-细节注释"><a class="markdownIt-Anchor" href="#2413-细节注释"></a> 2.4.13 细节注释</h4><p>对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。</p><p><strong>[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p1, p2, opt_p3</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里对具体内部逻辑进行说明</span></span><br><span class="line">    <span class="comment">// 说明太长需要换行</span></span><br><span class="line">    <span class="keyword">for</span> (...) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：</strong></p><p>解释：</p><ol><li>TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。</li><li>FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。</li><li>HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。</li><li>XXX: 该处存在陷阱。此时需要对陷阱进行描述。</li></ol><h2 id="3-语言特性"><a class="markdownIt-Anchor" href="#3-语言特性"></a> 3 语言特性</h2><h3 id="31-变量"><a class="markdownIt-Anchor" href="#31-变量"></a> 3.1 变量</h3><p><strong>[强制] 变量在使用前必须通过 <code>var</code> 定义。</strong></p><p>解释：</p><p>不通过 var 定义变量将导致变量污染全局环境。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'MyName'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">name = <span class="string">'MyName'</span>;</span><br></pre></td></tr></table></figure><p><strong>[强制] 每个 <code>var</code> 只能声明一个变量。</strong></p><p>解释：</p><p>一个 var 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hangModules = [];</span><br><span class="line"><span class="keyword">var</span> missModules = [];</span><br><span class="line"><span class="keyword">var</span> visited = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hangModules = [],</span><br><span class="line">    missModules = [],</span><br><span class="line">    visited = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] 变量必须 <code>即用即声明</code>，不得在函数或其它形式的代码块起始位置统一声明所有变量。</strong></p><p>解释：</p><p>变量声明与使用的距离越远，出现的跨度越大，代码的阅读与维护成本越高。虽然JavaScript的变量是函数作用域，还是应该根据编程中的意图，缩小变量出现的距离空间。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">            <span class="keyword">var</span> item = &#123;</span><br><span class="line">                k: key,</span><br><span class="line">                v: source[key]</span><br><span class="line">            &#125;;</span><br><span class="line">            list.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [];</span><br><span class="line">    <span class="keyword">var</span> key;</span><br><span class="line">    <span class="keyword">var</span> item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">            item = &#123;</span><br><span class="line">                k: key,</span><br><span class="line">                v: source[key]</span><br><span class="line">            &#125;;</span><br><span class="line">            list.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中需要注意的几个 JS <code>变量声明提升</code> 特性是：</p><ul><li><p>变量声明会提升至作用域顶部，但赋值不会。</p><p>示例：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们知道这样不能正常工作（假设这里没有名为 notDefined 的全局变量）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但由于变量声明提升的原因，在一个变量引用后再创建它的变量声明将可以正常工作。</span></span><br><span class="line"><span class="comment">// 注：变量赋值为 `true` 不会提升。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">    <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释器会把变量声明提升到作用域顶部，意味着我们的例子将被重写成：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> declaredButNotAssigned;</span><br><span class="line">    <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">    declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名函数表达式会提升它们的变量名，但不会提升函数的赋值。</p><p>示例：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></span><br><span class="line">    anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></span><br><span class="line">    <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'anonymous function expression'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命名函数表达式会提升变量名，但不会提升函数名或函数体。</p><p>示例：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line">    named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line">    superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当函数名跟变量名一样时，表现也是如此。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line">    named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'named'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数声明提升它们的名字和函数体。</p><p>示例：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    superPower(); <span class="comment">// =&gt; Flying</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>[建议] 最后再声明未赋值的变量。</strong></p><p>解释：</p><p>当需要引用前面的变量赋值时，这种做法将很有帮助。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> i, len, dragonball,</span><br><span class="line">    items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">var</span> items = getItems();</span><br><span class="line"><span class="keyword">var</span> dragonball;</span><br><span class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> items = getItems();</span><br><span class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> dragonball;</span><br><span class="line"><span class="keyword">var</span> length;</span><br><span class="line"><span class="keyword">var</span> i;</span><br></pre></td></tr></table></figure><h3 id="32-条件"><a class="markdownIt-Anchor" href="#32-条件"></a> 3.2 条件</h3><p><strong>[强制] 在 Equality Expression 中使用类型严格的 <code>===</code>。仅当判断 null 或 undefined 时，允许使用 <code>== null</code>。</strong></p><p>解释：</p><p>使用 === 可以避免等于判断中隐式的类型转换。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (age === <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (age == <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 尽可能使用简洁的表达式。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name === <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔不成立</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!notTrue) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (notTrue === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// null 或 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (noValue == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (noValue === <span class="literal">null</span> || <span class="keyword">typeof</span> noValue === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件表达式，例如 <code>if</code> 语句通过抽象方法 <code>ToBoolean</code> 强制计算它们的表达式，并且总是遵守下面的规则：</p><ul><li><code>对象</code> 被计算为 <code>true</code> ， <code>数组</code> 或 <code>函数</code> 都属于 <code>对象</code></li><li><code>undefined</code> 被计算为 <code>false</code></li><li><code>null</code> 被计算为 <code>false</code></li><li><code>布尔值</code> 被计算为 <code>布尔的值</code></li><li><code>数字</code> 如果是 <code>+0</code> 、 <code>-0</code> 或 <code>NaN</code> 被计算为 <code>fale</code> ，否则为 <code>true</code></li><li><code>字符串</code> 如果是空字符串 <code>''</code> 被计算为 <code>false</code> ，否则为 <code>true</code></li></ul><p><strong>[建议] 按执行频率排列分支的顺序。</strong></p><p>解释：</p><p>按执行频率排列分支的顺序好处是：</p><ol><li>阅读的人容易找到最常见的情况，增加可读性。</li><li>提高执行效率。</li></ol><p><strong>[建议] 对于相同变量或表达式的多值条件，用 <code>switch</code> 代替 <code>if</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">typeof</span> variable) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'object'</span>:</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'boolean'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="keyword">typeof</span> variable;</span><br><span class="line"><span class="keyword">if</span> (type === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'number'</span> || type === <span class="string">'boolean'</span> || type === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 如果函数或全局中的 <code>else</code> 块后没有任何语句，可以删除 <code>else</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'unnamed'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'unnamed'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="33-循环"><a class="markdownIt-Anchor" href="#33-循环"></a> 3.3 循环</h3><p><strong>[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。</strong></p><p>解释：</p><p>循环体中的函数表达式，运行过程中会生成循环次数个函数对象。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clicker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    addListener(element, <span class="string">'click'</span>, clicker);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    addListener(element, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 对循环内多次使用的不变值，在循环外用变量缓存。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> width = wrap.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    element.style.width = width;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    element.style.width = wrap.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 对有序集合进行遍历时，缓存 <code>length</code>。</strong></p><p>解释：</p><p>虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 length 访问时会动态计算元素个数，此时缓存 length 能有效提高程序性能。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。</strong></p><p>解释：</p><p>逆序遍历可以节省变量，代码比较优化。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len = elements.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[len];</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="34-类型"><a class="markdownIt-Anchor" href="#34-类型"></a> 3.4 类型</h3><h4 id="341-类型检测"><a class="markdownIt-Anchor" href="#341-类型检测"></a> 3.4.1 类型检测</h4><p><strong>[建议] 类型检测优先使用 <code>typeof</code>。对象类型检测使用 <code>instanceof</code>。<code>null</code> 或 <code>undefined</code> 的检测使用 <code>== null</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'string'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'number'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'boolean'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'function'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'object'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RegExp</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">RegExp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">Array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line">variable === <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null or undefined</span></span><br><span class="line">variable == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'undefined'</span></span><br></pre></td></tr></table></figure><h4 id="342-类型转换"><a class="markdownIt-Anchor" href="#342-类型转换"></a> 3.4.2 类型转换</h4><p><strong>[建议] 转换成 <code>string</code> 时，使用 <code>+ ''</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">num + <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(num);</span><br><span class="line">num.toString();</span><br><span class="line"><span class="built_in">String</span>(num);</span><br></pre></td></tr></table></figure><p><strong>[建议] 转换成 <code>number</code> 时，通常使用 <code>+</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">+str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">Number</span>(str);</span><br></pre></td></tr></table></figure><p><strong>[建议] <code>string</code> 转换成 <code>number</code>，要转换的字符串结尾包含非数字并期望忽略时，使用 <code>parseInt</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> width = <span class="string">'200px'</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(width, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><strong>[强制] 使用 <code>parseInt</code> 时，必须指定进制。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">parseInt</span>(str);</span><br></pre></td></tr></table></figure><p><strong>[建议] 转换成 <code>boolean</code> 时，使用 <code>!!</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line">!!num;</span><br></pre></td></tr></table></figure><p><strong>[建议] <code>number</code> 去除小数点，使用 <code>Math.floor / Math.round / Math.ceil</code>，不使用 <code>parseInt</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">Math</span>.ceil(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(num, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="35-字符串"><a class="markdownIt-Anchor" href="#35-字符串"></a> 3.5 字符串</h3><p><strong>[强制] 字符串开头和结束使用单引号 <code>'</code>。</strong></p><p>解释：</p><ol><li>输入单引号不需要按住 shift，方便输入。</li><li>实际使用中，字符串经常用来拼接 HTML。为方便 HTML 中包含双引号而不需要转义写法。</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'我是一个字符串'</span>;</span><br><span class="line"><span class="keyword">var</span> html = <span class="string">'&lt;div class="cls"&gt;拼接HTML可以省去双引号转义&lt;/div&gt;'</span>;</span><br></pre></td></tr></table></figure><p><strong>[建议] 使用 <code>数组</code> 或 <code>+</code> 拼接字符串。</strong></p><p>解释：</p><ol><li>使用 + 拼接字符串，如果拼接的全部是 StringLiteral，压缩工具可以对其进行自动合并的优化。所以，静态字符串建议使用 + 拼接。</li><li>在现代浏览器下，使用 + 拼接字符串，性能较数组的方式要高。</li><li>如需要兼顾老旧浏览器，应尽量使用数组拼接字符串。</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> str = [</span><br><span class="line">    <span class="comment">// 推荐换行开始并缩进开始第一个字符串, 对齐代码, 方便阅读.</span></span><br><span class="line">    <span class="string">'&lt;ul&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</span><br><span class="line">    <span class="string">'&lt;/ul&gt;'</span></span><br><span class="line">].join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 + 拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">''</span> <span class="comment">// 建议第一个为空字符串, 第二个换行开始并缩进开始, 对齐代码, 方便阅读</span></span><br><span class="line">    + <span class="string">'&lt;ul&gt;'</span>,</span><br><span class="line">    +    <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</span><br><span class="line">    +    <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</span><br><span class="line">    + <span class="string">'&lt;/ul&gt;'</span>;</span><br></pre></td></tr></table></figure><p><strong>[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。</strong></p><p>解释：</p><p>使用模板引擎有如下好处：</p><ol><li>在开发过程中专注于数据，将视图生成的过程由另外一个层级维护，使程序逻辑结构更清晰。</li><li>优秀的模板引擎，通过模板编译技术和高质量的编译产物，能获得比手工拼接字符串更高的性能。</li></ol><ul><li>artTemplate: 体积较小，在所有环境下性能高，语法灵活。</li><li>dot.js: 体积小，在现代浏览器下性能高，语法灵活。</li><li>etpl: 体积较小，在所有环境下性能高，模板复用性高，语法灵活。</li><li>handlebars: 体积大，在所有环境下性能高，扩展性高。</li><li>hogon: 体积小，在现代浏览器下性能高。</li><li>nunjucks: 体积较大，性能一般，模板复用性高。</li></ul><h3 id="36-对象"><a class="markdownIt-Anchor" href="#36-对象"></a> 3.6 对象</h3><p><strong>[强制] 使用对象字面量 <code>{}</code> 创建新 <code>Object</code>。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><p><strong>[强制] 对象创建时，如果一个对象的所有 <code>属性</code> 均可以不添加引号，则所有 <code>属性</code> 不得添加引号。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    name: <span class="string">'someone'</span>,</span><br><span class="line">    age: <span class="number">28</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] 对象创建时，如果任何一个 <code>属性</code> 需要添加引号，则所有 <code>属性</code> 必须添加 <code>'</code>。</strong></p><p>解释：</p><p>如果属性不符合 Identifier 和 NumberLiteral 的形式，就需要以 StringLiteral 的形式提供。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'someone'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="string">'more-info'</span>: <span class="string">'...'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    name: <span class="string">'someone'</span>,</span><br><span class="line">    age: <span class="number">28</span>,</span><br><span class="line">    <span class="string">'more-info'</span>: <span class="string">'...'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下行为绝对禁止</span></span><br><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[建议] 属性访问时，尽量使用 <code>.</code>，当通过变量访问属性时使用 <code>[expr]</code>。</strong></p><p>解释：</p><p>属性名符合 Identifier 的要求，就可以通过 <code>.</code> 来访问，否则就只能通过 <code>[expr]</code> 方式访问。</p><p>通常在 JavaScript 中声明的对象，属性命名是使用 Camel 命名法，用 <code>.</code> 来访问更清晰简洁。部分特殊的属性(比如来自后端的JSON)，可能采用不寻常的命名方式，可以通过 <code>[expr]</code> 方式访问。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">info.age;</span><br><span class="line">info[<span class="string">'more-info'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = &#123;</span><br><span class="line">    status: <span class="literal">true</span>,</span><br><span class="line">    age: <span class="number">13</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stu[prop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isStatusOk = getProp(<span class="string">'status'</span>);</span><br></pre></td></tr></table></figure><p><strong>[建议] <code>for in</code> 遍历对象时, 使用 <code>hasOwnProperty</code> 过滤掉原型中的属性。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newInfo = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> info) &#123;</span><br><span class="line">    <span class="keyword">if</span> (info.hasOwnProperty(key)) &#123;</span><br><span class="line">        newInfo[key] = info[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[强制] 不要使用 <a href="http://es5.github.io/#x7.6.1" target="_blank" rel="noopener"><code>保留字</code></a> 作为键名，它们在 IE8下不工作。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">    <span class="keyword">default</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</span><br><span class="line">    private: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">    defaults: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</span><br><span class="line">    hidden: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[建议] 使用同义词替换需要使用的保留字</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">    class: 'alien'</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">    klass: <span class="string">'alien'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">    type: <span class="string">'alien'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="37-数组"><a class="markdownIt-Anchor" href="#37-数组"></a> 3.7 数组</h3><p><strong>[强制] 使用数组字面量 <code>[]</code> 创建新数组，除非想要创建的是指定长度的数组。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure><p><strong>[强制] 遍历数组不使用 <code>for in</code>。</strong></p><p>解释：</p><p>数组对象可能存在数字以外的属性, 这种情况下 for in 不会得到正确结果.</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">arr.other = <span class="string">'other things'</span>; <span class="comment">// 这里仅作演示, 实际中应使用Object类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的遍历方式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的遍历方式</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 <code>sort</code> 方法。</strong></p><p>解释：</p><p>自己实现的常规排序算法，在性能上并不优于数组默认的 sort 方法。以下两种场景可以自己实现排序：</p><ol><li>需要稳定的排序算法，达到严格一致的排序结果。</li><li>数据特点鲜明，适合使用桶排。</li></ol><p><strong>[建议] 清空数组使用 <code>.length = 0</code>。</strong></p><p><strong>[建议] 向数组增加元素时使用 <code>Array#push</code> 来替代直接赋值</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someStack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">'abracadabra'</span>);</span><br></pre></td></tr></table></figure><p><strong>[建议] 当需要拷贝数组时，使用 <code>Array#slice</code> 。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len = items.length;</span><br><span class="line"><span class="keyword">var</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">itemsCopy = items.slice();</span><br></pre></td></tr></table></figure><h3 id="38-函数"><a class="markdownIt-Anchor" href="#38-函数"></a> 3.8 函数</h3><p><strong>[强制] 禁止在一个 <code>非函数代码块（if、while等）</code> 中声明一个函数，如果需要，则把函数赋值给一个变量。</strong></p><p>解释：</p><p>浏览器允许这么操作，但不同厂商产品之间的解析存在不一致。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">testFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">    test = <span class="function"><span class="keyword">function</span> <span class="title">testFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="381-函数表达式"><a class="markdownIt-Anchor" href="#381-函数表达式"></a> 3.8.1 函数表达式</h4><p>解释：</p><p>分3种写法，匿名、命名以及立即执行函数表达式。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数表达式</span></span><br><span class="line"><span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名函数表达式</span></span><br><span class="line"><span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即调用的函数表达式（IIFE）</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h4 id="382-函数长度"><a class="markdownIt-Anchor" href="#382-函数长度"></a> 3.8.2 函数长度</h4><p><strong>[建议] 一个函数的长度控制在 <code>50</code> 行以内。</strong></p><p>解释：</p><p>将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。</p><p>特定算法等不可分割的逻辑允许例外。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.checked) &#123;</span><br><span class="line">        y.checked = <span class="literal">true</span>;</span><br><span class="line">        z.value = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        y.checked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!a.value) &#123;</span><br><span class="line">        warning.innerText = <span class="string">'Please enter it'</span>;</span><br><span class="line">        submitButton.disabled = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        warning.innerText = <span class="string">''</span>;</span><br><span class="line">        submitButton.disabled = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接阅读该函数会难以明确其主线逻辑，因此下方是一种更合理的表达方式：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    syncXStateToView();</span><br><span class="line">    checkAAvailability();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncXStateToView</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.checked) &#123;</span><br><span class="line">        y.checked = <span class="literal">true</span>;</span><br><span class="line">        z.value = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        y.checked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAAvailability</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a.value) &#123;</span><br><span class="line">        displayWarningForAMissing();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        clearWarnignForA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="383-参数设计"><a class="markdownIt-Anchor" href="#383-参数设计"></a> 3.8.3 参数设计</h4><p><strong>[建议] 一个函数的参数控制在 <code>6</code> 个以内。</strong></p><p>解释：</p><p>除去不定长参数以外，函数具备不同逻辑意义的参数建议控制在 6 个以内，过多参数会导致维护难度增大。</p><p>某些情况下，如使用 AMD Loader 的 require 加载多个模块时，其 callback 可能会存在较多参数，因此对函数参数的个数不做强制限制。</p><p><strong>[建议] 通过 <code>options</code> 参数传递非数据输入型参数。</strong></p><p>解释：</p><p>有些函数的参数并不是作为算法的输入，而是对算法的某些分支条件判断之用，此类参数建议通过一个 options 参数传递。</p><p>如下函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Node&#125; element 需要移除的元素</span></span><br><span class="line"><span class="comment"> * @param &#123;boolean&#125; removeEventListeners 是否同时将所有注册在元素上的事件移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, removeEventListeners</span>) </span>&#123;</span><br><span class="line">    element.parent.removeChild(element);</span><br><span class="line">    <span class="keyword">if</span> (removeEventListeners) &#123;</span><br><span class="line">        element.clearEventListeners();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以转换为下面的签名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Node&#125; element 需要移除的元素</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; options 相关的逻辑配置</span></span><br><span class="line"><span class="comment"> * @param &#123;boolean&#125; options.removeEventListeners 是否同时将所有注册在元素上的事件移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, options</span>) </span>&#123;</span><br><span class="line">    element.parent.removeChild(element);</span><br><span class="line">    <span class="keyword">if</span> (options.removeEventListeners) &#123;</span><br><span class="line">        element.clearEventListeners();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种模式有几个显著的优势：</p><ul><li>boolean 型的配置项具备名称，从调用的代码上更易理解其表达的逻辑意义。</li><li>当配置项有增长时，无需无休止地增加参数个数，不会出现 removeElement(element, true, false, false, 3) 这样难以理解的调用代码。</li><li>当部分配置参数可选时，多个参数的形式非常难处理重载逻辑，而使用一个 options 对象只需判断属性是否存在，实现得以简化。</li></ul><p><strong>[强制] 禁止将参数命名为 <code>arguments</code> 。</strong></p><p>解释：</p><p>如此命名，会将函数作用域内的 <code>arguments</code> 对象取代。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span>(<span class="params">name, options, arguments</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span>(<span class="params">name, options, args</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="384-闭包"><a class="markdownIt-Anchor" href="#384-闭包"></a> 3.8.4 闭包</h4><p><strong>[建议] 在适当的时候将闭包内大对象置为 <code>null</code>。</strong></p><p>解释：</p><p>在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。</p><p>闭包会阻止一些变量的垃圾回收，对于较老旧的JavaScript引擎，可能导致外部所有变量均无法回收。</p><p>首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：</p><ul><li>嵌套的函数中是否有使用该变量。</li><li>嵌套的函数中是否有 <strong>直接调用eval</strong>。</li><li>是否使用了 with 表达式。</li></ul><p>Chakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而JScript.dll和Carakan则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。</p><p>由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 fn 时：</p><ol><li>如果 fn 的 [[Scope]] 是ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：<ol><li>如果是 V8 引擎，则退出全过程。</li><li>如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。</li></ol></li><li>获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：<ol><li>如果 FunctionBody 中含有 <strong>直接调用eval</strong>，则退出全过程。</li><li>否则得到所有的 Identifier。</li><li>对于每一个 Identifier，设其为 name，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 name 的绑定 binding。</li><li>对 binding 添加 notSwap 属性，其值为 true。</li></ol></li><li>检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 notSwap 属性且值为 true，则：<ol><li>如果是V8引擎，删除该绑定。</li><li>如果是SpiderMonkey，将该绑定的值设为 undefined，将删除 notSwap 属性。</li></ol></li></ol><p>对于Chakra引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。</p><p>如果有 <strong>非常庞大</strong> 的对象，且预计会在 <strong>老旧的引擎</strong> 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。</p><p><strong>[建议] 使用 <code>IIFE</code> 避免 <code>Lift 效应</code>。</strong></p><p>解释：</p><p>在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    tasks[tasks.length] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Current cursor is at '</span> + i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = tasks.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    tasks[len]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码对 tasks 中的函数的执行均会输出 <code>Current cursor is at 5</code>，往往不符合预期。</p><p>此现象称为 <strong>Lift 效应</strong> 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 注意有一层额外的闭包</span></span><br><span class="line">    tasks[tasks.length] = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Current cursor is at '</span> + i);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = tasks.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    tasks[len]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="385-空函数"><a class="markdownIt-Anchor" href="#385-空函数"></a> 3.8.5 空函数</h4><p><strong>[建议] 空函数不使用 <code>new Function()</code> 的形式。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EMPTY_FUNCTION = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass.prototype.abstractMethod = EMPTY_FUNCTION;</span><br><span class="line">MyClass.prototype.hooks.before = EMPTY_FUNCTION;</span><br><span class="line">MyClass.prototype.hooks.after = EMPTY_FUNCTION;</span><br></pre></td></tr></table></figure><h3 id="39-面向对象"><a class="markdownIt-Anchor" href="#39-面向对象"></a> 3.9 面向对象</h3><p><strong>[强制] 类的继承方案，实现时需要修正 <code>constructor</code>。</strong></p><p>解释：</p><p>通常使用其他 library 的类继承方案都会进行 constructor 修正。如果是自己实现的类继承方案，需要进行 constructor 修正。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建类之间的继承关系</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; subClass 子类函数</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; superClass 父类函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">    F.prototype = superClass.prototype;</span><br><span class="line">    subClass.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    subClass.prototype.constructor = subClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 声明类时，保证 <code>constructor</code> 的正确性。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接prototype等于对象时，需要修正constructor</span></span><br><span class="line">Animal.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Animal,</span><br><span class="line"></span><br><span class="line">    jump: function () &#123;</span><br><span class="line">        alert(<span class="string">'animal '</span> + <span class="keyword">this</span>.name + <span class="string">' jump'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种方式扩展prototype则无需理会constructor</span></span><br><span class="line">Animal.prototype.jump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'animal '</span> + <span class="keyword">this</span>.name + <span class="string">' jump'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[建议] 属性在构造函数中声明，方法在原型中声明。</strong></p><p>解释：</p><p>原型对象的成员被所有实例共享，能节约内存占用。所以编码时我们应该遵守这样的原则：原型对象包含程序不会修改的成员，如方法函数或配置项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] 给对象原型分配方法，而不是使用一个新对象覆盖原型。</strong></p><p>解释：</p><p>覆盖原型将导致继承出现问题：重设原型将覆盖原有原型。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'new jedi'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype = &#123;</span><br><span class="line">    fight: <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    block: <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">Jedi.prototype.fight = <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.block = <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[建议] 方法可以返回 <code>this</code> 来实现方法链式操作。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump().setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><strong>[建议] 可以自定义 <code>toString()</code> 方法，但确保其可以正常工作且不会产生副作用。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    options || (options = &#123;&#125;);</span><br><span class="line">    <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Jedi - '</span> + <span class="keyword">this</span>.getName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>[强制] 自定义事件的 <code>事件名</code> 必须全小写。</strong></p><p>解释：</p><p>在 JavaScript 广泛应用的浏览器环境，绝大多数 DOM 事件名称都是全小写的。为了遵循大多数 JavaScript 开发者的习惯，在设计自定义事件时，事件名也应该全小写。</p><p><strong>[强制] 自定义事件只能有一个 <code>event</code> 参数。如果事件需要传递较多信息，应仔细设计事件对象。</strong></p><p>解释：</p><p>一个事件对象的好处有：</p><ol><li>顺序无关，避免事件监听者需要记忆参数顺序。</li><li>每个事件信息都可以根据需要提供或者不提供，更自由。</li><li>扩展方便，未来添加事件信息时，无需考虑会破坏监听器参数形式而无法向后兼容。</li></ol><p><strong>[建议] 设计自定义事件时，应考虑禁止默认行为。</strong></p><p>解释：</p><p>常见禁止默认行为的方式有两种：</p><ol><li>事件监听函数中 return false。</li><li>事件对象中包含禁止默认行为的方法，如 preventDefault。</li></ol><h3 id="310-动态特性"><a class="markdownIt-Anchor" href="#310-动态特性"></a> 3.10 动态特性</h3><h4 id="3101-eval"><a class="markdownIt-Anchor" href="#3101-eval"></a> 3.10.1 eval</h4><p><strong>[强制] 避免使用直接 <code>eval</code> 函数。</strong></p><p>解释：</p><p>直接 eval，指的是以函数方式调用 eval 的调用方法。直接 eval 调用执行代码的作用域为本地作用域，应当避免。</p><p>如果有特殊情况需要使用直接 eval，需在代码中用详细的注释说明为何必须使用直接 eval，不能使用其它动态执行代码的方式，同时需要其他资深工程师进行 Code Review。</p><p><strong>[建议] 尽量避免使用 <code>eval</code> 函数。</strong></p><h4 id="3102-动态执行代码"><a class="markdownIt-Anchor" href="#3102-动态执行代码"></a> 3.10.2 动态执行代码</h4><p><strong>[建议] 使用 <code>new Function</code> 执行动态代码。</strong></p><p>解释：</p><p>通过 new Function 生成的函数作用域是全局使用域，不会影响当当前的本地作用域。如果有动态代码执行的需求，建议使用 new Function。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'return x + y;'</span>);</span><br><span class="line"><span class="keyword">var</span> result = handler($(<span class="string">'#x'</span>).val(), $(<span class="string">'#y'</span>).val());</span><br></pre></td></tr></table></figure><h4 id="3103-with"><a class="markdownIt-Anchor" href="#3103-with"></a> 3.10.3 with</h4><p><strong>[建议] 尽量不要使用 <code>with</code>。</strong></p><p>解释：</p><p>使用 with 可能会增加代码的复杂度，不利于阅读和管理；也会对性能有影响。大多数使用 with 的场景都能使用其他方式较好的替代。所以，尽量不要使用 with。</p><h4 id="3104-delete"><a class="markdownIt-Anchor" href="#3104-delete"></a> 3.10.4 delete</h4><p><strong>[建议] 减少 <code>delete</code> 的使用。</strong></p><p>解释：</p><p>如果没有特别的需求，减少或避免使用<code>delete</code>。<code>delete</code>的使用会破坏部分 JavaScript 引擎的性能优化。</p><p><strong>[建议] 处理 <code>delete</code> 可能产生的异常。</strong></p><p>解释：</p><p>对于有被遍历需求，且值 null 被认为具有业务逻辑意义的值的对象，移除某个属性必须使用 delete 操作。</p><p>在严格模式或IE下使用 delete 时，不能被删除的属性会抛出异常，因此在不确定属性是否可以删除的情况下，建议添加 try-catch 块。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> o.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (deleteError) &#123;</span><br><span class="line">    o.x = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3105-对象属性"><a class="markdownIt-Anchor" href="#3105-对象属性"></a> 3.10.5 对象属性</h4><p><strong>[建议] 避免修改外部传入的对象。</strong></p><p>解释：</p><p>JavaScript 因其脚本语言的动态特性，当一个对象未被 seal 或 freeze 时，可以任意添加、删除、修改属性值。</p><p>但是随意地对 非自身控制的对象 进行修改，很容易造成代码在不可预知的情况下出现问题。因此，设计良好的组件、函数应该避免对外部传入的对象的修改。</p><p>下面代码的 selectNode 方法修改了由外部传入的 datasource 对象。如果 datasource 用在其它场合（如另一个 Tree 实例）下，会造成状态的混乱。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">datasource</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.datasource = datasource;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tree.prototype.selectNode = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 从datasource中找出节点对象</span></span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">this</span>.findNode(id);</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        node.selected = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.flushView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于此类场景，需要使用额外的对象来维护，使用由自身控制，不与外部产生任何交互的 selectedNodeIndex 对象来维护节点的选中状态，不对 datasource 作任何修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">datasource</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.datasource = datasource;</span><br><span class="line">    <span class="keyword">this</span>.selectedNodeIndex = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Tree.prototype.selectNode = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 从datasource中找出节点对象</span></span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">this</span>.findNode(id);</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="keyword">this</span>.selectedNodeIndex[id] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.flushView();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>除此之外，也可以通过 deepClone 等手段将自身维护的对象与外部传入的分离，保证不会相互影响。</p><p><strong>[建议] 具备强类型的设计。</strong></p><p>解释：</p><ul><li>如果一个属性被设计为 boolean 类型，则不要使用 1 / 0 作为其值。对于标识性的属性，如对代码体积有严格要求，可以从一开始就设计为 number 类型且将 0 作为否定值。</li><li>从 DOM 中取出的值通常为 string 类型，如果有对象或函数的接收类型为 number 类型，提前作好转换，而不是期望对象、函数可以处理多类型的值。</li></ul><h3 id="311-存取器"><a class="markdownIt-Anchor" href="#311-存取器"></a> 3.11 存取器</h3><p><strong>[建议] 属性的存取函数不是必须的。</strong></p><p><strong>[建议] 如需要存取函数，使用 <code>getVal()</code> 和 <code>setVal()</code> 。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">dragon.age();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dragon.getAge();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dragon.age(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dragon.setAge(<span class="number">25</span>);</span><br></pre></td></tr></table></figure><p><strong>[建议] 如属性是布尔值 ，使用 <code>isVal()</code> 和 <code>hasVal()</code> 。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 创建 <code>get()</code> 和 <code>set()</code> 函数是可以的，但要保持一致。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    options || (options = &#123;&#125;);</span><br><span class="line">    <span class="keyword">var</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</span><br><span class="line">    <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.set = <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">key, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[key] = val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[key];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="4-浏览器环境"><a class="markdownIt-Anchor" href="#4-浏览器环境"></a> 4 浏览器环境</h2><h3 id="41-模块化"><a class="markdownIt-Anchor" href="#41-模块化"></a> 4.1 模块化</h3><h4 id="411-amd"><a class="markdownIt-Anchor" href="#411-amd"></a> 4.1.1 AMD</h4><p><strong>[强制] 使用 <code>AMD</code> 作为模块定义。</strong></p><p>解释：</p><p>AMD 作为由社区认可的模块定义形式，提供多种重载提供灵活的使用方式，并且绝大多数优秀的 Library 都支持 AMD，适合作为规范。</p><p>目前，比较成熟的 AMD Loader 有：</p><ul><li>官方实现的 <a href="http://requirejs.org/" target="_blank" rel="noopener">requirejs</a></li><li>百度实现的 <a href="https://github.com/ecomfe/esl" target="_blank" rel="noopener">esl</a></li></ul><p><strong>[强制] 模块 <code>id</code> 必须符合标准。</strong></p><p>解释：</p><p>模块 id 必须符合以下约束条件：</p><ol><li>类型为 string，并且是由 <code>/</code> 分割的一系列 terms 来组成。例如：<code>this/is/a/module</code>。</li><li>term 应该符合 [a-zA-Z0-9_-]+ 规则。</li><li>不应该有 .js 后缀。</li><li>跟文件的路径保持一致。</li></ol><h4 id="412-define"><a class="markdownIt-Anchor" href="#412-define"></a> 4.1.2 define</h4><p><strong>[建议] 定义模块时不要指明 <code>id</code> 和 <code>dependencies</code>。</strong></p><p>解释：</p><p>在 AMD 的设计思想里，模块名称是和所在路径相关的，匿名的模块更利于封包和迁移。模块依赖应在模块定义内部通过 local require 引用。</p><p>所以，推荐使用 define(factory) 的形式进行模块定义。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>[建议] 使用 <code>return</code> 来返回模块定义。</strong></p><p>解释：</p><p>使用 return 可以减少 factory 接收的参数（不需要接收 exports 和 module），在没有 AMD Loader 的场景下也更容易进行简单的处理来伪造一个 Loader。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exports;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="413-require"><a class="markdownIt-Anchor" href="#413-require"></a> 4.1.3 require</h4><p><strong>[强制] 全局运行环境中，<code>require</code> 必须以 <code>async require</code> 形式调用。</strong></p><p>解释：</p><p>模块的加载过程是异步的，同步调用并无法保证得到正确的结果。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'foo'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">foo</span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">'foo'</span>);</span><br></pre></td></tr></table></figure><p><strong>[强制] 模块定义中只允许使用 <code>local require</code>，不允许使用 <code>global require</code>。</strong></p><p>解释：</p><ol><li>在模块定义中使用 global require，对封装性是一种破坏。</li><li>在 AMD 里，global require 是可以被重命名的。并且 Loader 甚至没有全局的 require 变量，而是用 Loader 名称做为 global require。模块定义不应该依赖使用的 Loader。</li></ol><p><strong>[强制] Package在实现时，内部模块的 <code>require</code> 必须使用 <code>relative id</code>。</strong></p><p>解释：</p><p>对于任何可能通过 发布-引入 的形式复用的第三方库、框架、包，开发者所定义的名称不代表使用者使用的名称。因此不要基于任何名称的假设。在实现源码中，require 自身的其它模块时使用 relative id。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'./util'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>[建议] 不会被调用的依赖模块，在 <code>factory</code> 开始处统一 <code>require</code>。</strong></p><p>解释：</p><p>有些模块是依赖的模块，但不会在模块实现中被直接调用，最为典型的是 css / js / tpl 等 Plugin 所引入的外部内容。此类内容建议放在模块定义最开始处统一引用。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'css!foo.css'</span>);</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'tpl!bar.tpl.html'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="42-dom"><a class="markdownIt-Anchor" href="#42-dom"></a> 4.2 DOM</h3><h4 id="421-元素获取"><a class="markdownIt-Anchor" href="#421-元素获取"></a> 4.2.1 元素获取</h4><p><strong>[建议] 对于单个元素，尽可能使用 <code>document.getElementById</code> 获取，避免使用 <code>document.all</code> 。</strong></p><p><strong>[建议] 对于多个元素的集合，尽可能使用 <code>context.getElementsByTagName</code> 获取。其中 <code>context</code> 可以为 <code>document</code> 或其他元素。指定 <code>tagName</code> 参数为 <code>*</code> 可以获得所有子元素。</strong></p><p><strong>[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。</strong></p><p>解释：</p><p>原生获取元素集合的结果并不直接引用 DOM 元素，而是对索引进行读取，所以 DOM 结构的改变会实时反映到结果中。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 显示为 DIV</span></span></span><br><span class="line"><span class="undefined">alert(elements[0].tagName);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> div = elements[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.body.insertBefore(p, div);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 显示为 P</span></span></span><br><span class="line"><span class="undefined">alert(elements[0].tagName);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 获取元素的直接子元素时使用 <code>children</code>。避免使用 <code>childNodes</code> ，除非预期是需要包含文本、注释和属性类型的节点。</strong></p><h4 id="422-样式获取"><a class="markdownIt-Anchor" href="#422-样式获取"></a> 4.2.2 样式获取</h4><p><strong>[建议] 获取元素实际样式信息时，应使用 <code>getComputedStyle</code> 或 <code>currentStyle</code> 。</strong></p><p>解释：</p><p>通过 style 只能获得内联定义或通过 JavaScript 直接设置的样式。通过 CSS class 设置的元素样式无法直接通过 style 获取。</p><h4 id="423-样式设置"><a class="markdownIt-Anchor" href="#423-样式设置"></a> 4.2.3 样式设置</h4><p><strong>[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。</strong></p><p><strong>[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。</strong></p><p>解释：</p><p>除了 IE，标准浏览器会忽略不规范的属性值，导致兼容性问题。</p><h4 id="424-dom-操作"><a class="markdownIt-Anchor" href="#424-dom-操作"></a> 4.2.4 DOM 操作</h4><p><strong>[建议] 操作 <code>DOM</code> 时，尽量减少页面 <code>reflow</code>。</strong></p><p>解释：</p><p>页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的reflow：</p><ul><li>DOM元素的添加、修改（内容）、删除。</li><li>应用新的样式或者修改任何影响元素布局的属性。</li><li>Resize浏览器窗口、滚动页面。</li><li>读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。</li></ul><p><strong>[建议] 尽量减少 <code>DOM</code> 操作。</strong></p><p>解释：</p><p>DOM 操作也是非常耗时的一种操作，减少 DOM 操作有助于提高性能。举一个简单的例子，构建一个列表。我们可以用两种方式：</p><ol><li>在循环体中 createElement 并 append 到父元素中。</li><li>在循环体中拼接 HTML 字符串，循环结束后写父元素的 innerHTML。</li></ol><p>第一种方法看起来比较标准，但是每次循环都会对 DOM 进行操作，性能极低。在这里推荐使用第二种方法。</p><h4 id="425-dom-事件"><a class="markdownIt-Anchor" href="#425-dom-事件"></a> 4.2.5 DOM 事件</h4><p><strong>[建议] 优先使用 <code>addEventListener / attachEvent</code> 绑定事件，避免直接在 HTML 属性中或 DOM 的 <code>expando</code> 属性绑定事件处理。</strong></p><p>解释：</p><p>expando 属性绑定事件容易导致互相覆盖。</p><p><strong>[建议] 使用 <code>addEventListener</code> 时第三个参数使用 <code>false</code>。</strong></p><p>解释：</p><p>标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。</p><p><strong>[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。</strong></p><h2 id="5-jquery"><a class="markdownIt-Anchor" href="#5-jquery"></a> 5 jQuery</h2><h3 id="51-jquery-变量"><a class="markdownIt-Anchor" href="#51-jquery-变量"></a> 5.1 jQuery 变量</h3><p><strong>[强制] 所有使用或缓存 jQuery 对象的变量应该以 <code>$</code> 开头。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br></pre></td></tr></table></figure><p><strong>[建议] 将 jQuery 选择器返回的对象缓存到本地变量中以复用。</strong></p><p>解释：</p><p>选中某一个页面元素，开销很大。所以，使用选择器的次数应该越少越好，对于多次需要操作的元素，尽可能缓存选中的结果，节省其开销。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...stuff...</span></span><br><span class="line">    $(<span class="string">'.sidebar'</span>).css(&#123;</span><br><span class="line">      <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line">    $sidebar.hide();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...stuff...</span></span><br><span class="line">    $sidebar.css(&#123;</span><br><span class="line">      <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="52-选择器"><a class="markdownIt-Anchor" href="#52-选择器"></a> 5.2 选择器</h3><p><strong>选择器的性能排序：</strong></p><ul><li><p>最快的选择器：ID 选择器和元素标签选择器<br>举例来说，下面的语句性能最佳：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id"</span>);</span><br><span class="line">$(<span class="string">"form"</span>);</span><br><span class="line">$(<span class="string">"input"</span>);</span><br></pre></td></tr></table></figure><p>因为遇到这些选择器，jQuery 内部会自动调用浏览器原生方法，所以执行速度快。</p></li><li><p>较慢的选择器：class 选择器<br><code>$(&quot;.className&quot;)</code> 的性能，取决于不同的浏览器。Chrome、Firefox、Safari、Opera 浏览器，都有原生方法 <code>getElementByClassName()</code> ，所以速度并不慢。但是，IE5-IE8 都没有部署这个方法，所以这个选择器在 IE 中会相当慢，jQuery 历次更新对 IE8 之前的版本来说是没有用处的。</p></li><li><p>最慢的选择器：伪类选择器和属性选择器<br>如 <code>$(&quot;:hidden&quot;)</code> ，找出网页中所有隐藏元素；属性选择器例子 <code>$(&quot;[attribute=value]&quot;)</code> 。这两种语句是最慢的，因为浏览器没有针对它们的原生方法。但一些浏览器的新版本，增加了 <code>querySelector()</code> 和 <code>querySelectorAll()</code> 方法，因此会使这类选择器的性能大幅提高。</p></li></ul><p><strong>子元素和父元素关系：</strong></p><p>常见子、父元素写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.child'</span>, $parent);</span><br><span class="line">$parent.find(<span class="string">'.child'</span>);</span><br><span class="line">$parent.children(<span class="string">'.child'</span>);</span><br><span class="line">$(<span class="string">'#parent &gt; .child'</span>);</span><br><span class="line">$(<span class="string">'#parent .child'</span>);</span><br><span class="line">$(<span class="string">'.child'</span>, $(<span class="string">'#parent'</span>));</span><br></pre></td></tr></table></figure><p>以上几种写法，其速度比较：</p><ul><li><code>$('.child', $parent)</code><br>作用是：给定一个 DOM 对象，然后从中选择一个子元素。jQuery 会自动把这条语句转成 <code>$.parent.find('.child')</code> ，这会导致一定的性能损失，比最快方案慢 5%~10% 。</li><li><code>$parent.find('.child')</code><br>这是一种最优方案。<br><code>find()</code> 方法会调用浏览器的原生方法（<code>getElementById</code>，<code>getElementByName</code>，<code>getElementByTagName</code> 等），因此速度最优。</li><li><code>$parent.children('.child')</code><br>jQuery 内部会使用 <code>$.sibling()</code> 和 javascript 的 <code>nextSibling()</code> 方法，一个个遍历节点，比最快方案慢 50% 。</li><li><code>$('#parent &gt; .child')</code><br>jQuery 内部使用 <a href="http://sizzlejs.com/" target="_blank" rel="noopener">Sizzle</a> 引擎，处理各种选择器。Sizzle 引擎的选择顺序是从右到左，所以这条语句是先选 <code>.chile</code> ，然后再一个个过滤出父元素 <code>#parent</code> ，因此，该写法相比最快方案慢 70% 。</li><li><code>$('#parent .child')</code><br>本条与上一条情况相同，但是，上一条只选择直接的子元素，这里可以用于选择多级子元素，所以速度更慢，相比最快方案慢 77% 。</li><li><code>$('.child', $('#parent'))</code><br>jQuery 内部会将其转换为 <code>$('#parent').find('.child')</code> ，比最快方案慢 20% 。</li></ul><p>因此，几种不同写法中，最佳选择是：<code>$parent.find('.child')</code> 。</p><p><strong>[建议] ID 选择器可用时，使用 ID 选择。</strong></p><p>解释：</p><p>在 jQuery 内部，使用 <code>document.getElementById()</code> 。</p><p><strong>[建议] 使用类/伪类选择器时，给选择器附上元素类型来避免扫描整个 DOM 树。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// 在整个DOM树中扫描"products"类名</span></span><br><span class="line"><span class="keyword">var</span> $products = $(<span class="string">".products"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// 只在DIV元素中扫描"products"类名</span></span><br><span class="line"><span class="keyword">var</span> $products = $(<span class="string">"div.products"</span>);</span><br></pre></td></tr></table></figure><p><strong>[建议] 在 <code>ID &gt; 子节点</code> 层级选择器中使用 <code>find()</code> 方法。</strong></p><p>解释：</p><p>因为前半部分选择器没使用到 <a href="http://sizzlejs.com/" target="_blank" rel="noopener"><code>Sizzle</code></a> 选择器引擎来查找元素。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// Sizzle 选择器引擎查找层级</span></span><br><span class="line"><span class="keyword">var</span> $productIds = $(<span class="string">"#products div.id"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// 只有 div.id 走 Sizzle 选择器引擎</span></span><br><span class="line"><span class="keyword">var</span> $productIds = $(<span class="string">"#products"</span>).find(<span class="string">"div.id"</span>);</span><br></pre></td></tr></table></figure><p><strong>[建议] 选择器后半部分比前半部分明确。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// 未优化</span></span><br><span class="line">$(<span class="string">"div.data .gonzalez"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// 优化</span></span><br><span class="line">$(<span class="string">".data td.gonzalez"</span>);</span><br></pre></td></tr></table></figure><p><strong>[建议] 避免冗余选择器。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">".data table.attendees td.gonzalez"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// 有必要时要去掉中间不必要的内容</span></span><br><span class="line">$(<span class="string">".data td.gonzalez"</span>);</span><br></pre></td></tr></table></figure><p><strong>[建议] 给选择器添加上下文。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// 要扫描整个DOM树寻找</span></span><br><span class="line">$(<span class="string">'.class'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// 只在#class-container里扫描</span></span><br><span class="line">$(<span class="string">'.class'</span>, <span class="string">'#class-container'</span>);</span><br><span class="line"><span class="comment">// 更为高效的写法</span></span><br><span class="line">$(<span class="string">'#class-container'</span>).find(<span class="string">'.class'</span>);</span><br></pre></td></tr></table></figure><p><strong>[强制] 禁止使用通配符选择器。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'div.container &gt; *'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'div.container'</span>).children();</span><br></pre></td></tr></table></figure><p><strong>[强制] 禁止使用隐式通配选择器。</strong></p><p>解释：</p><p>采用隐式通配选择器时，会隐式的使用通配符选择器。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'div.someclass :radio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'div.someclass input:radio'</span>);</span><br></pre></td></tr></table></figure><p><strong>[强制] ID 选择器禁止嵌套。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#outer #inner'</span>);</span><br><span class="line">$(<span class="string">'div#inner'</span>);</span><br><span class="line">$(<span class="string">'.outer-container #inner'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'#inner'</span>);</span><br></pre></td></tr></table></figure><h3 id="53-dom-操作"><a class="markdownIt-Anchor" href="#53-dom-操作"></a> 5.3 DOM 操作</h3><p><strong>[建议] 始终先 <code>detach</code> 现有 DOM 元素后进行操作，再将其 <code>append</code> DOM 中。</strong></p><p>解释：</p><p><code>detach</code> 提取出元素后，我们可以在这个元素上进行相关操作，而不是在整个 DOM 文档中进行操作。这样可以减少对整个 DOM 文档的修改，从而减少页面重绘。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//事件代理</span></span><br><span class="line">$(<span class="string">'#container'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(event.target).text());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//利用detach将container从dom文档中剥离开</span></span><br><span class="line"><span class="keyword">var</span> $container = $(<span class="string">'#container'</span>).detach();</span><br><span class="line"><span class="keyword">var</span> child1 = <span class="string">'&lt;div&gt;I am Monkey&lt;/div&gt;'</span>;</span><br><span class="line"><span class="keyword">var</span> child2 = <span class="string">'&lt;div&gt;Monkey is me&lt;/div&gt;'</span>;</span><br><span class="line"><span class="comment">//将child1、child2插入container中</span></span><br><span class="line">$($container).append(child1).append(child2);</span><br><span class="line"><span class="comment">//将container重新插入body中</span></span><br><span class="line">$(<span class="string">'body'</span>).append($container);</span><br></pre></td></tr></table></figure><p><strong>[建议] 使用字符串连接 <code>+</code> 或者 <code>array.join()</code> ，而不是 <code>.append()</code> 方法。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> $myList = $(<span class="string">"#list"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    $myList.append(<span class="string">"&lt;li&gt;"</span>+i+<span class="string">"&lt;/li&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> $myList = $(<span class="string">"#list"</span>);</span><br><span class="line"><span class="keyword">var</span> list = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    list += <span class="string">"&lt;li&gt;"</span>+i+<span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$myList.html(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// better</span></span><br><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    array[i] = <span class="string">"&lt;li&gt;"</span>+i+<span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$myList.html(array.join(<span class="string">''</span>));</span><br></pre></td></tr></table></figure><p><strong>[建议] 不操作未知元素。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// 这个函数内部要先执行3个函数，才发现选择器选择到的可能是空内容</span></span><br><span class="line">$(<span class="string">"#nosuchthing"</span>).slideUp();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> $mySelection = $(<span class="string">"#nosuchthing"</span>);</span><br><span class="line"><span class="keyword">if</span> ($ Selection.length) &#123;</span><br><span class="line">    $mySelection.slideUp();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] 尽量少生成 jQuery 对象。</strong></p><p>解释：</p><p>每当你使用一次选择器（如：<code>$('#id')</code>），就会生成一个 jQuery 对象。jQuery 对象是一个很庞大的对象，带有很多的属性和方法，会占用不少的资源。所以，尽量少生成 jQuery 对象。<br>许多 jQuery 方法都有两个版本：</p><ul><li>供 jQuery 对象使用的版本</li><li>供 jQuery 函数使用的版本</li></ul><p>由于后一种针对 jQuery 函数的版本不通过 jQuery 对象操作，所以相对开销较小，速度比较快。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> $text = $(<span class="string">"#text"</span>);</span><br><span class="line"><span class="keyword">var</span> str = $text.text();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> $text = $(<span class="string">"#text"</span>);</span><br><span class="line"><span class="keyword">var</span> str = $.text($text);</span><br><span class="line"></span><br><span class="line"><span class="comment">//bad</span></span><br><span class="line"><span class="keyword">var</span> $elem = $(<span class="string">'#elem'</span>);</span><br><span class="line">$elem.data(key, value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> $elem = $(<span class="string">'#elem'</span>);</span><br><span class="line">$.data($elem, key, value);</span><br></pre></td></tr></table></figure><p><strong>[建议] 优先采用原生写法实现循环。</strong></p><p>解释：</p><p>循环是一种比较耗时的操作，javascript 原生循环方法 <code>for</code> 和 <code>while</code> ，要比 jQuery 的 <code>.each()</code> 方法快，所以优先采用原生方法。</p><p><strong>[建议] 参数尽量使用对象字面量。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$myLink.attr(<span class="string">"href"</span>, <span class="string">"#"</span>).attr(<span class="string">"title"</span>, <span class="string">"my link"</span>).attr(<span class="string">"rel"</span>, <span class="string">"external"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$myList.attr(&#123;</span><br><span class="line">    href: <span class="string">"#"</span>,</span><br><span class="line">    title: <span class="string">"my link"</span>,</span><br><span class="line">    rel: <span class="string">"external"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>[建议] 不要把 CSS 混入 jQuery 代码。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">"#mydiv"</span>).css(&#123;<span class="string">'color'</span>:red, <span class="string">'font-weight'</span>:<span class="string">'bold'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">.error &#123; <span class="attr">color</span>: red; font-weight: bold; &#125;</span><br><span class="line">$(<span class="string">"#mydiv"</span>).addClass(<span class="string">"error"</span>);</span><br></pre></td></tr></table></figure><h3 id="54-事件"><a class="markdownIt-Anchor" href="#54-事件"></a> 5.4 事件</h3><p><strong>[强制] 每个页面只使用一个 Document Ready 函数，便于调试。</strong></p><p><strong>[建议] 不使用匿名函数绑定事件。</strong></p><p>解释：</p><p>匿名函数不利于调试、维护、测试和复用。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">"#myLink"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myLinkClickHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#myLink"</span>).on(<span class="string">"click"</span>, myLinkClickHandler);</span><br></pre></td></tr></table></figure><p><strong>[建议] Document Ready 函数不使用匿名函数。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// 不易复用和测试</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(initPage);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(initPage);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议] Document Ready 函数写在外部函数里，在其他初始化设置之后，在行内 JS 里调用这些函数。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"my-document-ready.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 任何其他需要设置的全局变量</span></span></span><br><span class="line"><span class="javascript">  $(<span class="built_in">document</span>).ready(initPage);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// or $(initPage);</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[强制] 不在 HTML 文件里添加行内 JS 。</strong></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"myLink"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"myEventHandler();"</span>&gt;</span>my link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#myLink"</span>).on(<span class="string">"click"</span>, myEventHandler);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>[建议] 在特定情况下，对事件使用自定义命名空间。</strong></p><p>解释：</p><p>有利于解绑某 DOM 元素上特定的事件而不会影响到该 DOM 元素上其他的事件。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#myLink"</span>).on(<span class="string">"click.mySpecialClick"</span>, myEventHandler);</span><br><span class="line"><span class="comment">// 后面会很容易的解绑这个特定的点击事件</span></span><br><span class="line">$(<span class="string">"#myLink"</span>).unbind(<span class="string">"click.mySpecialClick"</span>);</span><br></pre></td></tr></table></figure><p><strong>[建议] 采用事件的委托处理。</strong></p><p>解释：</p><p>javascript 的事件模型，采用”冒泡”模式，也就是说，子元素的事件会逐级向上”冒泡”，成为父元素的事件。<br>利用这一点，可以大大简化事件的绑定。比如，有一个表格（ table 元素），里面有100个格子（ td 元素），现在要求在每个格子上面绑定一个点击事件（ click ），请问是否需要将下面的命令执行100次？<br>回答是不需要，我们只要把这个事件绑定在 table 元素上面就可以了，因为 td 元素发生点击事件之后，这个事件会”冒泡”到父元素 table 上面，从而被监听到。<br>因此，这个事件只需要在父元素绑定1次即可，而不需要在子元素上绑定100次，从而大大提高性能。这就叫事件的”委托处理”，也就是子元素”委托”父元素处理这个事件。<br>具体的写法有两种。</p><ul><li>采用 <code>.delegate()</code> 方法</li><li>采用 <code>.live()</code> 方法</li></ul><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">"td"</span>).bind(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).toggleClass(<span class="string">"click"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// fun 1</span></span><br><span class="line">$(<span class="string">"table"</span>).delegate(<span class="string">"td"</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).toggleClass(<span class="string">"click"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// fun 2</span></span><br><span class="line">$(<span class="string">"table"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"td"</span>, <span class="keyword">this</span>).live(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).toggleClass(<span class="string">"click"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这两种写法基本等价。唯一的区别在于， <code>.delegate()</code> 是当事件冒泡到指定的父元素时触发， <code>.live()</code> 则是当事件冒泡到文档的根元素后触发，因此 <code>.delegate()</code> 比 <code>.live()</code> 稍快一点。此外，这两种方法相比传统的 <code>.bind()</code> 方法还有一个好处，那就是对动态插入的元素也有效， <code>.bind()</code> 只对已经存在的DOM元素有效，对动态插入的元素无效。<br>根据测试，委托处理比不委托处理，快了几十倍。在委托处理的情况下， <code>.delegate()</code> 又比 <code>.live()</code> 大约快26%。</p><h3 id="55-ajax"><a class="markdownIt-Anchor" href="#55-ajax"></a> 5.5 Ajax</h3><p><strong>[建议] 直接使用 <code>$.ajax()</code> ,避免使用 <code>.getJSON()</code> 和 <code>.get()</code> 。</strong></p><p>解释：</p><p><code>.getJSON()</code> 和 <code>.get()</code> 都是在内部调用 <code>$.ajax()</code> 实现。</p><p><strong>[建议] 不要在 https 的站点使用 http 请求，采用无模式的 url （在 url 上去掉 http/https）。</strong></p><p><strong>[强制] 禁止请求参数放在 url 里，而是放在 data 对象。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// 不可读</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"something.php?param1=test1&amp;param2=test2"</span>,</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// 可读</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"something.php"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        param1: test1,</span><br><span class="line">        param2: test2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>[建议] 明确设置数据的类型 <code>dataType</code> 据。</strong></p><p>解释：</p><p>这样很容易知道当前正在处理什么样的数。</p><p><strong>[建议] 对 Ajax 加载的 DOM 元素绑定事件时尽量使用事件代理。</strong></p><p>解释：</p><p>事件代理的优势是对于 Ajax 后来添加到 DOM 的元素也能响应事件。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#parent-container"</span>).on(<span class="string">"click"</span>, <span class="string">"a"</span>, delegatedClickHandlerForAjax);</span><br></pre></td></tr></table></figure><p><strong>[建议] 使用 Promise 。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;).then(</span><br><span class="line">    successHandler,</span><br><span class="line">    failureHandler</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">var</span> jqxhr = $.ajax(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line">jqxhr.done(successHandler);</span><br><span class="line">jqxhr.fail(failureHandler);</span><br></pre></td></tr></table></figure><p><strong>[建议] Ajax 参考模板。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jqxhr = $.ajax(&#123;</span><br><span class="line">    url: url,</span><br><span class="line">    type: <span class="string">"GET"</span>,      <span class="comment">// 默认值GET，可根据需要配置</span></span><br><span class="line">    cache: <span class="literal">true</span>,      <span class="comment">// 默认值true, dataType是'script'或'jsonp'时为false，可根据需要配置</span></span><br><span class="line">    data: &#123;&#125;,         <span class="comment">// 请求参数对象</span></span><br><span class="line">    dataType: <span class="string">"json"</span>, <span class="comment">// 设置数据类型</span></span><br><span class="line">    jsonp: <span class="string">"callback"</span>,<span class="comment">// 只在操作JSONP时设置此项</span></span><br><span class="line">    statusCode: &#123;     <span class="comment">// 针对特定错误码的回调处理函数</span></span><br><span class="line">        <span class="number">404</span>: handler404,</span><br><span class="line">        <span class="number">500</span>: handler500</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">jqxhr.done(successHandler);</span><br><span class="line">jqxhr.fail(failureHandler);</span><br></pre></td></tr></table></figure><h3 id="56-链式写法"><a class="markdownIt-Anchor" href="#56-链式写法"></a> 5.6 链式写法</h3><p><strong>[建议] 尽量使用链式写法，而不是用变量缓存或者多次选择器方法。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">"#myDiv"</span>).addClass(<span class="string">"error"</span>);</span><br><span class="line">$(<span class="string">"#myDiv"</span>).show();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">"#myDiv"</span>).addClass(<span class="string">"error"</span>).show();</span><br></pre></td></tr></table></figure><p><strong>[建议] 当链式写法超过三次或者因为事件绑定变得复杂后，使用换行和缩进保持代码可读性。</strong></p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#myLink"</span>)</span><br><span class="line">    .addClass(<span class="string">"bold"</span>)</span><br><span class="line">    .on(<span class="string">"click"</span>, myClickHandler)</span><br><span class="line">    .on(<span class="string">"mouseover"</span>, myMouseOverHandler)</span><br><span class="line">    .show();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E8%83%8C%E6%99%AF&quot;&gt;1 背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC&quot;&gt;2 代码风格&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-%E6%96%87%E4%BB%B6&quot;&gt;2.1 文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-%E7%BB%93%E6%9E%84&quot;&gt;2.2 结构&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#221-%E7%BC%A9%E8%BF%9B&quot;&gt;2.2.1 缩进&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#222-%E7%A9%BA%E6%A0%BC&quot;&gt;2.2.2 空格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#223-%E6%8D%A2%E8%A1%8C&quot;&gt;2.2.3 换行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#224-%E8%AF%AD%E5%8F%A5&quot;&gt;2.2.4 语句&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#225-%E5%9D%97&quot;&gt;2.2.5 块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#226-%E9%80%97%E5%8F%B7&quot;&gt;2.2.6 逗号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#227-%E5%88%86%E5%8F%B7&quot;&gt;2.2.7 分号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-%E5%91%BD%E5%90%8D&quot;&gt;2.3 命名&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#24-%E6%B3%A8%E9%87%8A&quot;&gt;2.4 注释&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#241-%E5%8D%95%E8%A1%8C%E6%B3%A8%E9%87%8A&quot;&gt;2.4.1 单行注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#242-%E5%A4%9A%E8%A1%8C%E6%B3%A8%E9%87%8A&quot;&gt;2.4.2 多行注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#243-%E6%96%87%E6%A1%A3%E5%8C%96%E6%B3%A8%E9%87%8A&quot;&gt;2.4.3 文档化注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#244-%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89&quot;&gt;2.4.4 类型定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#245-%E6%96%87%E4%BB%B6%E6%B3%A8%E9%87%8A&quot;&gt;2.4.5 文件注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#246-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%B3%A8%E9%87%8A&quot;&gt;2.4.6 命名空间注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#247-%E7%B1%BB%E6%B3%A8%E9%87%8A&quot;&gt;2.4.7 类注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#248-%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95%E6%B3%A8%E9%87%8A&quot;&gt;2.4.8 函数/方法注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#249-%E4%BA%8B%E4%BB%B6%E6%B3%A8%E9%87%8A&quot;&gt;2.4.9 事件注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2410-%E5%B8%B8%E9%87%8F%E6%B3%A8%E9%87%8A&quot;&gt;2.4.10 常量注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2411-%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B%E6%B3%A8%E9%87%8A&quot;&gt;2.4.11 复杂类型注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2412-amd-%E6%A8%A1%E5%9D%97%E6%B3%A8%E9%87%8A&quot;&gt;2.4.12 AMD 模块注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2413-%E7%BB%86%E8%8A%82%E6%B3%A8%E9%87%8A&quot;&gt;2.4.13 细节注释&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7&quot;&gt;3 语言特性&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-%E5%8F%98%E9%87%8F&quot;&gt;3.1 变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-%E6%9D%A1%E4%BB%B6&quot;&gt;3.2 条件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33-%E5%BE%AA%E7%8E%AF&quot;&gt;3.3 循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#34-%E7%B1%BB%E5%9E%8B&quot;&gt;3.4 类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#341-%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B&quot;&gt;3.4.1 类型检测&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#342-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2&quot;&gt;3.4.2 类型转换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#35-%E5%AD%97%E7%AC%A6%E4%B8%B2&quot;&gt;3.5 字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#36-%E5%AF%B9%E8%B1%A1&quot;&gt;3.6 对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#37-%E6%95%B0%E7%BB%84&quot;&gt;3.7 数组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#38-%E5%87%BD%E6%95%B0&quot;&gt;3.8 函数&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#381-%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F&quot;&gt;3.8.1 函数表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#382-%E5%87%BD%E6%95%B0%E9%95%BF%E5%BA%A6&quot;&gt;3.8.2 函数长度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#383-%E5%8F%82%E6%95%B0%E8%AE%BE%E8%AE%A1&quot;&gt;3.8.3 参数设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#384-%E9%97%AD%E5%8C%85&quot;&gt;3.8.4 闭包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#385-%E7%A9%BA%E5%87%BD%E6%95%B0&quot;&gt;3.8.5 空函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#39-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1&quot;&gt;3.9 面向对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#310-%E5%8A%A8%E6%80%81%E7%89%B9%E6%80%A7&quot;&gt;3.10 动态特性&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#3101-eval&quot;&gt;3.10.1 eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3102-%E5%8A%A8%E6%80%81%E6%89%A7%E8%A1%8C%E4%BB%A3%E7%A0%81&quot;&gt;3.10.2 动态执行代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3103-with&quot;&gt;3.10.3 with&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3104-delete&quot;&gt;3.10.4 delete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3105-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7&quot;&gt;3.10.5 对象属性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#311-%E5%AD%98%E5%8F%96%E5%99%A8&quot;&gt;3.11 存取器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83&quot;&gt;4 浏览器环境&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#41-%E6%A8%A1%E5%9D%97%E5%8C%96&quot;&gt;4.1 模块化&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#411-amd&quot;&gt;4.1.1 AMD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#412-define&quot;&gt;4.1.2 define&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#413-require&quot;&gt;4.1.3 require&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#42-dom&quot;&gt;4.2 DOM&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#421-%E5%85%83%E7%B4%A0%E8%8E%B7%E5%8F%96&quot;&gt;4.2.1 元素获取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#422-%E6%A0%B7%E5%BC%8F%E8%8E%B7%E5%8F%96&quot;&gt;4.2.2 样式获取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#423-%E6%A0%B7%E5%BC%8F%E8%AE%BE%E7%BD%AE&quot;&gt;4.2.3 样式设置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#424-dom-%E6%93%8D%E4%BD%9C&quot;&gt;4.2.4 DOM 操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#425-dom-%E4%BA%8B%E4%BB%B6&quot;&gt;4.2.5 DOM 事件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-jquery&quot;&gt;5 jQuery&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#51-jquery-%E5%8F%98%E9%87%8F&quot;&gt;5.1 jQuery 变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#52-%E9%80%89%E6%8B%A9%E5%99%A8&quot;&gt;5.2 选择器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#53-dom-%E6%93%8D%E4%BD%9C&quot;&gt;5.3 DOM 操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#54-%E4%BA%8B%E4%BB%B6&quot;&gt;5.4 事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#55-ajax&quot;&gt;5.5 Ajax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#56-%E9%93%BE%E5%BC%8F%E5%86%99%E6%B3%95&quot;&gt;5.6 链式写法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="开发规范" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/js/"/>
    
    
      <category term="开发规范" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>EditorConfig 代码格式定义</title>
    <link href="http://yoursite.com/2018/03/12/editorconfig/"/>
    <id>http://yoursite.com/2018/03/12/editorconfig/</id>
    <published>2018-03-12T12:33:01.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%AF%B4%E6%98%8E">1 配置项说明</a></li><li><a href="#2-%E9%80%9A%E9%85%8D%E7%AC%A6wildcard-patterns">2 通配符（Wildcard Patterns）</a></li><li><a href="#3-%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B">3 配置示例</a></li></ul></p><a id="more"></a><p>在项目开发过程中，如果涉及到多人一起合作开发，以及在开发过程中，还会有代码 review 等相关操作，这时候，团队内一种统一风格的代码编写方式显得尤为重要。而目前市面上的代码编辑器又非常多，代码格式化的工具或插件等也有很多，如要达到我们的风格一致的要求，借助工具的帮助最为直接。<br><a href="https://github.com/editorconfig" target="_blank" rel="noopener"><strong>EditorConfig</strong></a> 即是一款定义各代码风格的工具，其在很多工具中都能得到支持，如：WebStrom、Atom、Sublime、VSCode等。</p><h2 id="1-配置项说明"><a class="markdownIt-Anchor" href="#1-配置项说明"></a> 1 配置项说明</h2><p>EditorConfig 文件使用 INI 格式，允许在分段名（section names）中使用 <strong>and</strong>，分段名是全局的文件路径，格式类似于 <strong>gitignore</strong>。斜杠（/）作为路径分隔符，# 或 ; 作为注释。注释应该单独占一行。<br>EditorConfig 文件使用 utf-8 格式，crlf 或 lf 作为换行符。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表明是最顶层配置文件，发现设为 true 时，才会停止查找 .editorconfig 文件</span></span><br><span class="line"><span class="attr">root</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缩进样式，可以设置为 tab 或 space 两个值</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当缩进样式设置为 space 时，用来设置每次缩进相当于多少列</span></span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当缩进设置为 tab 时，用来设置每次缩进相当于多少列代码</span></span><br><span class="line"><span class="attr">tab_width</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义行末采用什么符号来进行换行，可以选择包括：lf、cr 和 crlf</span></span><br><span class="line"><span class="attr">end_of_line</span> = crlf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编码格式，支持： latin1、utf-8、utf-8-bom、utf-16be 和 utf-16le，不建议使用 utf-8-bom</span></span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否除去代码行末的任意空白字符，true 或 false</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否以一个空白行结尾文件，true 或 false</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>以上即是相关配置项，及其说明。目前所有的属性名和属性值都是大小写不敏感的，编译时会自动将其转换为小写。通常，如果没有明确指定某个属性，则会使用编辑器的配置，而 EditorConfig 不会处理。<br>另外，并不是所有的编辑器插件都支持以上全部配置属性，项目 <a href="https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties" target="_blank" rel="noopener">Wiki</a> 上有兼容配置属性的详细参考。<br>推荐不要指定某些属性，如，tab_width 不需要特别指定，除非它与 indent_size 不同。同样的，当 indent_style 设置为 tab 时，不需要配置 indent_size ，这样方便阅读者使用他们习惯的缩进格式。仍没有规范化的属性，就最好不要设置它，如：end_of_line。</p><h2 id="2-通配符wildcard-patterns"><a class="markdownIt-Anchor" href="#2-通配符wildcard-patterns"></a> 2 通配符（Wildcard Patterns）</h2><table><thead><tr><th style="text-align:left">通配符</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">*</td><td>除路径分隔符 / 外匹配所有字符串字符</td></tr><tr><td style="text-align:left">**</td><td>除路径分隔符 / 外匹配所有字符串字符</td></tr><tr><td style="text-align:left">?</td><td>匹配所有单个字符</td></tr><tr><td style="text-align:left">[name]</td><td>匹配 name 字符</td></tr><tr><td style="text-align:left">[!name]</td><td>匹配非 name 字符</td></tr><tr><td style="text-align:left">{s1,s2,s3}</td><td>匹配任意给定的字符串，通过逗号分隔</td></tr></tbody></table><p>特殊字符需要通过转义符进行转义，使得特殊字符不会被当做通配符解析。</p><h2 id="3-配置示例"><a class="markdownIt-Anchor" href="#3-配置示例"></a> 3 配置示例</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">root</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*]</span></span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*.&#123;js,html&#125;]</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*.&#123;less,scss&#125;]</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[&#123;package.json,.travis.yml&#125;]</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E9%85%8D%E7%BD%AE%E9%A1%B9%E8%AF%B4%E6%98%8E&quot;&gt;1 配置项说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E9%80%9A%E9%85%8D%E7%AC%A6wildcard-patterns&quot;&gt;2 通配符（Wildcard Patterns）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E9%85%8D%E7%BD%AE%E7%A4%BA%E4%BE%8B&quot;&gt;3 配置示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="前端工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="EditorConfig" scheme="http://yoursite.com/tags/EditorConfig/"/>
    
      <category term="插件" scheme="http://yoursite.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客升级并上传 github</title>
    <link href="http://yoursite.com/2018/02/27/update-hexo-blog/"/>
    <id>http://yoursite.com/2018/02/27/update-hexo-blog/</id>
    <published>2018-02-27T11:08:39.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E9%97%AE%E9%A2%98%E6%9C%89%E5%93%AA%E4%BA%9B">1 问题有哪些</a></li><li><a href="#2-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%86%E6%95%A3%E4%B8%8E%E5%8D%87%E7%BA%A7%E7%9A%84%E7%9F%9B%E7%9B%BE">2 配置文件分散与升级的矛盾</a><ul><li><a href="#21-hexo-%E9%85%8D%E7%BD%AE">2.1 hexo 配置</a></li><li><a href="#22-next-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE">2.2 NexT 主题配置</a></li><li><a href="#23-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F">2.3 自定义样式</a></li></ul></li><li><a href="#3-github-%E5%90%8C%E6%97%B6%E6%89%98%E7%AE%A1%E6%BA%90%E7%A0%81%E4%B8%8E%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9">3 github 同时托管源码与静态站点</a><ul><li><a href="#31-git-ignore-%E9%85%8D%E7%BD%AE">3.1 git ignore 配置</a></li><li><a href="#32-github-%E9%85%8D%E7%BD%AE">3.2 github 配置</a></li></ul></li><li><a href="#4-%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E7%BC%96%E8%BE%91%E5%99%A8">4 博客编写编辑器</a></li></ul></p><a id="more"></a><p>Hexo 的主程，因为在不断的升级变化，在最初搭建博客时，使用的版本是 <strong>3.2.0</strong>，目前已经发展到了 <strong>3.5.0</strong>。另外，还有其他一些相关的插件，包括主题等都有了相应的更新，因此，近期考虑了一下将整体升级一次。<br>其中遇到了不少的问题，这里将这些问题记录一下。</p><h2 id="1-问题有哪些"><a class="markdownIt-Anchor" href="#1-问题有哪些"></a> 1 问题有哪些</h2><ul><li>hexo 本身就有配置文件，主题也有配置文件，多位置配置，导致升级非常麻烦</li><li>博客使用 github page 托管，但 markdown 源码又是使用其他的库来保存，导致管理分散</li><li>在写博客的过程中，没有找到合适顺手的编辑软件，很不方便</li></ul><h2 id="2-配置文件分散与升级的矛盾"><a class="markdownIt-Anchor" href="#2-配置文件分散与升级的矛盾"></a> 2 配置文件分散与升级的矛盾</h2><p>hexo 的配置文件位置 <em>_config.yml</em> ，以及相应安装主题的配置文件 <em>themes/xxxx/_config.yml</em> ，这两者在一定程度上加大了程度升级的复杂度。<br>以我安装的 NexT 主题为例，它本身的配置项非常的多，再加上其也在不断的升级更新，如果我们的配置文件存储位置在其项目工程目录以内，就导致了主题在更新升级时，可能会存在被覆盖的风险。<br>这些还只是配置文件，如果再还有对页面样式、模板等内容进行过自定义，这些内容就更容易被覆盖。因此，我急需将这些内容移出，并独立于主题的工程目录。<br>所幸，hexo 官方本身也考虑到了这一点，支持 <a href="https://hexo.io/zh-cn/docs/data-files.html" target="_blank" rel="noopener">数据文件夹</a> 的配置使用，<em>source/_data/</em> 目录。</p><h3 id="21-hexo-配置"><a class="markdownIt-Anchor" href="#21-hexo-配置"></a> 2.1 hexo 配置</h3><p><strong>配置路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br></pre></td></tr></table></figure><p><strong>配置内容</strong><br>为了配置项的相对集中，该配置文件中的某些相关的内容，可以移入数据文件夹，也主题 NexT 的配置相结合。必需在该路径下配置的有：</p><ul><li>theme</li><li>deploy</li><li>Directory 中的： skip_render</li><li>symbols_count_time<br>其他的配置项可以保持原有值不修改，具体的配置值可以拷贝一份到数据文件夹。</li></ul><h3 id="22-next-主题配置"><a class="markdownIt-Anchor" href="#22-next-主题配置"></a> 2.2 NexT 主题配置</h3><p><strong>配置路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>/_data/next.yml</span><br></pre></td></tr></table></figure><p><strong>配置内容</strong><br>将 hexo 配置中的必须配置项以外的项目，全部拷贝一份到 next.yml ，以及将主题 next 的配置文件(themes/next/_config.yml)中全部配置文件，再对相应的配置项进行修改。<br>前提条件是，使用 next 的主题版本在 6.0.x，<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md" target="_blank" rel="noopener">详细的说明</a>，可以参考官网帮助手册。</p><h3 id="23-自定义样式"><a class="markdownIt-Anchor" href="#23-自定义样式"></a> 2.3 自定义样式</h3><p>对于 NexT 主题，在某些情况下，个人还是希望能对其样式有所修改，同时期望不会影响到 NexT 本身的升级，因此，可以借助数据文件夹的思路，将个性化的样式表，建于此处。<br><strong>配置路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>/_data/styles.styl</span><br></pre></td></tr></table></figure><h2 id="3-github-同时托管源码与静态站点"><a class="markdownIt-Anchor" href="#3-github-同时托管源码与静态站点"></a> 3 github 同时托管源码与静态站点</h2><p>一般的思路，并且现在大多的博客上所说明的，一般是 github pages 如何部署，结合 Hexo 的话，就是如何配置好 github 的部署参数后，再执行 <em>hexo d</em> 命令成功完成部署就基本结束了。<br>但我们还有一部分，我们在博客编写过程中，还有很多的 markdown 源码，这些内容，我们要如何来进行管理，难道一个仓库就只能用于托管一个静态站点吗？<br>显然不是的，我们的静态站点，只占用了仓库的一个分支 <strong>master</strong>， 也就是说，我们完成可以建立其他的分支，来用于存储我们的 markdown 源码。</p><h3 id="31-git-ignore-配置"><a class="markdownIt-Anchor" href="#31-git-ignore-配置"></a> 3.1 git ignore 配置</h3><p>工程目录下，因包含有很多编译输出的结果，以及 nodejs 模块目录，而这些内容，是不需要提交到仓库的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .gitignore</span></span><br><span class="line">.idea</span><br><span class="line">.deploy_git</span><br><span class="line">node_modules</span><br><span class="line">public</span><br><span class="line">themes</span><br><span class="line">db.json</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure><h3 id="32-github-配置"><a class="markdownIt-Anchor" href="#32-github-配置"></a> 3.2 github 配置</h3><p>因是升级处理该系统，因此，原本仓库中已经存在有相关内容，现在的做法是，将 Hexo 的工程源码，提交到一个新建的分支中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在根目录下进行 git 初始</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置远程仓库参数</span></span><br><span class="line">git remote add origin https://github.com/lfire/lfire.github.io.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个远程分支 src</span></span><br><span class="line">git checkout -b src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有源码</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"init the blog source"</span></span><br><span class="line">git push origin src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补充一个有用的命令</span></span><br><span class="line"><span class="comment"># 因误操作，创建了一个错误的分支</span></span><br><span class="line"><span class="comment"># 需要删除</span></span><br><span class="line"><span class="comment"># git push origin --delete xxxx</span></span><br></pre></td></tr></table></figure><p>这样，分支 <em>src</em> 就将所有相关的源码进行了管理，而 <em>master</em> 分支则管理了 github pages 的站点。</p><h2 id="4-博客编写编辑器"><a class="markdownIt-Anchor" href="#4-博客编写编辑器"></a> 4 博客编写编辑器</h2><p>最初，一直没能找到一个得心应手的编辑器，后面选择了一款付费软件， Cmd Markdown，但对于 Hexo 的支持，只能说是到达 markdown 的支持，如果要细化到 Hexo 本身，这就有差距了。还有就是，Cmd markdown 使用的是其自建的图床，个人有点担心，还是希望可以自己掌握所有这些资源的去处，最后选择了配置七牛。<br>另外一个方面， vscode 和 atom 的发展速度确实惊人，这两款软件提供了大量的插件可用，与我个人使用习惯一匹配，个人最后选择了 Atom 。<br><img src="http://pic.hqmmw.com/8e64a09f34f780e41f907342a838491c.png" alt="write markdown blog with atom"><br>其中有一个重要的插件，可以提一下，<a href="https://atom.io/packages/markdown-preview-enhanced" target="_blank" rel="noopener">Markdown Preview Enhanced</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E9%97%AE%E9%A2%98%E6%9C%89%E5%93%AA%E4%BA%9B&quot;&gt;1 问题有哪些&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%88%86%E6%95%A3%E4%B8%8E%E5%8D%87%E7%BA%A7%E7%9A%84%E7%9F%9B%E7%9B%BE&quot;&gt;2 配置文件分散与升级的矛盾&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-hexo-%E9%85%8D%E7%BD%AE&quot;&gt;2.1 hexo 配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-next-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE&quot;&gt;2.2 NexT 主题配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F&quot;&gt;2.3 自定义样式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-github-%E5%90%8C%E6%97%B6%E6%89%98%E7%AE%A1%E6%BA%90%E7%A0%81%E4%B8%8E%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9&quot;&gt;3 github 同时托管源码与静态站点&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-git-ignore-%E9%85%8D%E7%BD%AE&quot;&gt;3.1 git ignore 配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-github-%E9%85%8D%E7%BD%AE&quot;&gt;3.2 github 配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E7%BC%96%E8%BE%91%E5%99%A8&quot;&gt;4 博客编写编辑器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="hexo" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Agile知多少</title>
    <link href="http://yoursite.com/2017/12/05/about-agile/"/>
    <id>http://yoursite.com/2017/12/05/about-agile/</id>
    <published>2017-12-05T09:44:15.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E7%BD%91%E5%8F%8B%E7%9C%8B%E6%95%8F%E6%8D%B7">1 网友看敏捷</a></li><li><a href="#2-agile%E4%BD%95%E4%B8%BA%E6%95%8F%E6%8D%B7">2 Agile，何为敏捷？</a></li><li><a href="#3-agile%E5%B7%AE%E5%88%AB%E5%9C%A8%E5%93%AA%E4%B8%8E%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E4%BA%A4%E4%BB%98%E6%96%B9%E6%B3%95%E7%9B%B8%E6%AF%94%E8%BE%83">3 Agile，差别在哪（与传统开发交付方法相比较）</a></li><li><a href="#4-agile%E4%BC%98%E5%8A%BF%E5%9C%A8%E5%93%AA">4 Agile，优势在哪？</a></li><li><a href="#5-%E6%95%8F%E6%8D%B7%E7%9A%84%E4%BB%B7%E5%80%BC%E8%A7%82values">5 敏捷的价值观（Values）</a></li><li><a href="#6-%E6%95%8F%E6%8D%B7%E7%9A%84%E5%8E%9F%E5%88%99principes">6 敏捷的原则（Principes）</a></li><li><a href="#7-%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%E5%AE%9E%E8%B7%B5">7 敏捷开发管理实践</a><ul><li><a href="#71-scrum">7.1 Scrum</a></li><li><a href="#72-lean">7.2 Lean</a></li><li><a href="#73-xp">7.3 XP</a></li><li><a href="#74-%E5%85%B6%E5%AE%83">7.4 其它</a></li></ul></li><li><a href="#8-scrum">8 Scrum</a><ul><li><a href="#81-scrum-3-3-5-5-%E7%89%B9%E6%80%A7">8.1 Scrum 3-3-5-5 特性</a></li><li><a href="#82-scrum%E6%95%8F%E6%8D%B7%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2">8.2 Scrum敏捷团队中的角色</a></li><li><a href="#83-scrum%E6%95%8F%E6%8D%B7%E5%9B%A2%E9%98%9F%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B">8.3 Scrum敏捷团队工作流程</a></li><li><a href="#84-%E4%B8%BB%E8%A6%81%E7%9A%84%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5">8.4 主要的敏捷开发工程实践</a></li></ul></li></ul></p><a id="more"></a><p>随软件的不断复杂，相应的软件开发思想也在不断的发展。<strong>敏捷开发</strong>就是其中所提出来的一种，相应的实践也有很多，目前的发展趋势也非常火爆，今天对于这个方向，梳理一下一些基础的内容，用于初步了解敏捷的思想，以及一些基本的概念。</p><h2 id="1-网友看敏捷"><a class="markdownIt-Anchor" href="#1-网友看敏捷"></a> 1 网友看敏捷</h2><p><img src="http://static.zybuluo.com/lfire/odpurt8c7iwoq5w6ykv4j08f/successRates2013.jpg" alt="successRates2013.jpg-96.1kB"></p><blockquote><p>敏捷，往小了说是改进了开发方法，往大了说是革了瀑布流式的命——把产品开发引向了快速迭代、小步快跑的路线上。</p></blockquote><h2 id="2-agile何为敏捷"><a class="markdownIt-Anchor" href="#2-agile何为敏捷"></a> 2 Agile，何为敏捷？</h2><p><strong>敏捷开发</strong>是一个<strong>灵活的开发方法</strong>，用于在一个<strong>动态</strong>的环境中向干系人<strong>快速</strong>交付价值。其主要特点是关注持续的交付价值，<strong>通过迭代和快速用户反馈管理不确定性和拥抱变更</strong>；它承认个人才是价值的最终源泉，<strong>强调通过有效的个人激励，提升团队的工作绩效</strong>。</p><h2 id="3-agile差别在哪与传统开发交付方法相比较"><a class="markdownIt-Anchor" href="#3-agile差别在哪与传统开发交付方法相比较"></a> 3 Agile，差别在哪（与传统开发交付方法相比较）</h2><p>敏捷 VS 传统  &lt;===&gt;  价值驱动 VS 计划驱动</p><p><img src="http://static.zybuluo.com/lfire/gz6bhwzi4ohpf027z5dl1wfi/forum_1499308033_52.png" alt="forum_1499308033_52.png-61.6kB"></p><h2 id="4-agile优势在哪"><a class="markdownIt-Anchor" href="#4-agile优势在哪"></a> 4 Agile，优势在哪？</h2><ul><li>拥抱变化：通过短周期迭代，尽可能早的交付可用的迭代版本来拥抱和适应变化</li><li>进度可视：可视化的评估进度模式在传统模式（瀑布）里面难以做到</li><li>注重客户</li><li>团队沟通</li><li>自管理</li><li>…</li></ul><h2 id="5-敏捷的价值观values"><a class="markdownIt-Anchor" href="#5-敏捷的价值观values"></a> 5 敏捷的价值观（Values）</h2><ul><li>个体与互动  <strong>高于</strong> 流程与工具</li><li>工作的软件  <strong>高于</strong> 详尽的文档</li><li>客户合作    <strong>高于</strong> 合同谈判</li><li>响应变化    <strong>高于</strong> 遵循变化</li></ul><p>尽管右侧项有其价值，但敏捷更注重左侧项的价值。</p><h2 id="6-敏捷的原则principes"><a class="markdownIt-Anchor" href="#6-敏捷的原则principes"></a> 6 敏捷的原则（Principes）</h2><ol><li>我们最重要的目标，是通过<strong>持续不断</strong>地及早交付<strong>有价值</strong>的软件，使客户满意。</li><li>欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程<strong>掌控变化</strong>。</li><li>经常地交付可工作的软件，相隔几星期或一两个月，倾向于采取<strong>较短的周期</strong>。</li><li>业务人员和开发人员<strong>相互合作</strong>，项目中的每一天都不例外。</li><li>激发<strong>个体的斗志</strong>，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。</li><li>不论团队内外，传递信息效果最好效率也最高的方式是<strong>面对面</strong>的交谈。</li><li><strong>可工作的</strong>软件是进度的首要度量标准。</li><li>敏捷过程提倡<strong>可持续开发</strong>。责任人、开发人员和用户要能够共同维持其步调稳定延续。</li><li>坚持不懈地<strong>追求技术卓越</strong>和良好设计，敏捷能力由此增强。</li><li>以<strong>简洁</strong>为本，它是极力减少不必要工作量的艺术。</li><li>最好的架构、需求和设计出自<strong>自组织</strong>团队。</li><li>团队<strong>定期地反思</strong>如何能提高成效，并依此调整自身的举止表现。</li></ol><h2 id="7-敏捷开发管理实践"><a class="markdownIt-Anchor" href="#7-敏捷开发管理实践"></a> 7 敏捷开发管理实践</h2><h3 id="71-scrum"><a class="markdownIt-Anchor" href="#71-scrum"></a> 7.1 Scrum</h3><p>Scrum 包括一系列实践和预定义角色，是一种灵活的软件管理过程。</p><h3 id="72-lean"><a class="markdownIt-Anchor" href="#72-lean"></a> 7.2 Lean</h3><p>Lean（精益开发） 从最终用户的视角上观察生产流程，视任何未产生增值的活动为浪费，并通过持续地消除浪费，实现快速交付、高质量与低成本。</p><h3 id="73-xp"><a class="markdownIt-Anchor" href="#73-xp"></a> 7.3 XP</h3><p>XP（极限编程） 由 Kent Beck 提出的一套针对业务需求和软件开发实践的规则，它的作用在于将二者力量集中在共同的目标上，高效并稳妥地推进开发。</p><h3 id="74-其它"><a class="markdownIt-Anchor" href="#74-其它"></a> 7.4 其它</h3><ul><li>OpenUP</li><li>DSDM</li><li>FDD</li><li>…</li></ul><h2 id="8-scrum"><a class="markdownIt-Anchor" href="#8-scrum"></a> 8 Scrum</h2><p>Scrum指的是英式橄榄球中一股脑争球这一战术或行为。</p><p><img src="http://static.zybuluo.com/lfire/o6z7ew8a7n7zpn44djk6i8we/image_1c0ic8351s25cai1f0un73bqb15.png" alt="image_1c0ic8351s25cai1f0un73bqb15.png-222.3kB"></p><p>Scrum作为软件开发过程框架，是这样一种方式：大家一拥而上，团队是球员，球是产品目标，人员环环相扣，围绕着产品目标进行工作。</p><h3 id="81-scrum-3-3-5-5-特性"><a class="markdownIt-Anchor" href="#81-scrum-3-3-5-5-特性"></a> 8.1 Scrum 3-3-5-5 特性</h3><p><strong>Roles 角色（3）</strong></p><ul><li>Product Owner 产品所有者</li><li>Scrum Master 敏捷教练</li><li>Team 团队</li></ul><p><strong>Artifacts 工件（3）</strong></p><ul><li>Product Backlog 产品Backlog</li><li>Sprint Backlog 迭代Backlog</li><li>Burndown Charts 燃尽图</li></ul><p><strong>Features 特性（5）</strong></p><ul><li>Courage 勇气</li><li>Openness 开放</li><li>Commitment 承诺</li><li>Focus 专注</li><li>Respect 尊重</li></ul><p><strong>Ceremonies 仪式（5）</strong></p><ul><li>Sprint 迭代</li><li>Sprint Planning 迭代计划会议</li><li>Daily Meeting 每日立会</li><li>Sprint Review 审核会议</li><li>Sprint Retrospective 回顾会议</li></ul><h3 id="82-scrum敏捷团队中的角色"><a class="markdownIt-Anchor" href="#82-scrum敏捷团队中的角色"></a> 8.2 Scrum敏捷团队中的角色</h3><p><strong>Product Owner 产品所有者</strong><br>代表客户的意愿，主要负责编写用户故事，排出优先级，并放入 Product Backlog，从而使项目价值最大化。</p><p><strong>Scrum Master 敏捷教练</strong><br>保证 Scrum 成功的牧羊犬，负责 Scrum 过程正确实施和利益最大化的人，确保它既符合企业文化，又能交付预期利益。</p><p><strong>Team 团队</strong><br>对每一次迭代和整个项目共同负责，在每个冲刺中通过实行自管理、自组织，和跨职能的开发协作，实现冲刺目标和最终交付产品。</p><h3 id="83-scrum敏捷团队工作流程"><a class="markdownIt-Anchor" href="#83-scrum敏捷团队工作流程"></a> 8.3 Scrum敏捷团队工作流程</h3><p>在 Scrum 项目管理过程中，一般<strong>产品负责人</strong>获取项目投资，并对整个产品的成功负责。他会协调各种利益干系人，确定产品订单中（Product Backlog）初始的需求清单及其优先级，完成项目的商业价值分析和项目整体规划，并任命合适的 Scrum 教练开展项目工作。</p><p><strong>Scrum 主要输入输出</strong>：</p><ul><li>产品订单（Product Backlog）</li><li>冲刺订单（Sprint Backlog）</li><li>燃尽图（Burndown Chart）</li><li>新的功能增量</li></ul><h3 id="84-主要的敏捷开发工程实践"><a class="markdownIt-Anchor" href="#84-主要的敏捷开发工程实践"></a> 8.4 主要的敏捷开发工程实践</h3><ul><li><strong>迭代式开发</strong>：每次按照相同的开发方式短期的开发软件的部分</li><li><strong>持续集成</strong>：英文是 Continuous Integration，在敏捷语境下缩写 CI</li><li><strong>多级项目规划</strong>：是指以迭代开发为基础，形成多层次的、逐步细化的项目或产品计划</li><li><strong>完整团队</strong>：如 Scrum 团队是基于功能开发而组成的跨职能、自我管理团队</li><li><strong>ATDD（体验测试驱动开发）</strong>：实现某个具体功能之前，首先编写功能测试或验收测试用例，从系统功能角度驱动开发过程</li><li><strong>结对编程</strong>：在敏捷软件开发的各种实践中，结对编辑（Pair Programming）是特别有争议的</li><li><strong>确定冲刺计划</strong>：团队和PO共同决定在接下来的冲刺周期内的目标以及哪些功能和任务需要完成</li><li><strong>故事点计算</strong>：故事点估算用于评估为了交付一个用户故事所包含的所有努力（team effort），用户故事的复杂度（complexity），风险，以及所有其他需要考虑的元素</li><li><strong>需求订单（产品订单）</strong>：一张记录用户需求的列表，包括产品所有需要的特征</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E7%BD%91%E5%8F%8B%E7%9C%8B%E6%95%8F%E6%8D%B7&quot;&gt;1 网友看敏捷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-agile%E4%BD%95%E4%B8%BA%E6%95%8F%E6%8D%B7&quot;&gt;2 Agile，何为敏捷？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-agile%E5%B7%AE%E5%88%AB%E5%9C%A8%E5%93%AA%E4%B8%8E%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E4%BA%A4%E4%BB%98%E6%96%B9%E6%B3%95%E7%9B%B8%E6%AF%94%E8%BE%83&quot;&gt;3 Agile，差别在哪（与传统开发交付方法相比较）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-agile%E4%BC%98%E5%8A%BF%E5%9C%A8%E5%93%AA&quot;&gt;4 Agile，优势在哪？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%E6%95%8F%E6%8D%B7%E7%9A%84%E4%BB%B7%E5%80%BC%E8%A7%82values&quot;&gt;5 敏捷的价值观（Values）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-%E6%95%8F%E6%8D%B7%E7%9A%84%E5%8E%9F%E5%88%99principes&quot;&gt;6 敏捷的原则（Principes）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%E5%AE%9E%E8%B7%B5&quot;&gt;7 敏捷开发管理实践&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#71-scrum&quot;&gt;7.1 Scrum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#72-lean&quot;&gt;7.2 Lean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#73-xp&quot;&gt;7.3 XP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#74-%E5%85%B6%E5%AE%83&quot;&gt;7.4 其它&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8-scrum&quot;&gt;8 Scrum&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#81-scrum-3-3-5-5-%E7%89%B9%E6%80%A7&quot;&gt;8.1 Scrum 3-3-5-5 特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#82-scrum%E6%95%8F%E6%8D%B7%E5%9B%A2%E9%98%9F%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2&quot;&gt;8.2 Scrum敏捷团队中的角色&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#83-scrum%E6%95%8F%E6%8D%B7%E5%9B%A2%E9%98%9F%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B&quot;&gt;8.3 Scrum敏捷团队工作流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#84-%E4%B8%BB%E8%A6%81%E7%9A%84%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5&quot;&gt;8.4 主要的敏捷开发工程实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="敏捷开发" scheme="http://yoursite.com/categories/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="agile" scheme="http://yoursite.com/tags/agile/"/>
    
      <category term="敏捷开发" scheme="http://yoursite.com/tags/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="scrum" scheme="http://yoursite.com/tags/scrum/"/>
    
  </entry>
  
  <entry>
    <title>部署FRP服务 实现内网穿透</title>
    <link href="http://yoursite.com/2017/11/15/deploy-the-frp-server/"/>
    <id>http://yoursite.com/2017/11/15/deploy-the-frp-server/</id>
    <published>2017-11-15T14:06:38.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E4%BB%80%E4%B9%88%E6%98%AF-frp">1 什么是 frp</a></li><li><a href="#2-%E5%87%86%E5%A4%87">2 准备</a></li><li><a href="#3-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">3 服务端环境搭建</a><ul><li><a href="#31-frp-%E9%85%8D%E7%BD%AE">3.1 frp 配置</a></li><li><a href="#32-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE">3.2 nginx 反向代理配置</a></li><li><a href="#33-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%AF%E5%8A%A8">3.3 服务端启动</a></li></ul></li><li><a href="#4-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">4 客户端环境搭建</a><ul><li><a href="#41-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">4.1 客户端环境配置</a></li><li><a href="#42-%E6%9C%AC%E6%9C%BA-wamp-%E7%8E%AF%E5%A2%83-%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE">4.2 本机 wamp 环境 &amp; 虚拟主机配置</a></li><li><a href="#43-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%AF%E5%8A%A8">4.3 客户端启动</a></li><li><a href="#44-%E6%B5%8B%E8%AF%95%E8%BF%9E%E6%8E%A5%E6%95%88%E6%9E%9C">4.4 测试连接效果</a></li></ul></li><li><a href="#5-%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">5 微信开发调试环境搭建</a><ul><li><a href="#51-%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91">5.1 服务程序开发</a></li><li><a href="#52-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E9%85%8D%E7%BD%AE">5.2 微信公众号配置</a></li><li><a href="#53-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95">5.3 接口测试</a></li></ul></li><li><a href="#6-%E5%87%A0%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84%E7%82%B9">6 几个有用的点</a></li></ul></p><a id="more"></a><p>先抛出几个问题：</p><blockquote><ol><li>我们有在本地开发的某一个 B/S 程序，希望给客户直接在线演示，怎么办？</li><li>程序在内部开发调试阶段，对于某一个具体的测试问题，我不想发布到生产，只是想测试帮忙先看一下，OK 了后，我再发布，这样怎么办？</li><li>微信公众号开发，现在这么火，烦人的，我需要调用微信公众号的接口，但微信的接口服务配置时，只接受一个公网的认证链接，这时候，难道我真的要每开发一个很小的变动，调试时仍需要不停的与线上部署服务器进行改动同步，就没有更简单的开发调试方法了吗？<br>…</li></ol></blockquote><p>现在来了，这些似乎难以搞定的事情，好像现在都有一定的共同性：</p><ul><li>我的资源在内网环境，而且这样是为了方便我本人很好的修改，并对不同的需求进行快速的响应。</li><li>我需要将我本地的相关内容公开到公网环境去，方便相关的人直接查看到我本地的效果</li><li>与相关的第三方对接时，第三方只能识别公网上的相关资源，而不能穿透内网</li></ul><p><strong>最最核心的问题是，在没有公网 IP 的情况下，我希望将我的资源挂载到公网。</strong></p><p>当然，这中间可能有很多的解决方案，比如：花生壳、ngrok、go-proxy等等，但这里我想分享的方案是 frp 服务，以这款工具所提供的能力来实现内网穿透，并选取我们以上所提到的一种场景——<strong>微信开发调试</strong>，来实际展示一个实例。</p><h2 id="1-什么是-frp"><a class="markdownIt-Anchor" href="#1-什么是-frp"></a> 1 什么是 frp</h2><p><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">frp</a> 是一个高性能反向代理应用，可用于实现内网穿透，支持 TCP、UDP、HTTP、HTTPS 等协议，以此将内网资源对外网提供服务。<br>其中更详细的一些介绍，以及使用细节，官方的<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">《中文文档》</a> 有很详细的解释和说明，大家也可以直接参考。</p><h2 id="2-准备"><a class="markdownIt-Anchor" href="#2-准备"></a> 2 准备</h2><p>在使用之前，你需要准备一台拥有公网 IP 的服务器（如：阿里云、<a href="https://www.linode.com/?r=6c99252e8f84978356850c65fd5f5fbede94b08a" target="_blank" rel="noopener">linode</a>等），一台内网环境下的主机（一般就是你个人的 PC 机），一个域名（在服务器上开启虚拟主机，可以通过域名中的不同子域名，实现端口的重用），SSH 工具。<br>因国内的 VPS 一般需要通过备案后使用，使用会相对较为麻烦，因此，如果本身就有，就直接使用，如果需要新买，那最好是通过 <a href="https://www.linode.com/?r=6c99252e8f84978356850c65fd5f5fbede94b08a" target="_blank" rel="noopener">linode</a> 等这些相关的国外服务器平台购买，这样会比较方便。</p><h2 id="3-服务端环境搭建"><a class="markdownIt-Anchor" href="#3-服务端环境搭建"></a> 3 服务端环境搭建</h2><p>在网方的发布平台 <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">releases</a>，我们下载最新的发布版本（当前最新的版本为 V0.13.0）。其中我们需要选择对应的版本，其中服务器，常见的系统环境版本，一般为 linux 64 位，因此，我们一般情况选择：<a href="https://github.com/fatedier/frp/releases/download/v0.13.0/frp_0.13.0_linux_amd64.tar.gz" target="_blank" rel="noopener">frp_0.13.0_linux_amd64.tar.gz</a>。<br>我们将压缩包中的服务端程序（frps）和服务端配置文件（frps.ini）提取出来，如下图。</p><p><img src="http://static.zybuluo.com/lfire/murabcptj4blu5ywxp6decls/image_1bv1q1duabqbh2md35d1irikp.png" alt="image_1bv1q1duabqbh2md35d1irikp.png-4.6kB"></p><h3 id="31-frp-配置"><a class="markdownIt-Anchor" href="#31-frp-配置"></a> 3.1 frp 配置</h3><p>服务器的配置文件，官方手册中有详细的解释，我这里贴出本次我所搭环境的示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">28088</span></span><br><span class="line"><span class="attr">subdomain_host</span> = frp.domain.com</span><br><span class="line"><span class="comment"># 这里是为了安全的考虑，加入一个身份认证的 token 配置，这里只要服务端和客户端配置一致即可</span></span><br><span class="line"><span class="attr">privilege_token</span> = xxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br><span class="line"></span><br><span class="line"><span class="attr">log_file</span> = ./frps.log</span><br><span class="line"></span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="32-nginx-反向代理配置"><a class="markdownIt-Anchor" href="#32-nginx-反向代理配置"></a> 3.2 nginx 反向代理配置</h3><p>其中，因为我的服务器上有相关其他的程序共用，80 端口上交给了 nginx ，而在微信的接口配置时，只能是 80 or 443 端口，因此，这里我还借用了 nginx 的反向代理功能，配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> frp.domain.com <span class="regexp">*.frp.domain.com</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://frp.domain.com:28088;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">  <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">    <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里启用了泛域名解析，考虑的是，这个服务开启后，我们可以通过这种方式提供给多人使用，不同的人员，可以启用一个对应的子域名，如：张三（<a href="http://zhangsan.frp.domain.com" target="_blank" rel="noopener">zhangsan.frp.domain.com</a>）、李四（<a href="http://lisi.frp.domain.com" target="_blank" rel="noopener">lisi.frp.domain.com</a>）、…</p><h3 id="33-服务端启动"><a class="markdownIt-Anchor" href="#33-服务端启动"></a> 3.3 服务端启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常规启动</span></span><br><span class="line">./frps -c frps.ini</span><br><span class="line"><span class="comment"># 或者，使用 nohup 方式，启用后台运行模式，这样就可以避免命令行工具关闭后，服务中断的情况</span></span><br><span class="line">nohup ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></figure><h2 id="4-客户端环境搭建"><a class="markdownIt-Anchor" href="#4-客户端环境搭建"></a> 4 客户端环境搭建</h2><p>客户端在配置之前，同样的请在官方下载与自己系统对应的程序包，解压出其中的客户端程序（frpc.exe）和配置文件（frpc.ini）。</p><p><img src="http://static.zybuluo.com/lfire/wnykl2702ir8vdita9dq5sud/image_1bv1si4m97b5j651olr1qf518pj16.png" alt="image_1bv1si4m97b5j651olr1qf518pj16.png-5.2kB"></p><h3 id="41-客户端环境配置"><a class="markdownIt-Anchor" href="#41-客户端环境配置"></a> 4.1 客户端环境配置</h3><p>与服务端配置相对应的客户端配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 公网服务器的 IP 地址</span></span><br><span class="line"><span class="attr">server_addr</span> = xx.xx.xx.xx</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 这里需要与服务端所配置的 token 值一致</span></span><br><span class="line"><span class="attr">privilege_token</span> = xxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="comment"># 因启用了泛域名解析，不同的人员，可以使用各自不同的子域名，只要不重复，这样可以方便多人共用服务端资源</span></span><br><span class="line"><span class="attr">subdomain</span> = liyz</span><br><span class="line"><span class="attr">custom_domains</span> = frp.domain.com</span><br></pre></td></tr></table></figure><p>示例中，我启用了我的个人子域名（liyz），那配置对应的访问域名为：<a href="http://liyz.frp.domain.com" target="_blank" rel="noopener">liyz.frp.domain.com</a>。</p><h3 id="42-本机-wamp-环境-虚拟主机配置"><a class="markdownIt-Anchor" href="#42-本机-wamp-环境-虚拟主机配置"></a> 4.2 本机 wamp 环境 &amp; 虚拟主机配置</h3><p>示例中主要是针对 B/S 架构的应用进行解释，因此，这里我在本地通过 wamp 搭建了一个基本的 WEB 服务，并开启了一个相应的虚拟主机，配置如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;VirtualHost *:80&gt;</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">ServerName</span></span> frp.domain.com</span><br><span class="line">    <span class="attribute">ServerAlias</span> liyz.frp.domain.com</span><br><span class="line">    <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> c:\project\wumi\tmp\public</span><br><span class="line">    <span class="section">&lt;Directory c:\project\wumi\tmp\public\&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</span><br><span class="line">        <span class="attribute">AllowOverride</span> <span class="literal">all</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">Order</span></span> deny,allow</span><br><span class="line">        <span class="attribute"><span class="nomarkup">Allow</span></span> from <span class="literal">all</span></span><br><span class="line">    <span class="section">&lt;/Directory&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure><p>这只是基本的服务配置，大家可以根据自己的实际应用需要，进行更多相关配置。</p><h3 id="43-客户端启动"><a class="markdownIt-Anchor" href="#43-客户端启动"></a> 4.3 客户端启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\frpc.exe -c frpc.ini</span><br></pre></td></tr></table></figure><p><img src="http://static.zybuluo.com/lfire/lm0sfdwh0w7pi6xzh2c2xrzj/image_1bv1toms3iko1nvb1kvc6rg193d1j.png" alt="image_1bv1toms3iko1nvb1kvc6rg193d1j.png-15.4kB"></p><h3 id="44-测试连接效果"><a class="markdownIt-Anchor" href="#44-测试连接效果"></a> 4.4 测试连接效果</h3><p>公网服务器，启动 nginx，本地启动 wamp 服务，并在 wamp 虚拟主机配置的对应目录中（c:\project\wumi\tmp\public），新建 index.html 文件。浏览器打开： <a href="http://liyz.frp.domain.com" target="_blank" rel="noopener">http://liyz.frp.domain.com</a> 访问。</p><p><img src="http://static.zybuluo.com/lfire/bwitmi0pr0m2oceicp12gzb1/image_1bv1tvjrc19asmle1vlf1a4h186c2g.png" alt="image_1bv1tvjrc19asmle1vlf1a4h186c2g.png-7.5kB"></p><p>可以查看到正确的访问返回，成功！</p><h2 id="5-微信开发调试环境搭建"><a class="markdownIt-Anchor" href="#5-微信开发调试环境搭建"></a> 5 微信开发调试环境搭建</h2><p><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" target="_blank" rel="noopener">微信公众平台</a>中，关于接口配置信息的说明是，只支持：80 &amp; 443，两个端口，这也就是前面，为什么要启用 nginx 服务的原因。<br>为了演示方便，这里仅采用<a href="http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">公众平台测试账号</a>。</p><h3 id="51-服务程序开发"><a class="markdownIt-Anchor" href="#51-服务程序开发"></a> 5.1 服务程序开发</h3><p>为了达到演示效果，这里在 thinkphp　的基础上，用 PHP 简单写了一个对接程序，基础代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">index</span>\<span class="title">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">EasyWeChat</span>\<span class="title">Foundation</span>\<span class="title">Application</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">facade</span>\<span class="title">Config</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 微信服务对接接口</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">wxServer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    $opt = Config::get(<span class="string">'wechat.dev_server'</span>);</span><br><span class="line">    $app = <span class="keyword">new</span> Application($opt);</span><br><span class="line">    $server = $app-&gt;server;</span><br><span class="line">    $server-&gt;setMessageHandler(<span class="function"><span class="keyword">function</span> <span class="params">($message)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// $message-&gt;FromUserName // 用户的 openid</span></span><br><span class="line">      <span class="comment">// $message-&gt;MsgType // 消息类型：event, text....</span></span><br><span class="line">      <span class="comment">// 当 $message-&gt;MsgType 为 event 时为事件</span></span><br><span class="line">      <span class="keyword">if</span> ($message-&gt;MsgType == <span class="string">'event'</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> ($message-&gt;Event) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'subscribe'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"感谢您关注！"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $response = $server-&gt;serve();</span><br><span class="line">    $response-&gt;send();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 测试调用微信 API</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testWx</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    $opt = Config::get(<span class="string">'wechat.dev_server'</span>);</span><br><span class="line">    $app = <span class="keyword">new</span> Application($opt);</span><br><span class="line">    $userService = $app-&gt;user;</span><br><span class="line"></span><br><span class="line">    $users = $userService-&gt;lists();</span><br><span class="line">    dump($users);</span><br><span class="line"></span><br><span class="line">    $openId = <span class="string">'oH9qBjuW0qt7Ub8kYN4G6PuZrLRw'</span>;</span><br><span class="line">    $user = $userService-&gt;get($openId);</span><br><span class="line">    dump($user);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    $broadcast = $app-&gt;broadcast;</span></span><br><span class="line"><span class="comment">//    $r = $broadcast-&gt;sendText("大家好！");</span></span><br><span class="line"><span class="comment">//    dump($r);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 服务首页</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hello, frp server ok!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化微信的相关接口对接开发，这里使用了 <a href="https://easywechat.org/" target="_blank" rel="noopener">easywechat</a> 提供的封装程序，具体详细使用方法，可以参考其官网。</p><h3 id="52-微信公众号配置"><a class="markdownIt-Anchor" href="#52-微信公众号配置"></a> 5.2 微信公众号配置</h3><p>因开发了 PHP 对接程序，接口配置的 URL 为： <a href="http://liyz.frp.domain.com/Index/wxServer" target="_blank" rel="noopener">http://liyz.frp.domain.com/Index/wxServer</a></p><p><img src="http://static.zybuluo.com/lfire/hmgwuoytk1k3dnuoj4lv962a/image_1bv1v6f091nmj1gbp1etpt5o1alk3a.png" alt="image_1bv1v6f091nmj1gbp1etpt5o1alk3a.png-24.1kB"></p><p>根据网速，大概最多几移后，系统会提示配置成功。</p><h3 id="53-接口测试"><a class="markdownIt-Anchor" href="#53-接口测试"></a> 5.3 接口测试</h3><p>在逻辑中，我们开发了一个 testWx 逻辑页面，我们可以通过访问，<a href="http://liyz.frp.domain.com/Index/testWx" target="_blank" rel="noopener">http://liyz.frp.domain.com/Index/testWx</a> ，其中实现：获取公众号用户列表，以其中一个用户的信息。</p><p><img src="http://static.zybuluo.com/lfire/4cmcly15lzyu5hp0vhb53fw6/image_1bv1vdcif1033msejimhh44854n.png" alt="image_1bv1vdcif1033msejimhh44854n.png-54.2kB"></p><p>需要说明的，公众号测试平台中的某些接口，在实际开发过程中，是没有相关权限的，比如：群发接口，因此，建议在有资源的情况下，还是单独的申请注册一个认证的订阅号，或是服务号来开展测试调试工作。</p><h2 id="6-几个有用的点"><a class="markdownIt-Anchor" href="#6-几个有用的点"></a> 6 几个有用的点</h2><ol><li>80 端口共用，在一般的使用场景中，绝大多数的 WEB 服务是基于 80 端口提供服务的，因此，我们的 frp 不大可能在某一服务器上独占 80 端口资源，因此，这里启用了 28088 端口的兼听，通过 nginx 反向代理将某一域名的 80 端口请求转发到 28088。</li><li>泛域名解析，再结合 frp 的 <em>subdomain</em> 配置，实现多人共用 frp 服务器资源。</li><li>通过 frp 的转发，能实现本地基于域名的虚拟主机服务，示例中是通过 wamp 的服务实现的，当然，你也可以安装 nginx 等其他相关服务程序。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E4%BB%80%E4%B9%88%E6%98%AF-frp&quot;&gt;1 什么是 frp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E5%87%86%E5%A4%87&quot;&gt;2 准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&quot;&gt;3 服务端环境搭建&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-frp-%E9%85%8D%E7%BD%AE&quot;&gt;3.1 frp 配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE&quot;&gt;3.2 nginx 反向代理配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%90%AF%E5%8A%A8&quot;&gt;3.3 服务端启动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&quot;&gt;4 客户端环境搭建&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#41-%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&quot;&gt;4.1 客户端环境配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#42-%E6%9C%AC%E6%9C%BA-wamp-%E7%8E%AF%E5%A2%83-%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE&quot;&gt;4.2 本机 wamp 环境 &amp;amp; 虚拟主机配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#43-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%AF%E5%8A%A8&quot;&gt;4.3 客户端启动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#44-%E6%B5%8B%E8%AF%95%E8%BF%9E%E6%8E%A5%E6%95%88%E6%9E%9C&quot;&gt;4.4 测试连接效果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&quot;&gt;5 微信开发调试环境搭建&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#51-%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91&quot;&gt;5.1 服务程序开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#52-%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E9%85%8D%E7%BD%AE&quot;&gt;5.2 微信公众号配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#53-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95&quot;&gt;5.3 接口测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-%E5%87%A0%E4%B8%AA%E6%9C%89%E7%94%A8%E7%9A%84%E7%82%B9&quot;&gt;6 几个有用的点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="环境配置" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="frp" scheme="http://yoursite.com/tags/frp/"/>
    
      <category term="proxy" scheme="http://yoursite.com/tags/proxy/"/>
    
      <category term="内网穿透" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
      <category term="微信本地开发" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Jetbrains系列产品激活服务器搭建</title>
    <link href="http://yoursite.com/2017/11/10/jetbrains-ide-active-server/"/>
    <id>http://yoursite.com/2017/11/10/jetbrains-ide-active-server/</id>
    <published>2017-11-10T17:12:32.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E5%85%B3%E9%94%AE%E6%93%8D%E4%BD%9C">1 关键操作</a></li><li><a href="#2-%E8%87%AA%E5%BB%BA%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8">2 自建公网服务器</a></li><li><a href="#3-%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">3 配置参数说明</a></li><li><a href="#4-%E7%BB%93%E5%90%88-nginx-%E8%87%AA%E6%9C%89%E5%9F%9F%E5%90%8D-%E9%85%8D%E7%BD%AE">4 结合 nginx &amp; 自有域名 配置</a></li></ul></p><a id="more"></a><p>对于开发者来说，一款合用的开发工具非常影响其开发质量和速率，而纵观所有工具，开发IDE方面，Jetbrains 的产品值得我们称道。他设计的合语言开发 IDE，给我们提供了很好的开发体验，但这其中有一个很难为情的问题，对于我们开发者来说，其正版授权价格一时无法承受，特别是对于一些学习编程的初级入门者来说，就更为困难。<br>因此能有一种好的方式来使用该公司产品，也是对于个人体验，以及编程能力的提升。这里总结了一种自建服务器来激活全系列产品的方法。（当然，对于有能力的开发者来说，还是建议直接购买。）</p><p>开始，我们得先感谢这款工具的开发者，<a href="http://blog.lanyus.com/archives/314.html" target="_blank" rel="noopener"><strong>lanyus</strong></a>，目前该工具发布的版本已到 1.5 。<br>而针对于相关的使用方法，特别是当自己没有相关公网服务器的情况下，在自己本地机器上运行时，如何使用，有详细的说明，具体可以访问<a href="http://blog.lanyus.com/archives/174.html" target="_blank" rel="noopener"><strong>说明教程</strong></a>。</p><h2 id="1-关键操作"><a class="markdownIt-Anchor" href="#1-关键操作"></a> 1 关键操作</h2><blockquote><ol><li><a href="https://mega.nz/#!2w5WBL7I!OhsaQHOaW_IsUznu5loN3a-bSbLV--McOBqA-PM8EuY" target="_blank" rel="noopener">下载服务搭建程序</a>   备份链接: <a href="https://pan.baidu.com/s/1dGxchlJ" target="_blank" rel="noopener">https://pan.baidu.com/s/1dGxchlJ</a> 密码: 1k6w</li><li>解压，使用 <em>IntelliJIDEALicenseServer_windows_amd64.exe</em></li><li>在相应 idea 注册界面选择 <strong>License server</strong>，填写 <em><a href="http://127.0.0.1:1017" target="_blank" rel="noopener">http://127.0.0.1:1017</a></em>，（据说1017是作者女票生日，像作者女票致敬-_-）</li></ol></blockquote><p><img src="http://static.zybuluo.com/lfire/iuwa7up8t5s3al6nt3gans2w/image_1busn3u1urfekhh6tq1n48g3u9.png" alt="image_1busn3u1urfekhh6tq1n48g3u9.png-25.2kB"></p><h2 id="2-自建公网服务器"><a class="markdownIt-Anchor" href="#2-自建公网服务器"></a> 2 自建公网服务器</h2><ol><li>同样是下载<a href="https://mega.nz/#!2w5WBL7I!OhsaQHOaW_IsUznu5loN3a-bSbLV--McOBqA-PM8EuY" target="_blank" rel="noopener">服务器搭建程序包</a>   备份链接: <a href="https://pan.baidu.com/s/1dGxchlJ" target="_blank" rel="noopener">https://pan.baidu.com/s/1dGxchlJ</a> 密码: 1k6w</li><li>执行 <em>tar zxvf IntelliJIDEALicenseServer(v1.5).tar.gz</em>，解压文件，文件内容如下。<br><img src="http://static.zybuluo.com/lfire/y14rx1cok7mit5fsd7vjar0w/image_1buso1b3av8ricp1nkmp116ram.png" alt="image_1buso1b3av8ricp1nkmp116ram.png-75.7kB"></li><li>根据自身机器的系统情况，选择对应的程序，本例中是：linux 64 位系统，所以我将 <em>IntelliJIDEALicenseServer_linux_amd64</em> 单独提出，并重命名为 <em>IdeaServer</em>。（文件名太长，命令也太长）</li><li>运行服务程序，<em>nohup ./IdeaServer -p 1024 -prolongationPeriod 9999999999999999 &gt; idea.log 2&gt;&amp;1 &amp;</em>，其中采用了 nohup 运行方式，并将日志记录在了 <em>idea.log</em> 文件中。</li><li>在激活时，激活服务器的地址就是：<em><a href="http://xxx.xxx.xxx.xx:1024" target="_blank" rel="noopener">http://xxx.xxx.xxx.xx:1024</a></em>，其中有 x 就是你对应服务器的 IP 地址。</li></ol><h2 id="3-配置参数说明"><a class="markdownIt-Anchor" href="#3-配置参数说明"></a> 3 配置参数说明</h2><ol><li><em><strong>-l</strong></em>  指定绑定监听到具体哪个 ip (私用，不共享)</li><li><em><strong>-u</strong></em>  用户名参数，当未设置 -u 参数时，且计算机用户名为 <em>^[a-zA-Z0-9]+$</em> 时，使用计算机用户名作为 idea 用户名</li><li><em><strong>-p</strong></em>  指定监听的端口</li><li><em><strong>-prolongationPeriod</strong></em>  指定过期时间参数</li></ol><h2 id="4-结合-nginx-自有域名-配置"><a class="markdownIt-Anchor" href="#4-结合-nginx-自有域名-配置"></a> 4 结合 nginx &amp; 自有域名 配置</h2><p>要记住某一服务器的 IP 地址，总是不那么容易，而相对的，记住一个相应的域名就要容易得多。<br>因此，我们如果有一个域名，如：<em><a href="http://your.domain.com" target="_blank" rel="noopener">your.domain.com</a></em>，我们希望直接使用该域名地址来实现激活服务，但同时，对于 80 端口，一般常用的 WEB 服务，都是基于该端口来提供服务，因此，如果某一程序独占该端口过于浪费，这样，我们可以借用 nginx 的虚拟主机和反向代理能力，将 <em><a href="http://your.domain.com:80" target="_blank" rel="noopener">your.domain.com:80</a></em> 上的请求，直接转发到我们的激活服务地址和端口。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> your.domain.com;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:1024;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">error_log</span> /dev/null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过如上配置后，你就可以直接使用 <em><a href="http://your.domain.com" target="_blank" rel="noopener">http://your.domain.com</a></em> 直接充当激活服务器了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E5%85%B3%E9%94%AE%E6%93%8D%E4%BD%9C&quot;&gt;1 关键操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E8%87%AA%E5%BB%BA%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8&quot;&gt;2 自建公网服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E&quot;&gt;3 配置参数说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%E7%BB%93%E5%90%88-nginx-%E8%87%AA%E6%9C%89%E5%9F%9F%E5%90%8D-%E9%85%8D%E7%BD%AE&quot;&gt;4 结合 nginx &amp;amp; 自有域名 配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="IDE" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/IDE/"/>
    
    
      <category term="jetbrains" scheme="http://yoursite.com/tags/jetbrains/"/>
    
      <category term="webstorm" scheme="http://yoursite.com/tags/webstorm/"/>
    
      <category term="phpstorm" scheme="http://yoursite.com/tags/phpstorm/"/>
    
  </entry>
  
  <entry>
    <title>复杂前端项目开发思考模型——H5小游戏</title>
    <link href="http://yoursite.com/2017/10/31/game-with-h5/"/>
    <id>http://yoursite.com/2017/10/31/game-with-h5/</id>
    <published>2017-10-31T14:58:52.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E9%A1%B9%E7%9B%AE%E6%95%88%E6%9E%9C%E6%BC%94%E7%A4%BA">1 项目效果演示</a></li><li><a href="#2-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E8%AF%B4%E5%A4%8D%E6%9D%82">2 为什么可以说复杂</a><ul><li><a href="#21-%E6%95%B4%E4%BD%93%E7%9A%84%E6%B8%B8%E6%88%8F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B">2.1 整体的游戏执行流程</a></li><li><a href="#22-%E7%95%8C%E9%9D%A2%E4%B8%AD%E5%85%83%E7%B4%A0%E4%BC%97%E5%A4%9A">2.2 界面中元素众多</a></li><li><a href="#23-%E7%95%8C%E9%9D%A2%E5%85%83%E7%B4%A0%E6%B6%89%E5%8F%8A%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2%E5%8A%A8%E7%94%BB%E6%89%A7%E8%A1%8C">2.3 界面元素涉及状态切换&amp;动画执行</a></li></ul></li><li><a href="#3-%E9%9C%80%E8%A6%81%E5%A6%82%E4%BD%95%E8%80%83%E8%99%91">3 需要如何考虑</a><ul><li><a href="#31-%E6%A0%B7%E5%BC%8F%E9%83%A8%E5%88%86">3.1 样式部分</a></li><li><a href="#32-html%E9%83%A8%E5%88%86">3.2 HTML部分</a></li><li><a href="#33-js%E9%83%A8%E5%88%86">3.3 JS部分</a></li><li><a href="#34-%E4%BB%80%E4%B9%88%E8%83%BD%E4%BA%A4%E7%BB%99%E5%B7%A5%E5%85%B7">3.4 什么能交给工具</a></li></ul></li></ul></p><a id="more"></a><p>近期因为在筹划阐述前端开发工作中的各种复杂场景，并将其中可能用得上的思想讲明白，比如：模块化开发、自动化构建、工程化等，在每一个方向上，都是用于解决我们在项目开发过程中，所遇到的问题，以及提升工作效率的考虑，以此提升开发工作的趣味性。</p><blockquote><p>Not just do it, but enjoy it.</p></blockquote><p>以此为砖，用以引玉。<br>正好近期也接受到了一个项目——《大富翁》小游戏，对于该项目的初步分析，并结合到我的想法，可能适合作为“复杂场景”的一个引子，我希望可以以该项目的实施及思考过程，来实例化的描述一下整体的一个解决思路。暂且叫其为：思（什）考（么）模（鬼）型。</p><h2 id="1-项目效果演示"><a class="markdownIt-Anchor" href="#1-项目效果演示"></a> 1 项目效果演示</h2><p>先上个图，大致看一下最后的效果，没有将所有出现的情况全部展示。</p><p><img src="http://static.zybuluo.com/lfire/6k58gyrj6avlmblciis11x4t/dafuweng.gif" alt="dafuweng.gif-714.4kB"></p><h2 id="2-为什么可以说复杂"><a class="markdownIt-Anchor" href="#2-为什么可以说复杂"></a> 2 为什么可以说复杂</h2><h3 id="21-整体的游戏执行流程"><a class="markdownIt-Anchor" href="#21-整体的游戏执行流程"></a> 2.1 整体的游戏执行流程</h3><p><img src="http://static.zybuluo.com/lfire/fwiihz6mb8gpn80objovvy77/%E6%B5%81%E9%87%8F%E5%A4%A7%E5%AF%8C%E7%BF%81%E6%B5%81%E7%A8%8B%E5%9B%BEV3.jpg" alt="流量大富翁流程图V3.jpg-1328.2kB"></p><p>这张图中可以看出游戏在执行过程中的逻辑流程，其中大部分都会涉及到前端交互的响应变化，因此其中前端交互流程复杂。</p><h3 id="22-界面中元素众多"><a class="markdownIt-Anchor" href="#22-界面中元素众多"></a> 2.2 界面中元素众多</h3><p>其中涉及到场景的元素非常多，各元素之间的排列，以及形状尺寸各不相同。这种场景下，给界面的兼容适配带来了难度。</p><h3 id="23-界面元素涉及状态切换动画执行"><a class="markdownIt-Anchor" href="#23-界面元素涉及状态切换动画执行"></a> 2.3 界面元素涉及状态切换&amp;动画执行</h3><p>其中小狐狸的状态涉及到3种：静态、向左走动、向右走动。<br>掷出骰子后，界面其他元素的交互触发需要锁定，并且，各元素的执行有明确的先后顺序，需要类似时间轴的概念来统一协调管理。</p><h2 id="3-需要如何考虑"><a class="markdownIt-Anchor" href="#3-需要如何考虑"></a> 3 需要如何考虑</h2><h3 id="31-样式部分"><a class="markdownIt-Anchor" href="#31-样式部分"></a> 3.1 样式部分</h3><p>界面非常的个性化，导致界面的样式布局上，我们很多场景需要使用背景图片来进行处理，另外，加上在不同尺寸终端上展示适配需求，更加使得整体问题变得复杂难解。<br>需要解决的点：</p><ul><li>各终端不同尺寸适配</li><li>大部分为不规则的背景元素，CSS的编写过程，元素尺寸的快速管理</li><li>页面动画过程中，元素位置的定位问题</li><li>页面的样式有相近部分，如：弹窗，如何达到封装共用</li></ul><p><strong>各终端不同尺寸适配</strong><br>目前市面上，可以统计到的不同终端尺寸，没有上百，也有几十，因此，在H5开发过程中，样式开发如何适配不同尺寸的显示屏，成为了我们这块所必须面对的首要问题。<br><em><strong>1. 媒体查询（media query）</strong></em><br>所涉及到的情况实在是太多，这导致，不同尺寸区间的细分会非常的复杂，而且，每一个尺寸区间下的都需要或多或少的人工干预调整，这在工作量上已经是无法实现的，还没考虑其中所涉及到的测试检验等等一系列的问题，所以，该方法基本可以排除。<br><em><strong>2. 百分比</strong></em><br>在CSS开发过程中，我们可以尝试使用百分比的方式来定位各不同元素在场景中的位置，以期在不同尺寸下达到同等比例的缩放。<br>这种思路很好，但技术选择方向上，百分比带来了很多的不可测量性，简单的来说，你拿到一个设计稿，其中一个元素相对于整体场景，或是另一个元素，具体较为精确的距离是百分之多少，这个没办法很直接的测量，因此，这种情况下，很多是由前端人员，依“手感”来细微的调整元素的位置，一个百分点，甚至零点几个百分点的来调整，而且调整完成后，由于各元素之间细微的误差积累，等放入另一个尺寸下时，你可能会发现，各要素的偏差很大，已经出现了我们常遇到的<strong>不兼容</strong>。<br>总结来说，就是工作量巨大，而且不兼容。<br><em><strong>3. REM</strong></em><br>REM是我实践过程中，认为的终极解决方案。当然，这其中我们要感谢很多在这方面提供解决方案的开源付出，如：<a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">lib-flexible</a>，这就是其中的一个，具体的设计思路，可以详细去查阅本方向上的资料，这里不再展开。<br>附加的，会产生出另一个问题，REM，这个单位毕竟不是PX，仍需要换算。这里也同样有相应的解决方案，我们可以借用自动化的构建工具，实现rem和px之间的自动转换，<a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="noopener">px2rem</a>，可以与gulp或grunt等构建工具集成，实现自动转换。</p><p><img src="http://static.zybuluo.com/lfire/tei794jibswdxau2rj8pvgfu/image_1btr83j1pgq11ku01lbds56uu9.png" alt="image_1btr83j1pgq11ku01lbds56uu9.png-37.7kB"></p><p>自动解析后：</p><p><img src="http://static.zybuluo.com/lfire/hzqzqrd3s17q2plyjgvntnqo/image_1btr85vr41a6g1osg175v1klc1vrkm.png" alt="image_1btr85vr41a6g1osg175v1klc1vrkm.png-34.1kB"></p><p><strong>元素尺寸的快速管理</strong><br>在场景中，出现了很多个性化的元素，其中的实现，很多是以背景图片来实现，之所以选择这种方式，是借助了 <strong><a href="https://github.com/cssdream/cssgrace" target="_blank" rel="noopener">cssgrace</a></strong> 中的一个特性：可以通过 <em><strong>image-width</strong></em>、<em><strong>image-height</strong></em> 两个动态属性，来自动的获取到图片的宽高尺寸。</p><p><img src="http://static.zybuluo.com/lfire/grm8t8gp3gy1p1fn84iv51xj/image_1btre3le61qujv7818nu1pfeks813.png" alt="image_1btre3le61qujv7818nu1pfeks813.png-61.9kB"></p><p>编译解析后</p><p><img src="http://static.zybuluo.com/lfire/xrhsyx8jbr7lg3jxud9btzrx/image_1btre4qr21m01rlk16528rj791g.png" alt="image_1btre4qr21m01rlk16528rj791g.png-35.5kB"></p><p>这样不但可以将图片尺寸的管理交托给自动化的构建脚本，提升CSS开发中的效率，并且可以明显降低设计稿发生修改所带来的代码改动成本。<br>如若过程中，设计稿发生修改，某一个元素的尺寸发生了稍微的改动，这种方案下，我们只需要重新更新切图，再执行一次自动构建任务，中间的代码不需要任何的改动，高效而准确！</p><p><strong>元素定位</strong><br>得益于 REM 方案带来的方便，我们只需要解决一种尺寸稿件下的准确定位，再附加上自动构建任务中，将 PX 自动转换为 REM 单位，其中的源码是 PX 单位，而构建出的成品代码是 REM 单位，这样实现了代码对于开发人员的可理解，以及代码的各尺寸终端的可兼容，两者兼顾。定位问题，在本次的开发过程中，直接采用的是针对于 750px 尺寸下的精准定位。</p><p><img src="http://static.zybuluo.com/lfire/orjfl3q08kij10fnukltnk1t/image_1btt70pk11sigibgs691hnv1886p.png" alt="image_1btt70pk11sigibgs691hnv1886p.png-30.1kB"></p><p>如图中所示，小狐狸的路径节点相对于 750px 下的定位，全可以一次性的在稿件中标注定位，并写好相应的class，自动构建类的脚本，会自动将相关的单位进行解析转换。</p><p><img src="http://static.zybuluo.com/lfire/jwk1lb2wdovz28rqt0cf80ue/image_1btt7nj9aa1a1k7l660mvt1es416.png" alt="image_1btt7nj9aa1a1k7l660mvt1es416.png-33.7kB"></p><p><strong>样式封装共用</strong><br>相信大家，在前面的几组对比图中，就可以发现，开发中有用到 <strong><a href="http://lesscss.org/" target="_blank" rel="noopener">LESS</a></strong> 来结构化的开发样式布局。类似于 LESS 的CSS预处理插件还有很多，我们可以自己查询相关的资料，这里希望能过这种预处理的插件，给我们带来了 CSS 模块、函数式的编辑体验，这样可以大增强样式表的结构可读性，同时也可以很好的提升样式表产出的规范，以及逻辑准确性。重要的是，其中可以很大程度的减少我们相似规则，或是嵌套规则之间的代码量。</p><p><img src="http://static.zybuluo.com/lfire/n10a2v5jn5eci9jkc0u3nueu/image_1btt8j3s91brq5o31pcgk52c641j.png" alt="image_1btt8j3s91brq5o31pcgk52c641j.png-73.7kB"></p><p>在本段示例规则中，弹窗的整体内容进行了一次性编写，其中各不同弹窗中的 <em>.bts</em> 和 <em>.bt</em> 可以共用，并且结合共用规则的封装，每一个不同弹窗，都与规则 <em>.pop_cont</em> 组合，其中具有相同表现的弹窗（<em>.p_c_free</em> &amp; <em>.p_c_props</em>）直接共用规则。其中各规则之间的嵌套层级非常明确清晰，对于规则的阅读以及整体统一管理非常方便，从而屏蔽了普通 CSS 在编写过程中的，可能比较分散，规则识别路径原则不一致，给编写和维护带来困惑的弊端。</p><p><strong>总之（总而言之，言而总之）</strong><br>对于样式的处理，我们借助了几个不同的方案，进行了一种组合搭配，实现了对于移动端尺寸适配，以及样式结构化、模块化的开发体验。</p><h3 id="32-html部分"><a class="markdownIt-Anchor" href="#32-html部分"></a> 3.2 HTML部分</h3><p>HTML部分的提出，对于本项目中的场景，可能不是十分的贴切，这里最为主要的点是需要解析 HTML 模块化的问题，引出这个需求的考虑有以下几点：</p><ul><li>页面结构更为清晰</li><li>模块之间可以达成共用</li><li>IDE 等相关软件的响应速度影响</li><li>减少重复代码在不同文件中的重复出现</li></ul><p><img src="http://static.zybuluo.com/lfire/fw7ztripqgtlggaasiy5fqcg/image_1bttb02h511hi12ta18vm94e1dh020.png" alt="image_1bttb02h511hi12ta18vm94e1dh020.png-37.6kB"></p><p>这是本次项目中的主要 HTML 页面代码结构，其中有出现 <em>include</em> 的语法，而这种就是对于分模块化开发的一种实践方式，集成的是 <strong><a href="http://mozilla.github.io/nunjucks/" target="_blank" rel="noopener">nunjucks</a></strong> ，它的引入给 HTML 带来了很多模块化方向的能力提升，具体的特性，可以详细阅读其手册。<br>回到项目中， <em>head_wap.html</em> 这是文件所需要引入的相关样式及JS库的部分，这是我们项目中经常在各个页面重复出现的部分，因此，这里对该部分进行了一次提取，在不同页面，只需要一名 <em>include</em> 就可以解决这种重复问题，更好的达到统一管理的需求。<br>而对于另一个实操过程的痛点，即，我们在开发过程中，一般会选用相关的代码编辑器，这里是 <em>webstorm IDE</em>，而正是因为这种类型工具的使用过程中，工具本身对于代码文件需要内建很多的索引，用以提供相关功能，而这个内建索引及维护过程中，需要消耗很大的系统性能，这种情况在大文件编辑时尤为明显，因此，为了在这个方向提升我们的开发效率和体验，我们通过模块化的分割，将一个大文件，拆分为各相对较小的文件，这样也就可以避免在编辑器上的体验下降的问题。</p><h3 id="33-js部分"><a class="markdownIt-Anchor" href="#33-js部分"></a> 3.3 JS部分</h3><p>JS部分中，我们需要整理和注意的点其实非常的多，其中所涉及到的模块，功能、性能、安全、规范……，等等，各个词，甚至都可以拓展开为一个专门的课程，可见在这个大方向上，问题的复杂程度。<br>在本次的项目中，也只是一个很小的引子，希望可以引申出对于这些方向问题的考虑，而实际的使用，可能并没有涉及。</p><p><strong>模块化</strong><br>有点牵强，但可能如前面所述，可以是一个<em>引子</em>。这里的模块化，也就只是停留在了函数的简单封装，能有规范、明确的相关参数说明，以及相关的调用解析。</p><p><img src="http://static.zybuluo.com/lfire/ut6a9w8w4xs4a51iyn3p6d4t/image_1bttc7re91nfi1la814fv1c1u79s2d.png" alt="image_1bttc7re91nfi1la814fv1c1u79s2d.png-54.2kB"></p><p>这些也仅仅只是JS模块化的冰山一角，问题（砖）的抛出，只是为了引出项目实施过程中，对于模块化开发的思考（玉）。<br>其过程中，可能有好几个词可以来提及，<strong><a href="http://www.commonjs.org/" target="_blank" rel="noopener">commonjs</a></strong>、<strong><a href="http://requirejs.org/docs/whyamd.html" target="_blank" rel="noopener">AMD</a></strong>，这些思想，都是为了解决一种（一系列）具体的问题而产生，因此，要读懂这其中的内容，也必须要能理解这种<strong>问题是什么，痛到底在哪里</strong>，这里也仅仅只能讲到这个层次，更多的内容，后面有机会，我再会详细的来展开。</p><h3 id="34-什么能交给工具"><a class="markdownIt-Anchor" href="#34-什么能交给工具"></a> 3.4 什么能交给工具</h3><p>前面无论是示例，又或是说明，都有多次的提到模块化，而这种模块化，更多的层面是面向我们开发者，是为了：<strong>让开发者有更好的编辑体验</strong>，而对于机器来说，最终是需要运行，因此，这中间的一个衔接，都是可以交给工具来完成的。</p><p><strong>LESS不能直接在浏览器直接识别解析</strong><br>因此有了类似于 <em><a href="https://www.npmjs.com/package/gulp-less" target="_blank" rel="noopener">gulp-less</a></em> 的解析编译工具，可以方便快捷高效的将你的 less 代码转换为对应的 CSS。</p><p><strong>include是什么鬼，浏览器怎么认识</strong><br>这个梗主要是用来给你人看的，而浏览器看不到它，中间就是因为有 <em><a href="http://mozilla.github.io/nunjucks/" target="_blank" rel="noopener">nunjucks</a></em> 的存在，解析了人机之间的区别。</p><p><strong>我只能理解PX，但机器需要REM</strong><br><em><a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="noopener">px2rem</a></em> 的引入，正好解决了这种人与机器之间的不同需要点，人能很好理解，机器又能很好适配。</p><p><strong>……</strong></p><p>工程化的过程，其实就是模块化、自动化之间的一种更业务层次的组合，每一个复杂业务场景出现时，最为直接的问题解决方向就是<strong>如何便于人的理解，又能便于机器的执行</strong>，这些不同层次问题的思考解决过程，其实就是我们所需要的思考模型。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E9%A1%B9%E7%9B%AE%E6%95%88%E6%9E%9C%E6%BC%94%E7%A4%BA&quot;&gt;1 项目效果演示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E8%AF%B4%E5%A4%8D%E6%9D%82&quot;&gt;2 为什么可以说复杂&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-%E6%95%B4%E4%BD%93%E7%9A%84%E6%B8%B8%E6%88%8F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B&quot;&gt;2.1 整体的游戏执行流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-%E7%95%8C%E9%9D%A2%E4%B8%AD%E5%85%83%E7%B4%A0%E4%BC%97%E5%A4%9A&quot;&gt;2.2 界面中元素众多&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-%E7%95%8C%E9%9D%A2%E5%85%83%E7%B4%A0%E6%B6%89%E5%8F%8A%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2%E5%8A%A8%E7%94%BB%E6%89%A7%E8%A1%8C&quot;&gt;2.3 界面元素涉及状态切换&amp;amp;动画执行&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E9%9C%80%E8%A6%81%E5%A6%82%E4%BD%95%E8%80%83%E8%99%91&quot;&gt;3 需要如何考虑&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-%E6%A0%B7%E5%BC%8F%E9%83%A8%E5%88%86&quot;&gt;3.1 样式部分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-html%E9%83%A8%E5%88%86&quot;&gt;3.2 HTML部分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33-js%E9%83%A8%E5%88%86&quot;&gt;3.3 JS部分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#34-%E4%BB%80%E4%B9%88%E8%83%BD%E4%BA%A4%E7%BB%99%E5%B7%A5%E5%85%B7&quot;&gt;3.4 什么能交给工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端开发" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>markdown编写规范API文档</title>
    <link href="http://yoursite.com/2017/10/23/markdown-api/"/>
    <id>http://yoursite.com/2017/10/23/markdown-api/</id>
    <published>2017-10-23T10:01:30.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E6%8E%A5%E5%8F%A3%E5%8C%85">1 学生管理（接口包）</a><ul><li><a href="#11-%E6%8E%A5%E5%8F%A3%E6%A0%87%E9%A2%98%E6%A0%BC%E5%BC%8F%E7%A4%BA%E4%BE%8B">1.1 接口标题（格式示例）</a></li><li><a href="#12-%E5%8D%95%E4%B8%AA%E5%AD%A6%E7%94%9F%E7%99%BB%E5%BD%95demo">1.2 单个学生登录（DEMO）</a></li></ul></li></ul></p><a id="more"></a><p>随技术不断发展，服务端和前端及其各方的逻辑交互，走向了一种更为规范的道路。因此，从个人能力，或是团队协作的角度出发，编写规范的 API 文档成为了一种不可缺少的能力。<br>　　以下是以 markdown 文档方式编写的一组 API DEMO ，选用 markdown 作为 API 编写工具是因为，markdown 特来了很纯粹的文档内容，并且可以优于 word 等方案的版本管理优点，文档的任何变动，可以以 diff 的方式像代码一样的查看到文档的修改细节；从可读性方面，markdown 完全可以加入自己所需要的样式编译输出为纯静态的 html 文档，再配合一些目前开源的工具，完全可以实现更多的功能。</p><h2 id="1-学生管理接口包"><a class="markdownIt-Anchor" href="#1-学生管理接口包"></a> 1 学生管理（接口包）</h2><h3 id="11-接口标题格式示例"><a class="markdownIt-Anchor" href="#11-接口标题格式示例"></a> 1.1 接口标题（格式示例）</h3><hr><p><strong>描述：</strong><br>　接口相关说明<br><strong>请求URL：</strong><br>　<code>http://xx.xx.com:80/xxx/</code><br><strong>请求方式：</strong><br>　GET<br><strong>参数：</strong></p><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">必选</th><th style="text-align:left">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">xxxx</td><td style="text-align:left">是</td><td style="text-align:left">string</td><td>参数说明</td></tr></tbody></table><p><strong>返回示例：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    xxx: xx</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>返回参数说明：</strong></p><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">status</td><td style="text-align:left">int</td><td>1：为成功；0：为失败</td></tr></tbody></table><p><strong>备注：</strong><br>　其他相关内容说明</p><h3 id="12-单个学生登录demo"><a class="markdownIt-Anchor" href="#12-单个学生登录demo"></a> 1.2 单个学生登录（DEMO）</h3><hr><p><strong>描述：</strong><br>　学生登录接口，账号由教师一键生成，默认密码 123456。<br><strong>请求URL：</strong><br>　<code>https://xxx.xxx.com:8080/student/login</code><br><strong>请求方式：</strong><br>　POST<br><strong>参数：</strong></p><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">必选</th><th style="text-align:left">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">idcard</td><td style="text-align:left">是</td><td style="text-align:left">string</td><td>身份证号码</td></tr><tr><td style="text-align:left">password</td><td style="text-align:left">是</td><td style="text-align:left">string</td><td>密码</td></tr></tbody></table><p><strong>返回示例：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    'res': 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>返回参数说明：</strong></p><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">res</td><td style="text-align:left">int</td><td>1 为成功 0为失败</td></tr></tbody></table><p><strong>备注：</strong><br>　此接口同时会返回 Cookie</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E6%8E%A5%E5%8F%A3%E5%8C%85&quot;&gt;1 学生管理（接口包）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11-%E6%8E%A5%E5%8F%A3%E6%A0%87%E9%A2%98%E6%A0%BC%E5%BC%8F%E7%A4%BA%E4%BE%8B&quot;&gt;1.1 接口标题（格式示例）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12-%E5%8D%95%E4%B8%AA%E5%AD%A6%E7%94%9F%E7%99%BB%E5%BD%95demo&quot;&gt;1.2 单个学生登录（DEMO）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="API" scheme="http://yoursite.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>hexo基础搭建博客系统</title>
    <link href="http://yoursite.com/2017/10/13/hexo-base-deploy/"/>
    <id>http://yoursite.com/2017/10/13/hexo-base-deploy/</id>
    <published>2017-10-13T14:12:05.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85">1 介绍&amp;安装</a><ul><li><a href="#11-%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E7%A8%8B">1.1 简单的过程</a></li><li><a href="#12-%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98">1.2 安装主题</a></li><li><a href="#13-%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E5%AF%BC%E5%85%A5">1.3 默认配置导入</a></li></ul></li><li><a href="#2-%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%96%B0%E5%BB%BA">2 博客文章新建</a></li><li><a href="#3-%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83">3 部署&amp;发布</a><ul><li><a href="#31-%E7%94%9F%E6%88%90">3.1 生成</a></li><li><a href="#32-%E9%83%A8%E7%BD%B2">3.2 部署</a></li><li><a href="#33-%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D">3.3 一步到位</a></li></ul></li></ul></p><a id="more"></a><p>为了更好的使用 hexo 博客系统，对相关的配置进行一个基本的梳理或是内置默认值，其中使用 next 作为其中默认的主题样式，以此来美化 hexo 本身自带的一套主题。系统提供有独立的 github 仓库，同时通过对相关细节记录下来，以达到后期回看，或是另外环境快速搭建的目的。</p><h2 id="1-介绍安装"><a class="markdownIt-Anchor" href="#1-介绍安装"></a> 1 介绍&amp;安装</h2><p>本系统是基于 hexo 搭建，因此，我们需要先安装好 hexo 的基础环境。<br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo 帮助说明</a><br>在 hexo 的官网，有详细的说明，如何搭建 hexo 的命令环境，以及基础 node 环境的安装也都有详细说明。</p><h3 id="11-简单的过程"><a class="markdownIt-Anchor" href="#11-简单的过程"></a> 1.1 简单的过程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装 hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment">## 初始化 hexo，其中 blog 为你希望用于存储博客文件的目录名称，可以自行决定</span></span><br><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><h3 id="12-安装主题"><a class="markdownIt-Anchor" href="#12-安装主题"></a> 1.2 安装主题</h3><p>因本次的系统，我们默认以 next 为博客的默认主题，因此我们可以通过 github 来实现 next 的安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class="line"><span class="comment"># 或使用SVN</span></span><br><span class="line">svn <span class="built_in">export</span> https://github.com/iissnan/hexo-theme-next.git/trunk/ themes/next --force</span><br></pre></td></tr></table></figure><p>以上的两种情况，你可以根据你个人的喜好和环境选择一种方式即可。</p><h3 id="13-默认配置导入"><a class="markdownIt-Anchor" href="#13-默认配置导入"></a> 1.3 默认配置导入</h3><p>在本次的搭建过程中，hexo 本身存在有很多的相关配置，因此，经过梳理，将相关配置开了一个项目，托管到了 github，我们可以通过将这份线上的配置下载到本地博客系统中，即可实现一次性配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svn <span class="built_in">export</span> https://github.com/lfire/wumiblog.git/trunk/ ./ --force</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="2-博客文章新建"><a class="markdownIt-Anchor" href="#2-博客文章新建"></a> 2 博客文章新建</h2><p>环境搭建完成后，我们就可以开始文章的写作了。写作过程中，hexo 设计了一个【layout】的概念，从字面来理解，就是布局的意思，也可以理解为模板，如果有相关能力者，你也可以开发相应的 layout 来支持更为丰富的功能，这点上，不再展开，具体可以查看官方的相关文档。<br>以下记录几种常用的 layout 页的建立命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建标签页</span></span><br><span class="line">hexo new page <span class="string">"tags"</span></span><br><span class="line"><span class="comment">## 创建分类页</span></span><br><span class="line">hexo new page <span class="string">"categories"</span></span><br></pre></td></tr></table></figure><p>需要注意的是，在实际使用过程中，我们新建普通的博客文章，这个 layout 参数是可以省略的，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new hello-hexo</span><br></pre></td></tr></table></figure><p>执行之后，就会在对应的目录下（如目录名为 blog，则路径为：<em>blog/source/_posts/hello-hexo.md</em>）生成相关文件。</p><h2 id="3-部署发布"><a class="markdownIt-Anchor" href="#3-部署发布"></a> 3 部署&amp;发布</h2><p>在配置文件中（<em>blog/_config.yml</em>），如下图，会有 github 部署位置的一个配置，本例中，使用的只是一个演示 demo，有需要的可以自已修改为对应的位置即可。<br><img src="http://static.zybuluo.com/lfire/tldkxmb2dhy0cni66z4jrsvc/image_1bsk41i721c8d1d9f1p761dop2159.png" alt="image_1bsk41i721c8d1d9f1p761dop2159.png-12.6kB"><br>配置部署位置后，我们就可以执行相关命令来完成部署。</p><h3 id="31-生成"><a class="markdownIt-Anchor" href="#31-生成"></a> 3.1 生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 先将 markdown 文档转化为静态 HTML 文件资源</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment">## or 缩写</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="32-部署"><a class="markdownIt-Anchor" href="#32-部署"></a> 3.2 部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 将生成的静态文件上传部署到配置位置</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="comment">## or 缩写</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="33-一步到位"><a class="markdownIt-Anchor" href="#33-一步到位"></a> 3.3 一步到位</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line"><span class="comment">## or</span></span><br><span class="line">hexo deploy --generate</span><br><span class="line"><span class="comment">## or 缩写</span></span><br><span class="line">hexo g -d</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85&quot;&gt;1 介绍&amp;amp;安装&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11-%E7%AE%80%E5%8D%95%E7%9A%84%E8%BF%87%E7%A8%8B&quot;&gt;1.1 简单的过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12-%E5%AE%89%E8%A3%85%E4%B8%BB%E9%A2%98&quot;&gt;1.2 安装主题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#13-%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E5%AF%BC%E5%85%A5&quot;&gt;1.3 默认配置导入&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%96%B0%E5%BB%BA&quot;&gt;2 博客文章新建&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83&quot;&gt;3 部署&amp;amp;发布&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-%E7%94%9F%E6%88%90&quot;&gt;3.1 生成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-%E9%83%A8%E7%BD%B2&quot;&gt;3.2 部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33-%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D&quot;&gt;3.3 一步到位&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>win10 升级后 cmder 别名失效修复</title>
    <link href="http://yoursite.com/2017/03/10/cmder-chinese-win10/"/>
    <id>http://yoursite.com/2017/03/10/cmder-chinese-win10/</id>
    <published>2017-03-10T20:05:24.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E9%97%AE%E9%A2%98%E8%A1%A8%E7%8E%B0%E5%88%AB%E5%90%8D%E5%85%A8%E9%83%A8%E5%A4%B1%E6%95%88">1 问题表现，别名全部失效</a></li><li><a href="#2-%E6%9F%A5%E6%89%BE%E7%AD%94%E6%A1%88">2 查找答案</a></li></ul></p><a id="more"></a><p>近期系统接收到了 win10 的慢速升级推送，但发现，升级过后，系统原先配置好的 cmder 别名全都无法正常工作。在 cmder github 上也试图查找相关的解决方案，但很多的说法以及配置都没能解决，最后，在一个地方发现了问题的初步解决方案。</p><h2 id="1-问题表现别名全部失效"><a class="markdownIt-Anchor" href="#1-问题表现别名全部失效"></a> 1 问题表现，别名全部失效</h2><p>表现是相关加载都能成功，但命令本身就是不生效，无法工作，并且，相关中文也会产生叠加现象。<br><img src="http://static.zybuluo.com/lfire/39hqqx5xswsstbpa6ayc620y/image_1bas246jq19641o3ffbjncm14ea9.png" alt="image_1bas246jq19641o3ffbjncm14ea9.png-32.6kB"></p><h2 id="2-查找答案"><a class="markdownIt-Anchor" href="#2-查找答案"></a> 2 查找答案</h2><p>我通过 google 查找各种可能性，最后终于在 <a href="https://github.com/cmderdev/cmder/issues/1257" target="_blank" rel="noopener">github cmder issues</a> 查找到了需要的答案。<br>原来，</p><blockquote><p>Ok guys, found what the issue was.<br>I am using Windows 10 Insider build 15025 - the problem was with modification that were made by Microsoft to standard cmd.exe</p></blockquote><blockquote><p>To solve this I had to “Use legacy console” option in standard cmd - which solved this issue.</p></blockquote><p>是因 win10 升级，可能其内部改变了某些终端的特性，我们需要禁用新的控制台。<br><img src="http://static.zybuluo.com/lfire/xew1dq4a9von8309oqczgpij/image_1bas34bfun11ip51bot1am71ute9.png" alt="image_1bas34bfun11ip51bot1am71ute9.png-36kB"></p><p>这样配置完成后，我们重新打开 cmder 一次，** OK，问题解决 **。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E9%97%AE%E9%A2%98%E8%A1%A8%E7%8E%B0%E5%88%AB%E5%90%8D%E5%85%A8%E9%83%A8%E5%A4%B1%E6%95%88&quot;&gt;1 问题表现，别名全部失效&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E6%9F%A5%E6%89%BE%E7%AD%94%E6%A1%88&quot;&gt;2 查找答案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="shell" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/shell/"/>
    
    
      <category term="cmd" scheme="http://yoursite.com/tags/cmd/"/>
    
      <category term="cmder" scheme="http://yoursite.com/tags/cmder/"/>
    
      <category term="shell tool" scheme="http://yoursite.com/tags/shell-tool/"/>
    
      <category term="cmder alias" scheme="http://yoursite.com/tags/cmder-alias/"/>
    
  </entry>
  
  <entry>
    <title>cmder &amp; cygwin 中文支持解决方案</title>
    <link href="http://yoursite.com/2017/03/08/cmder-cygwin-chinese/"/>
    <id>http://yoursite.com/2017/03/08/cmder-cygwin-chinese/</id>
    <published>2017-03-08T09:54:46.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83-%E5%9C%BA%E6%99%AF">1 使用环境 &amp; 场景</a></li><li><a href="#2-cmder-%E6%96%B9%E6%A1%88">2 cmder 方案</a><ul><li><a href="#21-%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE">2.1 界面配置</a></li><li><a href="#22-%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">2.2 终端环境变量</a></li><li><a href="#23-%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE">2.3 相关工具的配置</a></li></ul></li><li><a href="#3-cygwin-%E6%96%B9%E6%A1%88">3 cygwin 方案</a><ul><li><a href="#31-%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE">3.1 界面配置</a></li><li><a href="#32-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE">3.2 环境变量配置</a></li><li><a href="#33-%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE">3.3 相关工具配置</a></li></ul></li><li><a href="#4-%E7%BB%BC%E5%90%88%E6%96%B9%E6%A1%88">4 综合方案</a></li></ul></p><a id="more"></a><p>在 windows 环境下，我们因系统本身自带的 cmd 方案表现很弱，所以我们经常使用其他的解决方案来弥补。而这些方案中最为常见和好用的也就是 cmder 和 cygwin 两种。<br>今天对于方案中，我们常遇到的问题——中文编码乱码问题来配置使用。</p><h2 id="1-使用环境-场景"><a class="markdownIt-Anchor" href="#1-使用环境-场景"></a> 1 使用环境 &amp; 场景</h2><p>中文环境下，最为常见的编码就是：</p><ul><li>GBK</li><li>UTF-8</li></ul><p>而在 windows 环境下，这两种编码的文件同时存在是非常常见的，而在 cmd 的终端环境下，想要一次性解决该显示问题，目前来说并不容易，因此，我们当前只能寻找一种最为全面的解决方案，以最大可能来解决该问题。<br>因此，目前需要来分析一下使用的场景：</p><ul><li>程序员编码</li><li>各工具使用，如： git、svn等</li></ul><p>而对于编码的场景下，我们目前最为推荐的编码格式仍是 utf-8 ，所以，这里也一样的不解释，建议使用 utf-8。<br>而对于 git &amp; svn 等相关的版本管理工具，这里也是程序员常有遇到的场景，而在 git 序列中，github 的使用常在手边过，而 github 所支持的中文编码就是 utf-8 。<br>从这些相关的场景分析来看，我们所有可控的场景中，我们最好使用的编码仍然是 <strong>utf-8</strong> 。<br>因此，这里本人也强烈推荐各位，在可以自己控制的情况下，我们应该首选 <strong>utf8</strong>。<br>场景的主编码确定好后，我们就可以分别针对两种不同工具，来进行相关的支持配置。</p><p><strong>配置总体可以分为：</strong></p><ul><li>软件界面</li><li>终端环境变量</li><li>相关工具配置</li></ul><h2 id="2-cmder-方案"><a class="markdownIt-Anchor" href="#2-cmder-方案"></a> 2 cmder 方案</h2><h3 id="21-界面配置"><a class="markdownIt-Anchor" href="#21-界面配置"></a> 2.1 界面配置</h3><p>右键标题栏 &gt; settings<br><img src="http://static.zybuluo.com/lfire/tj8269jbtkqtfykvgy5zjq6e/image_1balsa4i04rc1qfi1ve13q94ss9.png" alt="image_1balsa4i04rc1qfi1ve13q94ss9.png-14.2kB"></p><p>Main &gt; Font charset<br><img src="http://static.zybuluo.com/lfire/uajwkvwfokfmi91x60b6ntwh/image_1balthlad1ksn14qb1jg13551l8om.png" alt="image_1balthlad1ksn14qb1jg13551l8om.png-58.9kB"></p><p>这里选择 GB 2312 主要是因为，windows 系统的主要编码还是：ANSI。</p><h3 id="22-终端环境变量"><a class="markdownIt-Anchor" href="#22-终端环境变量"></a> 2.2 终端环境变量</h3><p>Settings &gt; Startup &gt; Environment<br><img src="http://static.zybuluo.com/lfire/9dynqnoliilgilonji2mo8jc/image_1baltov1i1s8t1v3h1pqg1k2010cg13.png" alt="image_1baltov1i1s8t1v3h1pqg1k2010cg13.png-52.4kB"></p><p>这里的设置，需要关闭 cmder 再重新打开一次生效。<br>我们可以通过 locale 命令查看设置的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">λ locale</span><br><span class="line">LANG=zh_CN.utf-8</span><br><span class="line">LC_CTYPE=<span class="string">"zh_CN.utf-8"</span></span><br><span class="line">LC_NUMERIC=<span class="string">"zh_CN.utf-8"</span></span><br><span class="line">LC_TIME=<span class="string">"zh_CN.utf-8"</span></span><br><span class="line">LC_COLLATE=<span class="string">"zh_CN.utf-8"</span></span><br><span class="line">LC_MONETARY=<span class="string">"zh_CN.utf-8"</span></span><br><span class="line">LC_MESSAGES=<span class="string">"zh_CN.utf-8"</span></span><br><span class="line">LC_ALL=</span><br></pre></td></tr></table></figure><p><strong>在新版本 V 1.3.5 中发现无法通过界面设置环境变量保存成功，下面提供另一种实现方法：</strong><br>在安装目录下找到用户配置文件路径 <code>config/user-profile.cmd</code> ，打开编辑，在其中加入环境变量配置语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> LANG=zh_CN.utf-8</span><br></pre></td></tr></table></figure><h3 id="23-相关工具的配置"><a class="markdownIt-Anchor" href="#23-相关工具的配置"></a> 2.3 相关工具的配置</h3><p><strong>git 配置</strong></p><p>在 git 命令行下，主要是与：</p><ul><li>i18n.commitencoding</li><li>i18n.logoutputencoding</li></ul><p>两个配置参数有关，我们可以通过以下命令进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">λ git config --global i18n.commitencoding utf-8</span><br><span class="line">λ git config --global i18n.logoutputencoding utf-8</span><br></pre></td></tr></table></figure><p><strong>VIM 配置</strong></p><p>vim 是终端下最为常见的文档编辑器，我们可以在 VIM 的配置文件中加入如下配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set fileencoding=cp936</span><br><span class="line">set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1</span><br></pre></td></tr></table></figure><p>注：<br>查找 vim 配置文件的位置，可以通过进入 vim 后，输入<br>:version</p><h2 id="3-cygwin-方案"><a class="markdownIt-Anchor" href="#3-cygwin-方案"></a> 3 cygwin 方案</h2><h3 id="31-界面配置"><a class="markdownIt-Anchor" href="#31-界面配置"></a> 3.1 界面配置</h3><p>右键标题栏 &gt; Options<br><img src="http://static.zybuluo.com/lfire/s4b2vn4jwjnexkenrh523c4k/image_1balvfe7crb3rmutbr10e715211g.png" alt="image_1balvfe7crb3rmutbr10e715211g.png-7.6kB"></p><p>Text<br><img src="http://static.zybuluo.com/lfire/sg7wj11r10qijeg44gl54wme/image_1balvh3up1c1dmrg6ko5jovn01t.png" alt="image_1balvh3up1c1dmrg6ko5jovn01t.png-17.1kB"></p><h3 id="32-环境变量配置"><a class="markdownIt-Anchor" href="#32-环境变量配置"></a> 3.2 环境变量配置</h3><p>修改 ~/.bashrc 文件，加入：<br>export LANG=“zh_CN.UTF-8”<br>export OUTPUT_CHARSET=“UTF8”</p><h3 id="33-相关工具配置"><a class="markdownIt-Anchor" href="#33-相关工具配置"></a> 3.3 相关工具配置</h3><p>git 和 vim 的配置与 cmder 下是一致的，可以采用同样的方式来处理。<br><img src="http://static.zybuluo.com/lfire/onwbhz11og0ocin9z3fe3irq/image_1bam88jme1gt21lt41v5n8j37gh2a.png" alt="image_1bam88jme1gt21lt41v5n8j37gh2a.png-9kB"></p><h2 id="4-综合方案"><a class="markdownIt-Anchor" href="#4-综合方案"></a> 4 综合方案</h2><p>cmder 是一种终端集成器，它同样可以将 cygwin 集成到其内部窗口上。<br>具体的配置方式，我们可以参考 <a href="https://github.com/cmderdev/cmder/wiki/%5BWindows%5D-Integrating-Cygwin" target="_blank" rel="noopener">cmder 官方手册</a><br>以下是本人的配置截图：<br><img src="http://static.zybuluo.com/lfire/ns46ophzsvpq10ws01hqqhqv/image_1bam8ffjp11t71te51p34183e102n.png" alt="image_1bam8ffjp11t71te51p34183e102n.png-60.7kB"></p><p>配置后的运行效果图：<br><img src="http://static.zybuluo.com/lfire/8c4i86w8lyvj98vx7931pg11/image_1bam8k79o8kk1jmg3ah5tkqo234.png" alt="image_1bam8k79o8kk1jmg3ah5tkqo234.png-73.2kB"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83-%E5%9C%BA%E6%99%AF&quot;&gt;1 使用环境 &amp;amp; 场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-cmder-%E6%96%B9%E6%A1%88&quot;&gt;2 cmder 方案&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE&quot;&gt;2.1 界面配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&quot;&gt;2.2 终端环境变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE&quot;&gt;2.3 相关工具的配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-cygwin-%E6%96%B9%E6%A1%88&quot;&gt;3 cygwin 方案&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE&quot;&gt;3.1 界面配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE&quot;&gt;3.2 环境变量配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33-%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE&quot;&gt;3.3 相关工具配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%E7%BB%BC%E5%90%88%E6%96%B9%E6%A1%88&quot;&gt;4 综合方案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="shell" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/shell/"/>
    
    
      <category term="cmder" scheme="http://yoursite.com/tags/cmder/"/>
    
      <category term="cygwin" scheme="http://yoursite.com/tags/cygwin/"/>
    
      <category term="shell中文支持" scheme="http://yoursite.com/tags/shell%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81/"/>
    
      <category term="windows shell" scheme="http://yoursite.com/tags/windows-shell/"/>
    
  </entry>
  
  <entry>
    <title>神器 cmder</title>
    <link href="http://yoursite.com/2017/03/02/cmder/"/>
    <id>http://yoursite.com/2017/03/02/cmder/</id>
    <published>2017-03-02T09:12:42.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#1-windows-cmd-%E4%B8%8D%E8%B6%B3">1 windows cmd 不足</a></li><li><a href="#2-%E7%A5%9E%E5%99%A8%E7%99%BB%E5%9C%BA-cmder">2 神器登场 cmder</a></li><li><a href="#3-%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7">3 主要特性</a><ul><li><a href="#31-%E6%8F%90%E4%BE%9B%E9%AB%98%E5%BA%A6%E7%B1%BB-linux-%E7%9A%84%E7%BB%88%E7%AB%AF%E4%BD%93%E9%AA%8C">3.1 提供高度类 Linux 的终端体验</a></li><li><a href="#32-%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%94%AF%E6%8C%81%E4%B8%B0%E5%AF%8C">3.2 快捷键支持丰富</a></li><li><a href="#33-%E6%94%AF%E6%8C%81%E5%91%BD%E4%BB%A4%E5%88%AB%E5%90%8Daliases%E9%85%8D%E7%BD%AE">3.3 支持命令别名(Aliases)配置</a></li><li><a href="#34-%E5%AF%B9%E4%BA%8E%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81%E7%9A%84%E5%A4%84%E7%90%86">3.4 对于中文支持的处理</a></li></ul></li><li><a href="#4-%E6%95%B4%E4%BD%93%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%8C%85%E4%B8%8B%E8%BD%BD">4 整体配置及软件包下载</a></li></ul></p><a id="more"></a><p>当我们在 windows 环境下来进行开发编码工作时，是不是经常有一个不好的体验—— cmd 太弱了。</p><h2 id="1-windows-cmd-不足"><a class="markdownIt-Anchor" href="#1-windows-cmd-不足"></a> 1 windows cmd 不足</h2><blockquote><ul><li>界面太过于死板，不美观</li><li>相关的操作，以及命令支持不完善，无法达到，或是平衡 linx 平台下相关的操作习惯</li><li>当前各种框架平台不断发展，相关需要在命令行下执行的操作越来越多，而cmd没有多标签等相关的切换功能</li><li>窗口的大小直接受限，不能自如的调整窗口大小</li><li>…</li></ul></blockquote><p>以上所列出的点不尽全，相信只要有需要使用 shell 来进行终端操作的用户就能感觉到 windows 对于用户，在这方面的不友好。而现实的开发工作序列中，无论是我们的代码管理，还是我们的环境编译，以及其他相关框架或平台的应用，如若想完全的脱离终端，这种可能性及小。<br>另外，从操作的效率性方面来出发，命令行下的操作，要比鼠标和键盘的来回切换操作来得高效和方便。（也许你不太认可，但这是很大一部分人公认的。）</p><h2 id="2-神器登场-cmder"><a class="markdownIt-Anchor" href="#2-神器登场-cmder"></a> 2 神器登场 cmder</h2><p><a href="http://cmder.net" target="_blank" rel="noopener">cmder</a> 是一款绿色且开源的软件，并且已经托管在了 <a href="https://github.com/cmderdev/cmder" target="_blank" rel="noopener">github</a> 上，其主要的目标即是在 windows 平台上，打造类 linux 的终端操作体验。<br>先来一张靓照：<br><img src="http://static.zybuluo.com/lfire/kjx599up3fkhyp66w8u1thk1/image_1ba6bg7io1baabambl16t6164l9.png" alt="image_1ba6bg7io1baabambl16t6164l9.png-125.4kB"><br>从图中我们可以看到，中文支持友好，同时，终端的颜值很高，最最主要的是，本软件是高度可定制的。<br>只要是你愿意，你完全可以根据你自己的喜好，自定出一套你自己喜欢的主题出来。<br>如下图所示，你可以打开 Settings 来配置你自己的各种需要<br><img src="http://static.zybuluo.com/lfire/c7lnguz1rbyw3ptfc25t1nsa/image_1ba6dr9s21t1b1va83kag7r14eqm.png" alt="image_1ba6dr9s21t1b1va83kag7r14eqm.png-58kB"></p><h2 id="3-主要特性"><a class="markdownIt-Anchor" href="#3-主要特性"></a> 3 主要特性</h2><h3 id="31-提供高度类-linux-的终端体验"><a class="markdownIt-Anchor" href="#31-提供高度类-linux-的终端体验"></a> 3.1 提供高度类 Linux 的终端体验</h3><p>在我们平常的使用命令终端的体验过程中，如若能达到 linux 平台下相关命令的可靠性，那即是 windows 平台下开发者的福音，而 cmder 正是朝着这一方向而来的。可以支持的初略的列一下：<br>pwd ll ls whoami where cp rm unzip …<br><img src="http://static.zybuluo.com/lfire/popnb072z38727c023futjay/image_1ba6enhov1l3gqh41bfa1ktupf91g.png" alt="image_1ba6enhov1l3gqh41bfa1ktupf91g.png-55.1kB"></p><h3 id="32-快捷键支持丰富"><a class="markdownIt-Anchor" href="#32-快捷键支持丰富"></a> 3.2 快捷键支持丰富</h3><ul><li><strong>打开设置：</strong> 使用 <code>win + alt + p</code></li><li><strong>新建标签：</strong> <code>ctrl + t</code></li><li><strong>关闭标签：</strong> <code>ctrl + w</code></li><li><strong>快速新建不同类型标签：</strong> <code>shift + alt + number</code><ol><li>cmd</li><li>PowerShell</li></ol></li><li><strong>全屏：</strong> <code>alt + enter</code></li><li><strong>返回上级目录：</strong> <code>ctrl + alt + u</code></li><li><strong>历史查询：</strong> <code>ctrl + r</code></li><li><strong>选择复制文本：</strong> <code>left mouse select</code></li><li><strong>粘贴文本：</strong> <code>right click</code><br>更多的快捷键，你可以打开 <strong>Settings</strong> &gt; <strong>Keys &amp; Macro</strong> 中进行设置和查看。</li></ul><h3 id="33-支持命令别名aliases配置"><a class="markdownIt-Anchor" href="#33-支持命令别名aliases配置"></a> 3.3 支持命令别名(Aliases)配置</h3><p>这是 cmder 所提供的一个非常方便的功能，我们可以很个性化的设置我们个人喜欢的命令，来完成某些长命令的输入。<br>以下是我别名配置的一个片段，大家可参考：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span>=<span class="built_in">cd</span></span><br><span class="line">clear=cls</span><br><span class="line"><span class="built_in">history</span>=cat <span class="string">"%CMDER_ROOT%\config\.history"</span></span><br><span class="line"><span class="built_in">unalias</span>=<span class="built_in">alias</span> /d <span class="variable">$1</span></span><br><span class="line">vi=vim $*</span><br><span class="line">cmderr=<span class="built_in">cd</span> /d <span class="string">"%CMDER_ROOT%"</span></span><br><span class="line">e.=explorer .</span><br><span class="line">gl=git <span class="built_in">log</span> --oneline --all --graph --decorate  $*</span><br><span class="line">l=ls --show-control-chars  --color $*</span><br><span class="line">la=ls -aF --show-control-chars --color $*</span><br><span class="line">ll=ls -alF --show-control-chars --color $*</span><br><span class="line">ls=ls --show-control-chars -F --color $*</span><br></pre></td></tr></table></figure><h3 id="34-对于中文支持的处理"><a class="markdownIt-Anchor" href="#34-对于中文支持的处理"></a> 3.4 对于中文支持的处理</h3><p>在平常应用过程中，我们经常会遇到中文问题的苦恼，如何很好的解决中文在各种场景下的显示问题，是很多类似产品的一大痛点。</p><p><strong>常见场景：</strong></p><ul><li>中文文件或中文文件夹名的显示和操作；</li><li>VIM 中打开包含中文内容的文件查看及编辑等；</li><li>git 提交代码到 github 等代码仓库时，中文日志的提交及查看；</li></ul><p><strong>几个关键配置要点：</strong></p><ul><li>中文字体的选择：我们需要选择相关支持中文字符显示的字体来做为软件的展示字体。</li><li>字符编码的选择：在 windows 下，很多文件名，及文件的编码都是以 GBK 为编码，因此，这里我们需要很慎重的选择软件的字体编码。</li><li>环境变量的设置：因本软件的类 linux 的设计，所以很多命令，如 git 都有着 linux 下相似的处理逻辑，而 github 这种是全以 UTF8 为编码的平台，因此，环境变量需要对此进行特殊处理。</li><li>VIM 的字符编码配置：因是在 windows 平台中，很多的文件的编码可能是多种多样的，不是固定的某一种，因此，在 VIM 的配置中，就必须要考虑到这种情况，配置让它可以智能的识别并转换文件内容编码。</li></ul><p>以下贴出我所配置的部分参数：<br><strong>字体&amp;字体编码配置</strong><br><img src="http://static.zybuluo.com/lfire/tqjuairc92zf58e0a6rxrwe3/image_1ba6mm5091ucu1ijdkvg1q6ghn41t.png" alt="image_1ba6mm5091ucu1ijdkvg1q6ghn41t.png-21kB"></p><p>其中的 <strong>YaHei Consolas Hybrid</strong> 是我在编程过程中，所遇到的一种字体，对于中文、英文大小写、以及数字的支持以及辨识度很高。<a href="http://pan.baidu.com/s/1i4HDZE1" target="_blank" rel="noopener">个人推荐使用，可以这下载安装，提取密码: tmgw</a><br>而其中因是在 windows 环境下，所以建议使用 GB2312 编码。</p><p><strong>环境变量配置</strong><br><img src="http://static.zybuluo.com/lfire/mckot5pvachk05wtrvm1rvpt/image_1ba6n59vr7a8se716vu16jhrbn2a.png" alt="image_1ba6n59vr7a8se716vu16jhrbn2a.png-31.7kB"></p><p>为兼容 github 等使用，整体将 cmder 的环境变量中 LANG 设置为 UTF-8 ，以此实现 <em>git log</em> 等命令查看时支持中文。</p><p><strong>VIM配置</strong><br><img src="http://static.zybuluo.com/lfire/oatt6pao27tfbbkne7j7pgv5/image_1ba6nc7b0g391a4vhjnhfk1mhq2n.png" alt="image_1ba6nc7b0g391a4vhjnhfk1mhq2n.png-62.7kB"></p><p>为实现 VIM 支持各种编码格式文件的中文查看及编辑，cmder 内部已做好了配置进行处理，上图只是将相关的配置内容贴出。</p><h2 id="4-整体配置及软件包下载"><a class="markdownIt-Anchor" href="#4-整体配置及软件包下载"></a> 4 整体配置及软件包下载</h2><p>为方便大家直接使用，我将当前我所使用的版本，以及配置整体打包分享出来。<br><a href="http://pan.baidu.com/s/1nuKTEe1" target="_blank" rel="noopener">推荐大家使用，提取密码: 1aix</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#1-windows-cmd-%E4%B8%8D%E8%B6%B3&quot;&gt;1 windows cmd 不足&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E7%A5%9E%E5%99%A8%E7%99%BB%E5%9C%BA-cmder&quot;&gt;2 神器登场 cmder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7&quot;&gt;3 主要特性&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-%E6%8F%90%E4%BE%9B%E9%AB%98%E5%BA%A6%E7%B1%BB-linux-%E7%9A%84%E7%BB%88%E7%AB%AF%E4%BD%93%E9%AA%8C&quot;&gt;3.1 提供高度类 Linux 的终端体验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%94%AF%E6%8C%81%E4%B8%B0%E5%AF%8C&quot;&gt;3.2 快捷键支持丰富&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33-%E6%94%AF%E6%8C%81%E5%91%BD%E4%BB%A4%E5%88%AB%E5%90%8Daliases%E9%85%8D%E7%BD%AE&quot;&gt;3.3 支持命令别名(Aliases)配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#34-%E5%AF%B9%E4%BA%8E%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81%E7%9A%84%E5%A4%84%E7%90%86&quot;&gt;3.4 对于中文支持的处理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%E6%95%B4%E4%BD%93%E9%85%8D%E7%BD%AE%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%8C%85%E4%B8%8B%E8%BD%BD&quot;&gt;4 整体配置及软件包下载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="shell" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/shell/"/>
    
    
      <category term="cmd" scheme="http://yoursite.com/tags/cmd/"/>
    
      <category term="cmder" scheme="http://yoursite.com/tags/cmder/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="tool" scheme="http://yoursite.com/tags/tool/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="windows cmd" scheme="http://yoursite.com/tags/windows-cmd/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/03/01/hello-world/"/>
    <id>http://yoursite.com/2017/03/01/hello-world/</id>
    <published>2017-03-01T16:34:00.000Z</published>
    <updated>2018-03-22T13:33:22.115Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#quick-start">Quick Start</a><ul><li><a href="#create-a-new-post">Create a new post</a></li><li><a href="#run-server">Run server</a></li><li><a href="#generate-static-files">Generate static files</a></li><li><a href="#deploy-to-remote-sites">Deploy to remote sites</a></li></ul></li></ul><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><a id="more"></a><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#quick-start&quot;&gt;Quick Start&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#create-a-new-post&quot;&gt;Create a new post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#run-server&quot;&gt;Run server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#generate-static-files&quot;&gt;Generate static files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#deploy-to-remote-sites&quot;&gt;Deploy to remote sites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;quick-start&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#quick-start&quot;&gt;&lt;/a&gt; Quick Start&lt;/h2&gt;
    
    </summary>
    
      <category term="init" scheme="http://yoursite.com/categories/init/"/>
    
    
      <category term="hello" scheme="http://yoursite.com/tags/hello/"/>
    
  </entry>
  
</feed>
